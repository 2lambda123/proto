// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: notification/grpcapi.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SKF.Enlight.API.Notification {
  public static partial class Notification
  {
    static readonly string __ServiceName = "grpcapi.Notification";

    static readonly grpc::Marshaller<global::SKF.Enlight.API.Common.Void> __Marshaller_common_Void = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.Common.Void.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Common.PrimitiveString> __Marshaller_common_PrimitiveString = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.Common.PrimitiveString.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.SendNotificationInput> __Marshaller_grpcapi_SendNotificationInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.Notification.SendNotificationInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.SendNotificationOutput> __Marshaller_grpcapi_SendNotificationOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.Notification.SendNotificationOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.SetUserPreferencesInput> __Marshaller_grpcapi_SetUserPreferencesInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.Notification.SetUserPreferencesInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.GetUserPreferencesInput> __Marshaller_grpcapi_GetUserPreferencesInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.Notification.GetUserPreferencesInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.GetUserPreferencesOutput> __Marshaller_grpcapi_GetUserPreferencesOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.Notification.GetUserPreferencesOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.GetUserNotificationsInput> __Marshaller_grpcapi_GetUserNotificationsInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.Notification.GetUserNotificationsInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.GetUserNotificationsOutput> __Marshaller_grpcapi_GetUserNotificationsOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.Notification.GetUserNotificationsOutput.Parser.ParseFrom);

    static readonly grpc::Method<global::SKF.Enlight.API.Common.Void, global::SKF.Enlight.API.Common.PrimitiveString> __Method_DeepPing = new grpc::Method<global::SKF.Enlight.API.Common.Void, global::SKF.Enlight.API.Common.PrimitiveString>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeepPing",
        __Marshaller_common_Void,
        __Marshaller_common_PrimitiveString);

    static readonly grpc::Method<global::SKF.Enlight.API.Notification.SendNotificationInput, global::SKF.Enlight.API.Notification.SendNotificationOutput> __Method_SendNotification = new grpc::Method<global::SKF.Enlight.API.Notification.SendNotificationInput, global::SKF.Enlight.API.Notification.SendNotificationOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendNotification",
        __Marshaller_grpcapi_SendNotificationInput,
        __Marshaller_grpcapi_SendNotificationOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.Notification.SetUserPreferencesInput, global::SKF.Enlight.API.Common.Void> __Method_SetUserPreferences = new grpc::Method<global::SKF.Enlight.API.Notification.SetUserPreferencesInput, global::SKF.Enlight.API.Common.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetUserPreferences",
        __Marshaller_grpcapi_SetUserPreferencesInput,
        __Marshaller_common_Void);

    static readonly grpc::Method<global::SKF.Enlight.API.Notification.GetUserPreferencesInput, global::SKF.Enlight.API.Notification.GetUserPreferencesOutput> __Method_GetUserPreferences = new grpc::Method<global::SKF.Enlight.API.Notification.GetUserPreferencesInput, global::SKF.Enlight.API.Notification.GetUserPreferencesOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserPreferences",
        __Marshaller_grpcapi_GetUserPreferencesInput,
        __Marshaller_grpcapi_GetUserPreferencesOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.Notification.GetUserNotificationsInput, global::SKF.Enlight.API.Notification.GetUserNotificationsOutput> __Method_GetUserNotifications = new grpc::Method<global::SKF.Enlight.API.Notification.GetUserNotificationsInput, global::SKF.Enlight.API.Notification.GetUserNotificationsOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserNotifications",
        __Marshaller_grpcapi_GetUserNotificationsInput,
        __Marshaller_grpcapi_GetUserNotificationsOutput);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SKF.Enlight.API.Notification.GrpcapiReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Notification</summary>
    [grpc::BindServiceMethod(typeof(Notification), "BindService")]
    public abstract partial class NotificationBase
    {
      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Common.PrimitiveString> DeepPing(global::SKF.Enlight.API.Common.Void request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Notification.SendNotificationOutput> SendNotification(global::SKF.Enlight.API.Notification.SendNotificationInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Common.Void> SetUserPreferences(global::SKF.Enlight.API.Notification.SetUserPreferencesInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Notification.GetUserPreferencesOutput> GetUserPreferences(global::SKF.Enlight.API.Notification.GetUserPreferencesInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Notification.GetUserNotificationsOutput> GetUserNotifications(global::SKF.Enlight.API.Notification.GetUserNotificationsInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Notification</summary>
    public partial class NotificationClient : grpc::ClientBase<NotificationClient>
    {
      /// <summary>Creates a new client for Notification</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NotificationClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Notification that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NotificationClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NotificationClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NotificationClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::SKF.Enlight.API.Common.PrimitiveString DeepPing(global::SKF.Enlight.API.Common.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeepPing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Common.PrimitiveString DeepPing(global::SKF.Enlight.API.Common.Void request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeepPing, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.PrimitiveString> DeepPingAsync(global::SKF.Enlight.API.Common.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeepPingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.PrimitiveString> DeepPingAsync(global::SKF.Enlight.API.Common.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeepPing, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Notification.SendNotificationOutput SendNotification(global::SKF.Enlight.API.Notification.SendNotificationInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendNotification(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Notification.SendNotificationOutput SendNotification(global::SKF.Enlight.API.Notification.SendNotificationInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendNotification, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Notification.SendNotificationOutput> SendNotificationAsync(global::SKF.Enlight.API.Notification.SendNotificationInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendNotificationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Notification.SendNotificationOutput> SendNotificationAsync(global::SKF.Enlight.API.Notification.SendNotificationInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendNotification, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Common.Void SetUserPreferences(global::SKF.Enlight.API.Notification.SetUserPreferencesInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetUserPreferences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Common.Void SetUserPreferences(global::SKF.Enlight.API.Notification.SetUserPreferencesInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetUserPreferences, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> SetUserPreferencesAsync(global::SKF.Enlight.API.Notification.SetUserPreferencesInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetUserPreferencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> SetUserPreferencesAsync(global::SKF.Enlight.API.Notification.SetUserPreferencesInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetUserPreferences, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Notification.GetUserPreferencesOutput GetUserPreferences(global::SKF.Enlight.API.Notification.GetUserPreferencesInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserPreferences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Notification.GetUserPreferencesOutput GetUserPreferences(global::SKF.Enlight.API.Notification.GetUserPreferencesInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserPreferences, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Notification.GetUserPreferencesOutput> GetUserPreferencesAsync(global::SKF.Enlight.API.Notification.GetUserPreferencesInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserPreferencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Notification.GetUserPreferencesOutput> GetUserPreferencesAsync(global::SKF.Enlight.API.Notification.GetUserPreferencesInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserPreferences, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Notification.GetUserNotificationsOutput GetUserNotifications(global::SKF.Enlight.API.Notification.GetUserNotificationsInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserNotifications(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Notification.GetUserNotificationsOutput GetUserNotifications(global::SKF.Enlight.API.Notification.GetUserNotificationsInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserNotifications, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Notification.GetUserNotificationsOutput> GetUserNotificationsAsync(global::SKF.Enlight.API.Notification.GetUserNotificationsInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserNotificationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Notification.GetUserNotificationsOutput> GetUserNotificationsAsync(global::SKF.Enlight.API.Notification.GetUserNotificationsInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserNotifications, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NotificationClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NotificationClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NotificationBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DeepPing, serviceImpl.DeepPing)
          .AddMethod(__Method_SendNotification, serviceImpl.SendNotification)
          .AddMethod(__Method_SetUserPreferences, serviceImpl.SetUserPreferences)
          .AddMethod(__Method_GetUserPreferences, serviceImpl.GetUserPreferences)
          .AddMethod(__Method_GetUserNotifications, serviceImpl.GetUserNotifications).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NotificationBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_DeepPing, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Common.Void, global::SKF.Enlight.API.Common.PrimitiveString>(serviceImpl.DeepPing));
      serviceBinder.AddMethod(__Method_SendNotification, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Notification.SendNotificationInput, global::SKF.Enlight.API.Notification.SendNotificationOutput>(serviceImpl.SendNotification));
      serviceBinder.AddMethod(__Method_SetUserPreferences, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Notification.SetUserPreferencesInput, global::SKF.Enlight.API.Common.Void>(serviceImpl.SetUserPreferences));
      serviceBinder.AddMethod(__Method_GetUserPreferences, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Notification.GetUserPreferencesInput, global::SKF.Enlight.API.Notification.GetUserPreferencesOutput>(serviceImpl.GetUserPreferences));
      serviceBinder.AddMethod(__Method_GetUserNotifications, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Notification.GetUserNotificationsInput, global::SKF.Enlight.API.Notification.GetUserNotificationsOutput>(serviceImpl.GetUserNotifications));
    }

  }
}
#endregion
