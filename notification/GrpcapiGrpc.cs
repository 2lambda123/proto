// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: notification/grpcapi.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SKF.Enlight.API.Notification {
  public static partial class Notification
  {
    static readonly string __ServiceName = "grpcapi.Notification";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::SKF.Enlight.API.Common.Void> __Marshaller_common_Void = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Common.Void.Parser));
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Common.PrimitiveString> __Marshaller_common_PrimitiveString = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Common.PrimitiveString.Parser));
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.SetNotificationTypeInput> __Marshaller_grpcapi_SetNotificationTypeInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Notification.SetNotificationTypeInput.Parser));
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.GetNotificationTypeInput> __Marshaller_grpcapi_GetNotificationTypeInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Notification.GetNotificationTypeInput.Parser));
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.GetNotificationTypeOutput> __Marshaller_grpcapi_GetNotificationTypeOutput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Notification.GetNotificationTypeOutput.Parser));
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.RemoveNotificationTypeInput> __Marshaller_grpcapi_RemoveNotificationTypeInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Notification.RemoveNotificationTypeInput.Parser));
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.InitiateNotificationInput> __Marshaller_grpcapi_InitiateNotificationInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Notification.InitiateNotificationInput.Parser));
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.InitiateNotificationOutput> __Marshaller_grpcapi_InitiateNotificationOutput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Notification.InitiateNotificationOutput.Parser));
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.GetInitiatedNotificationInput> __Marshaller_grpcapi_GetInitiatedNotificationInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Notification.GetInitiatedNotificationInput.Parser));
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.GetInitiatedNotificationOutput> __Marshaller_grpcapi_GetInitiatedNotificationOutput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Notification.GetInitiatedNotificationOutput.Parser));
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.RemoveInitiatedNotificationInput> __Marshaller_grpcapi_RemoveInitiatedNotificationInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Notification.RemoveInitiatedNotificationInput.Parser));
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.SetUserPreferencesInput> __Marshaller_grpcapi_SetUserPreferencesInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Notification.SetUserPreferencesInput.Parser));
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.GetUserPreferencesInput> __Marshaller_grpcapi_GetUserPreferencesInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Notification.GetUserPreferencesInput.Parser));
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.GetUserPreferencesOutput> __Marshaller_grpcapi_GetUserPreferencesOutput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Notification.GetUserPreferencesOutput.Parser));
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.RemoveUserPreferencesInput> __Marshaller_grpcapi_RemoveUserPreferencesInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Notification.RemoveUserPreferencesInput.Parser));
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.GetUserNotificationsInput> __Marshaller_grpcapi_GetUserNotificationsInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Notification.GetUserNotificationsInput.Parser));
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.GetUserNotificationsOutput> __Marshaller_grpcapi_GetUserNotificationsOutput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Notification.GetUserNotificationsOutput.Parser));
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.RemoveUserNotificationsInput> __Marshaller_grpcapi_RemoveUserNotificationsInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Notification.RemoveUserNotificationsInput.Parser));
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Notification.UpdateUserNotificationStatusInput> __Marshaller_grpcapi_UpdateUserNotificationStatusInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SKF.Enlight.API.Notification.UpdateUserNotificationStatusInput.Parser));

    static readonly grpc::Method<global::SKF.Enlight.API.Common.Void, global::SKF.Enlight.API.Common.PrimitiveString> __Method_DeepPing = new grpc::Method<global::SKF.Enlight.API.Common.Void, global::SKF.Enlight.API.Common.PrimitiveString>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeepPing",
        __Marshaller_common_Void,
        __Marshaller_common_PrimitiveString);

    static readonly grpc::Method<global::SKF.Enlight.API.Notification.SetNotificationTypeInput, global::SKF.Enlight.API.Common.Void> __Method_SetNotificationType = new grpc::Method<global::SKF.Enlight.API.Notification.SetNotificationTypeInput, global::SKF.Enlight.API.Common.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetNotificationType",
        __Marshaller_grpcapi_SetNotificationTypeInput,
        __Marshaller_common_Void);

    static readonly grpc::Method<global::SKF.Enlight.API.Notification.GetNotificationTypeInput, global::SKF.Enlight.API.Notification.GetNotificationTypeOutput> __Method_GetNotificationType = new grpc::Method<global::SKF.Enlight.API.Notification.GetNotificationTypeInput, global::SKF.Enlight.API.Notification.GetNotificationTypeOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNotificationType",
        __Marshaller_grpcapi_GetNotificationTypeInput,
        __Marshaller_grpcapi_GetNotificationTypeOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.Notification.RemoveNotificationTypeInput, global::SKF.Enlight.API.Common.Void> __Method_RemoveNotificationType = new grpc::Method<global::SKF.Enlight.API.Notification.RemoveNotificationTypeInput, global::SKF.Enlight.API.Common.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveNotificationType",
        __Marshaller_grpcapi_RemoveNotificationTypeInput,
        __Marshaller_common_Void);

    static readonly grpc::Method<global::SKF.Enlight.API.Notification.InitiateNotificationInput, global::SKF.Enlight.API.Notification.InitiateNotificationOutput> __Method_InitiateNotification = new grpc::Method<global::SKF.Enlight.API.Notification.InitiateNotificationInput, global::SKF.Enlight.API.Notification.InitiateNotificationOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InitiateNotification",
        __Marshaller_grpcapi_InitiateNotificationInput,
        __Marshaller_grpcapi_InitiateNotificationOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.Notification.GetInitiatedNotificationInput, global::SKF.Enlight.API.Notification.GetInitiatedNotificationOutput> __Method_GetInitiatedNotification = new grpc::Method<global::SKF.Enlight.API.Notification.GetInitiatedNotificationInput, global::SKF.Enlight.API.Notification.GetInitiatedNotificationOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInitiatedNotification",
        __Marshaller_grpcapi_GetInitiatedNotificationInput,
        __Marshaller_grpcapi_GetInitiatedNotificationOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.Notification.RemoveInitiatedNotificationInput, global::SKF.Enlight.API.Common.Void> __Method_RemoveInitiatedNotification = new grpc::Method<global::SKF.Enlight.API.Notification.RemoveInitiatedNotificationInput, global::SKF.Enlight.API.Common.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveInitiatedNotification",
        __Marshaller_grpcapi_RemoveInitiatedNotificationInput,
        __Marshaller_common_Void);

    static readonly grpc::Method<global::SKF.Enlight.API.Notification.SetUserPreferencesInput, global::SKF.Enlight.API.Common.Void> __Method_SetUserPreferences = new grpc::Method<global::SKF.Enlight.API.Notification.SetUserPreferencesInput, global::SKF.Enlight.API.Common.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetUserPreferences",
        __Marshaller_grpcapi_SetUserPreferencesInput,
        __Marshaller_common_Void);

    static readonly grpc::Method<global::SKF.Enlight.API.Notification.GetUserPreferencesInput, global::SKF.Enlight.API.Notification.GetUserPreferencesOutput> __Method_GetUserPreferences = new grpc::Method<global::SKF.Enlight.API.Notification.GetUserPreferencesInput, global::SKF.Enlight.API.Notification.GetUserPreferencesOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserPreferences",
        __Marshaller_grpcapi_GetUserPreferencesInput,
        __Marshaller_grpcapi_GetUserPreferencesOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.Notification.RemoveUserPreferencesInput, global::SKF.Enlight.API.Common.Void> __Method_RemoveUserPreferences = new grpc::Method<global::SKF.Enlight.API.Notification.RemoveUserPreferencesInput, global::SKF.Enlight.API.Common.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveUserPreferences",
        __Marshaller_grpcapi_RemoveUserPreferencesInput,
        __Marshaller_common_Void);

    static readonly grpc::Method<global::SKF.Enlight.API.Notification.GetUserNotificationsInput, global::SKF.Enlight.API.Notification.GetUserNotificationsOutput> __Method_GetUserNotifications = new grpc::Method<global::SKF.Enlight.API.Notification.GetUserNotificationsInput, global::SKF.Enlight.API.Notification.GetUserNotificationsOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserNotifications",
        __Marshaller_grpcapi_GetUserNotificationsInput,
        __Marshaller_grpcapi_GetUserNotificationsOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.Notification.RemoveUserNotificationsInput, global::SKF.Enlight.API.Common.Void> __Method_RemoveUserNotifications = new grpc::Method<global::SKF.Enlight.API.Notification.RemoveUserNotificationsInput, global::SKF.Enlight.API.Common.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveUserNotifications",
        __Marshaller_grpcapi_RemoveUserNotificationsInput,
        __Marshaller_common_Void);

    static readonly grpc::Method<global::SKF.Enlight.API.Notification.UpdateUserNotificationStatusInput, global::SKF.Enlight.API.Common.Void> __Method_UpdateUserNotificationStatus = new grpc::Method<global::SKF.Enlight.API.Notification.UpdateUserNotificationStatusInput, global::SKF.Enlight.API.Common.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateUserNotificationStatus",
        __Marshaller_grpcapi_UpdateUserNotificationStatusInput,
        __Marshaller_common_Void);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SKF.Enlight.API.Notification.GrpcapiReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Notification</summary>
    [grpc::BindServiceMethod(typeof(Notification), "BindService")]
    public abstract partial class NotificationBase
    {
      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Common.PrimitiveString> DeepPing(global::SKF.Enlight.API.Common.Void request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Common.Void> SetNotificationType(global::SKF.Enlight.API.Notification.SetNotificationTypeInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Notification.GetNotificationTypeOutput> GetNotificationType(global::SKF.Enlight.API.Notification.GetNotificationTypeInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Common.Void> RemoveNotificationType(global::SKF.Enlight.API.Notification.RemoveNotificationTypeInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Notification.InitiateNotificationOutput> InitiateNotification(global::SKF.Enlight.API.Notification.InitiateNotificationInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Notification.GetInitiatedNotificationOutput> GetInitiatedNotification(global::SKF.Enlight.API.Notification.GetInitiatedNotificationInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Common.Void> RemoveInitiatedNotification(global::SKF.Enlight.API.Notification.RemoveInitiatedNotificationInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Common.Void> SetUserPreferences(global::SKF.Enlight.API.Notification.SetUserPreferencesInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Notification.GetUserPreferencesOutput> GetUserPreferences(global::SKF.Enlight.API.Notification.GetUserPreferencesInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Common.Void> RemoveUserPreferences(global::SKF.Enlight.API.Notification.RemoveUserPreferencesInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Notification.GetUserNotificationsOutput> GetUserNotifications(global::SKF.Enlight.API.Notification.GetUserNotificationsInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Common.Void> RemoveUserNotifications(global::SKF.Enlight.API.Notification.RemoveUserNotificationsInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Common.Void> UpdateUserNotificationStatus(global::SKF.Enlight.API.Notification.UpdateUserNotificationStatusInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Notification</summary>
    public partial class NotificationClient : grpc::ClientBase<NotificationClient>
    {
      /// <summary>Creates a new client for Notification</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NotificationClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Notification that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NotificationClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NotificationClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NotificationClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::SKF.Enlight.API.Common.PrimitiveString DeepPing(global::SKF.Enlight.API.Common.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeepPing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Common.PrimitiveString DeepPing(global::SKF.Enlight.API.Common.Void request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeepPing, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.PrimitiveString> DeepPingAsync(global::SKF.Enlight.API.Common.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeepPingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.PrimitiveString> DeepPingAsync(global::SKF.Enlight.API.Common.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeepPing, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Common.Void SetNotificationType(global::SKF.Enlight.API.Notification.SetNotificationTypeInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetNotificationType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Common.Void SetNotificationType(global::SKF.Enlight.API.Notification.SetNotificationTypeInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetNotificationType, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> SetNotificationTypeAsync(global::SKF.Enlight.API.Notification.SetNotificationTypeInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetNotificationTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> SetNotificationTypeAsync(global::SKF.Enlight.API.Notification.SetNotificationTypeInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetNotificationType, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Notification.GetNotificationTypeOutput GetNotificationType(global::SKF.Enlight.API.Notification.GetNotificationTypeInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNotificationType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Notification.GetNotificationTypeOutput GetNotificationType(global::SKF.Enlight.API.Notification.GetNotificationTypeInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNotificationType, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Notification.GetNotificationTypeOutput> GetNotificationTypeAsync(global::SKF.Enlight.API.Notification.GetNotificationTypeInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNotificationTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Notification.GetNotificationTypeOutput> GetNotificationTypeAsync(global::SKF.Enlight.API.Notification.GetNotificationTypeInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNotificationType, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Common.Void RemoveNotificationType(global::SKF.Enlight.API.Notification.RemoveNotificationTypeInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveNotificationType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Common.Void RemoveNotificationType(global::SKF.Enlight.API.Notification.RemoveNotificationTypeInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveNotificationType, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> RemoveNotificationTypeAsync(global::SKF.Enlight.API.Notification.RemoveNotificationTypeInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveNotificationTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> RemoveNotificationTypeAsync(global::SKF.Enlight.API.Notification.RemoveNotificationTypeInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveNotificationType, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Notification.InitiateNotificationOutput InitiateNotification(global::SKF.Enlight.API.Notification.InitiateNotificationInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitiateNotification(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Notification.InitiateNotificationOutput InitiateNotification(global::SKF.Enlight.API.Notification.InitiateNotificationInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InitiateNotification, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Notification.InitiateNotificationOutput> InitiateNotificationAsync(global::SKF.Enlight.API.Notification.InitiateNotificationInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitiateNotificationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Notification.InitiateNotificationOutput> InitiateNotificationAsync(global::SKF.Enlight.API.Notification.InitiateNotificationInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InitiateNotification, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Notification.GetInitiatedNotificationOutput GetInitiatedNotification(global::SKF.Enlight.API.Notification.GetInitiatedNotificationInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInitiatedNotification(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Notification.GetInitiatedNotificationOutput GetInitiatedNotification(global::SKF.Enlight.API.Notification.GetInitiatedNotificationInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInitiatedNotification, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Notification.GetInitiatedNotificationOutput> GetInitiatedNotificationAsync(global::SKF.Enlight.API.Notification.GetInitiatedNotificationInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInitiatedNotificationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Notification.GetInitiatedNotificationOutput> GetInitiatedNotificationAsync(global::SKF.Enlight.API.Notification.GetInitiatedNotificationInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInitiatedNotification, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Common.Void RemoveInitiatedNotification(global::SKF.Enlight.API.Notification.RemoveInitiatedNotificationInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveInitiatedNotification(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Common.Void RemoveInitiatedNotification(global::SKF.Enlight.API.Notification.RemoveInitiatedNotificationInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveInitiatedNotification, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> RemoveInitiatedNotificationAsync(global::SKF.Enlight.API.Notification.RemoveInitiatedNotificationInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveInitiatedNotificationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> RemoveInitiatedNotificationAsync(global::SKF.Enlight.API.Notification.RemoveInitiatedNotificationInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveInitiatedNotification, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Common.Void SetUserPreferences(global::SKF.Enlight.API.Notification.SetUserPreferencesInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetUserPreferences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Common.Void SetUserPreferences(global::SKF.Enlight.API.Notification.SetUserPreferencesInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetUserPreferences, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> SetUserPreferencesAsync(global::SKF.Enlight.API.Notification.SetUserPreferencesInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetUserPreferencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> SetUserPreferencesAsync(global::SKF.Enlight.API.Notification.SetUserPreferencesInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetUserPreferences, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Notification.GetUserPreferencesOutput GetUserPreferences(global::SKF.Enlight.API.Notification.GetUserPreferencesInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserPreferences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Notification.GetUserPreferencesOutput GetUserPreferences(global::SKF.Enlight.API.Notification.GetUserPreferencesInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserPreferences, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Notification.GetUserPreferencesOutput> GetUserPreferencesAsync(global::SKF.Enlight.API.Notification.GetUserPreferencesInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserPreferencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Notification.GetUserPreferencesOutput> GetUserPreferencesAsync(global::SKF.Enlight.API.Notification.GetUserPreferencesInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserPreferences, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Common.Void RemoveUserPreferences(global::SKF.Enlight.API.Notification.RemoveUserPreferencesInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveUserPreferences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Common.Void RemoveUserPreferences(global::SKF.Enlight.API.Notification.RemoveUserPreferencesInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveUserPreferences, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> RemoveUserPreferencesAsync(global::SKF.Enlight.API.Notification.RemoveUserPreferencesInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveUserPreferencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> RemoveUserPreferencesAsync(global::SKF.Enlight.API.Notification.RemoveUserPreferencesInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveUserPreferences, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Notification.GetUserNotificationsOutput GetUserNotifications(global::SKF.Enlight.API.Notification.GetUserNotificationsInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserNotifications(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Notification.GetUserNotificationsOutput GetUserNotifications(global::SKF.Enlight.API.Notification.GetUserNotificationsInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserNotifications, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Notification.GetUserNotificationsOutput> GetUserNotificationsAsync(global::SKF.Enlight.API.Notification.GetUserNotificationsInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserNotificationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Notification.GetUserNotificationsOutput> GetUserNotificationsAsync(global::SKF.Enlight.API.Notification.GetUserNotificationsInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserNotifications, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Common.Void RemoveUserNotifications(global::SKF.Enlight.API.Notification.RemoveUserNotificationsInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveUserNotifications(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Common.Void RemoveUserNotifications(global::SKF.Enlight.API.Notification.RemoveUserNotificationsInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveUserNotifications, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> RemoveUserNotificationsAsync(global::SKF.Enlight.API.Notification.RemoveUserNotificationsInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveUserNotificationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> RemoveUserNotificationsAsync(global::SKF.Enlight.API.Notification.RemoveUserNotificationsInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveUserNotifications, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Common.Void UpdateUserNotificationStatus(global::SKF.Enlight.API.Notification.UpdateUserNotificationStatusInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUserNotificationStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Common.Void UpdateUserNotificationStatus(global::SKF.Enlight.API.Notification.UpdateUserNotificationStatusInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateUserNotificationStatus, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> UpdateUserNotificationStatusAsync(global::SKF.Enlight.API.Notification.UpdateUserNotificationStatusInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUserNotificationStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> UpdateUserNotificationStatusAsync(global::SKF.Enlight.API.Notification.UpdateUserNotificationStatusInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateUserNotificationStatus, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NotificationClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NotificationClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NotificationBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DeepPing, serviceImpl.DeepPing)
          .AddMethod(__Method_SetNotificationType, serviceImpl.SetNotificationType)
          .AddMethod(__Method_GetNotificationType, serviceImpl.GetNotificationType)
          .AddMethod(__Method_RemoveNotificationType, serviceImpl.RemoveNotificationType)
          .AddMethod(__Method_InitiateNotification, serviceImpl.InitiateNotification)
          .AddMethod(__Method_GetInitiatedNotification, serviceImpl.GetInitiatedNotification)
          .AddMethod(__Method_RemoveInitiatedNotification, serviceImpl.RemoveInitiatedNotification)
          .AddMethod(__Method_SetUserPreferences, serviceImpl.SetUserPreferences)
          .AddMethod(__Method_GetUserPreferences, serviceImpl.GetUserPreferences)
          .AddMethod(__Method_RemoveUserPreferences, serviceImpl.RemoveUserPreferences)
          .AddMethod(__Method_GetUserNotifications, serviceImpl.GetUserNotifications)
          .AddMethod(__Method_RemoveUserNotifications, serviceImpl.RemoveUserNotifications)
          .AddMethod(__Method_UpdateUserNotificationStatus, serviceImpl.UpdateUserNotificationStatus).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NotificationBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_DeepPing, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Common.Void, global::SKF.Enlight.API.Common.PrimitiveString>(serviceImpl.DeepPing));
      serviceBinder.AddMethod(__Method_SetNotificationType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Notification.SetNotificationTypeInput, global::SKF.Enlight.API.Common.Void>(serviceImpl.SetNotificationType));
      serviceBinder.AddMethod(__Method_GetNotificationType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Notification.GetNotificationTypeInput, global::SKF.Enlight.API.Notification.GetNotificationTypeOutput>(serviceImpl.GetNotificationType));
      serviceBinder.AddMethod(__Method_RemoveNotificationType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Notification.RemoveNotificationTypeInput, global::SKF.Enlight.API.Common.Void>(serviceImpl.RemoveNotificationType));
      serviceBinder.AddMethod(__Method_InitiateNotification, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Notification.InitiateNotificationInput, global::SKF.Enlight.API.Notification.InitiateNotificationOutput>(serviceImpl.InitiateNotification));
      serviceBinder.AddMethod(__Method_GetInitiatedNotification, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Notification.GetInitiatedNotificationInput, global::SKF.Enlight.API.Notification.GetInitiatedNotificationOutput>(serviceImpl.GetInitiatedNotification));
      serviceBinder.AddMethod(__Method_RemoveInitiatedNotification, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Notification.RemoveInitiatedNotificationInput, global::SKF.Enlight.API.Common.Void>(serviceImpl.RemoveInitiatedNotification));
      serviceBinder.AddMethod(__Method_SetUserPreferences, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Notification.SetUserPreferencesInput, global::SKF.Enlight.API.Common.Void>(serviceImpl.SetUserPreferences));
      serviceBinder.AddMethod(__Method_GetUserPreferences, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Notification.GetUserPreferencesInput, global::SKF.Enlight.API.Notification.GetUserPreferencesOutput>(serviceImpl.GetUserPreferences));
      serviceBinder.AddMethod(__Method_RemoveUserPreferences, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Notification.RemoveUserPreferencesInput, global::SKF.Enlight.API.Common.Void>(serviceImpl.RemoveUserPreferences));
      serviceBinder.AddMethod(__Method_GetUserNotifications, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Notification.GetUserNotificationsInput, global::SKF.Enlight.API.Notification.GetUserNotificationsOutput>(serviceImpl.GetUserNotifications));
      serviceBinder.AddMethod(__Method_RemoveUserNotifications, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Notification.RemoveUserNotificationsInput, global::SKF.Enlight.API.Common.Void>(serviceImpl.RemoveUserNotifications));
      serviceBinder.AddMethod(__Method_UpdateUserNotificationStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Notification.UpdateUserNotificationStatusInput, global::SKF.Enlight.API.Common.Void>(serviceImpl.UpdateUserNotificationStatus));
    }

  }
}
#endregion
