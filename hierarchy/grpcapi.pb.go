// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: hierarchy/grpcapi.proto

package hierarchy

import (
	context "context"
	common "github.com/SKF/proto/v2/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValueType int32

const (
	ValueType_NUMERIC       ValueType = 0
	ValueType_SINGLE_CHOICE ValueType = 1
	ValueType_MULTI_CHOICE  ValueType = 2
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "NUMERIC",
		1: "SINGLE_CHOICE",
		2: "MULTI_CHOICE",
	}
	ValueType_value = map[string]int32{
		"NUMERIC":       0,
		"SINGLE_CHOICE": 1,
		"MULTI_CHOICE":  2,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_hierarchy_grpcapi_proto_enumTypes[0].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_hierarchy_grpcapi_proto_enumTypes[0]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{0}
}

type VisualizationType int32

const (
	VisualizationType_VISUALIZATION_NONE           VisualizationType = 0
	VisualizationType_VISUALIZATION_CIRCULAR_GAUGE VisualizationType = 1
	VisualizationType_VISUALIZATION_LEVEL_GAUGE    VisualizationType = 2
)

// Enum value maps for VisualizationType.
var (
	VisualizationType_name = map[int32]string{
		0: "VISUALIZATION_NONE",
		1: "VISUALIZATION_CIRCULAR_GAUGE",
		2: "VISUALIZATION_LEVEL_GAUGE",
	}
	VisualizationType_value = map[string]int32{
		"VISUALIZATION_NONE":           0,
		"VISUALIZATION_CIRCULAR_GAUGE": 1,
		"VISUALIZATION_LEVEL_GAUGE":    2,
	}
)

func (x VisualizationType) Enum() *VisualizationType {
	p := new(VisualizationType)
	*p = x
	return p
}

func (x VisualizationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisualizationType) Descriptor() protoreflect.EnumDescriptor {
	return file_hierarchy_grpcapi_proto_enumTypes[1].Descriptor()
}

func (VisualizationType) Type() protoreflect.EnumType {
	return &file_hierarchy_grpcapi_proto_enumTypes[1]
}

func (x VisualizationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisualizationType.Descriptor instead.
func (VisualizationType) EnumDescriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{1}
}

type LubricantUnit int32

const (
	LubricantUnit_GRAM  LubricantUnit = 0
	LubricantUnit_OUNCE LubricantUnit = 1
	LubricantUnit_CM3   LubricantUnit = 2
)

// Enum value maps for LubricantUnit.
var (
	LubricantUnit_name = map[int32]string{
		0: "GRAM",
		1: "OUNCE",
		2: "CM3",
	}
	LubricantUnit_value = map[string]int32{
		"GRAM":  0,
		"OUNCE": 1,
		"CM3":   2,
	}
)

func (x LubricantUnit) Enum() *LubricantUnit {
	p := new(LubricantUnit)
	*p = x
	return p
}

func (x LubricantUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LubricantUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_hierarchy_grpcapi_proto_enumTypes[2].Descriptor()
}

func (LubricantUnit) Type() protoreflect.EnumType {
	return &file_hierarchy_grpcapi_proto_enumTypes[2]
}

func (x LubricantUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LubricantUnit.Descriptor instead.
func (LubricantUnit) EnumDescriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{2}
}

type CollectionInterval_Unit int32

const (
	CollectionInterval_MONTHS CollectionInterval_Unit = 0 // Month should be default
	CollectionInterval_DAYS   CollectionInterval_Unit = 1
	CollectionInterval_WEEKS  CollectionInterval_Unit = 2
)

// Enum value maps for CollectionInterval_Unit.
var (
	CollectionInterval_Unit_name = map[int32]string{
		0: "MONTHS",
		1: "DAYS",
		2: "WEEKS",
	}
	CollectionInterval_Unit_value = map[string]int32{
		"MONTHS": 0,
		"DAYS":   1,
		"WEEKS":  2,
	}
)

func (x CollectionInterval_Unit) Enum() *CollectionInterval_Unit {
	p := new(CollectionInterval_Unit)
	*p = x
	return p
}

func (x CollectionInterval_Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectionInterval_Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_hierarchy_grpcapi_proto_enumTypes[3].Descriptor()
}

func (CollectionInterval_Unit) Type() protoreflect.EnumType {
	return &file_hierarchy_grpcapi_proto_enumTypes[3]
}

func (x CollectionInterval_Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollectionInterval_Unit.Descriptor instead.
func (CollectionInterval_Unit) EnumDescriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{1, 0}
}

type AssetTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classes []*AssetTypes_Class `protobuf:"bytes,1,rep,name=classes,proto3" json:"classes,omitempty"`
}

func (x *AssetTypes) Reset() {
	*x = AssetTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetTypes) ProtoMessage() {}

func (x *AssetTypes) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetTypes.ProtoReflect.Descriptor instead.
func (*AssetTypes) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{0}
}

func (x *AssetTypes) GetClasses() []*AssetTypes_Class {
	if x != nil {
		return x.Classes
	}
	return nil
}

type CollectionInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit  CollectionInterval_Unit `protobuf:"varint,1,opt,name=unit,proto3,enum=grpcapi.CollectionInterval_Unit" json:"unit,omitempty"`
	Value int32                   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CollectionInterval) Reset() {
	*x = CollectionInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionInterval) ProtoMessage() {}

func (x *CollectionInterval) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionInterval.ProtoReflect.Descriptor instead.
func (*CollectionInterval) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{1}
}

func (x *CollectionInterval) GetUnit() CollectionInterval_Unit {
	if x != nil {
		return x.Unit
	}
	return CollectionInterval_MONTHS
}

func (x *CollectionInterval) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MeasurementPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Angular            string              `protobuf:"bytes,1,opt,name=angular,proto3" json:"angular,omitempty"`
	Bearing            int32               `protobuf:"varint,3,opt,name=bearing,proto3" json:"bearing,omitempty"`
	MeasurementType    string              `protobuf:"bytes,4,opt,name=measurementType,proto3" json:"measurementType,omitempty"`
	Shaft              string              `protobuf:"bytes,5,opt,name=shaft,proto3" json:"shaft,omitempty"`
	ShaftSide          string              `protobuf:"bytes,6,opt,name=shaftSide,proto3" json:"shaftSide,omitempty"`
	FixedSpeedRPM      float64             `protobuf:"fixed64,7,opt,name=fixedSpeedRPM,proto3" json:"fixedSpeedRPM,omitempty"`
	CollectionInterval *CollectionInterval `protobuf:"bytes,8,opt,name=collectionInterval,proto3" json:"collectionInterval,omitempty"`
	LocationId         string              `protobuf:"bytes,9,opt,name=locationId,proto3" json:"locationId,omitempty"`
	DadType            string              `protobuf:"bytes,10,opt,name=dadType,proto3" json:"dadType,omitempty"`
}

func (x *MeasurementPoint) Reset() {
	*x = MeasurementPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasurementPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasurementPoint) ProtoMessage() {}

func (x *MeasurementPoint) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasurementPoint.ProtoReflect.Descriptor instead.
func (*MeasurementPoint) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{2}
}

func (x *MeasurementPoint) GetAngular() string {
	if x != nil {
		return x.Angular
	}
	return ""
}

func (x *MeasurementPoint) GetBearing() int32 {
	if x != nil {
		return x.Bearing
	}
	return 0
}

func (x *MeasurementPoint) GetMeasurementType() string {
	if x != nil {
		return x.MeasurementType
	}
	return ""
}

func (x *MeasurementPoint) GetShaft() string {
	if x != nil {
		return x.Shaft
	}
	return ""
}

func (x *MeasurementPoint) GetShaftSide() string {
	if x != nil {
		return x.ShaftSide
	}
	return ""
}

func (x *MeasurementPoint) GetFixedSpeedRPM() float64 {
	if x != nil {
		return x.FixedSpeedRPM
	}
	return 0
}

func (x *MeasurementPoint) GetCollectionInterval() *CollectionInterval {
	if x != nil {
		return x.CollectionInterval
	}
	return nil
}

func (x *MeasurementPoint) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *MeasurementPoint) GetDadType() string {
	if x != nil {
		return x.DadType
	}
	return ""
}

type InspectionPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueType             ValueType           `protobuf:"varint,4,opt,name=valueType,proto3,enum=grpcapi.ValueType" json:"valueType,omitempty"`
	NumericUnit           string              `protobuf:"bytes,2,opt,name=numericUnit,proto3" json:"numericUnit,omitempty"`
	Answers               []string            `protobuf:"bytes,3,rep,name=answers,proto3" json:"answers,omitempty"`
	VisualizationType     VisualizationType   `protobuf:"varint,5,opt,name=visualizationType,proto3,enum=grpcapi.VisualizationType" json:"visualizationType,omitempty"`
	VisualizationMinValue string              `protobuf:"bytes,6,opt,name=visualizationMinValue,proto3" json:"visualizationMinValue,omitempty"`
	VisualizationMaxValue string              `protobuf:"bytes,7,opt,name=visualizationMaxValue,proto3" json:"visualizationMaxValue,omitempty"`
	CollectionInterval    *CollectionInterval `protobuf:"bytes,8,opt,name=collectionInterval,proto3" json:"collectionInterval,omitempty"`
}

func (x *InspectionPoint) Reset() {
	*x = InspectionPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectionPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectionPoint) ProtoMessage() {}

func (x *InspectionPoint) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectionPoint.ProtoReflect.Descriptor instead.
func (*InspectionPoint) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{3}
}

func (x *InspectionPoint) GetValueType() ValueType {
	if x != nil {
		return x.ValueType
	}
	return ValueType_NUMERIC
}

func (x *InspectionPoint) GetNumericUnit() string {
	if x != nil {
		return x.NumericUnit
	}
	return ""
}

func (x *InspectionPoint) GetAnswers() []string {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *InspectionPoint) GetVisualizationType() VisualizationType {
	if x != nil {
		return x.VisualizationType
	}
	return VisualizationType_VISUALIZATION_NONE
}

func (x *InspectionPoint) GetVisualizationMinValue() string {
	if x != nil {
		return x.VisualizationMinValue
	}
	return ""
}

func (x *InspectionPoint) GetVisualizationMaxValue() string {
	if x != nil {
		return x.VisualizationMaxValue
	}
	return ""
}

func (x *InspectionPoint) GetCollectionInterval() *CollectionInterval {
	if x != nil {
		return x.CollectionInterval
	}
	return nil
}

type LubricationPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lubricant          string              `protobuf:"bytes,1,opt,name=lubricant,proto3" json:"lubricant,omitempty"`
	Volume             int32               `protobuf:"varint,2,opt,name=volume,proto3" json:"volume,omitempty"`
	Unit               LubricantUnit       `protobuf:"varint,3,opt,name=unit,proto3,enum=grpcapi.LubricantUnit" json:"unit,omitempty"`
	Interval           int32               `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"` // days
	CollectionInterval *CollectionInterval `protobuf:"bytes,5,opt,name=collectionInterval,proto3" json:"collectionInterval,omitempty"`
}

func (x *LubricationPoint) Reset() {
	*x = LubricationPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LubricationPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LubricationPoint) ProtoMessage() {}

func (x *LubricationPoint) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LubricationPoint.ProtoReflect.Descriptor instead.
func (*LubricationPoint) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{4}
}

func (x *LubricationPoint) GetLubricant() string {
	if x != nil {
		return x.Lubricant
	}
	return ""
}

func (x *LubricationPoint) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *LubricationPoint) GetUnit() LubricantUnit {
	if x != nil {
		return x.Unit
	}
	return LubricantUnit_GRAM
}

func (x *LubricationPoint) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *LubricationPoint) GetCollectionInterval() *CollectionInterval {
	if x != nil {
		return x.CollectionInterval
	}
	return nil
}

// Deprecated: Do not use.
type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          string       `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Props         string       `protobuf:"bytes,3,opt,name=props,proto3" json:"props,omitempty"`
	SubComponents []*Component `protobuf:"bytes,4,rep,name=subComponents,proto3" json:"subComponents,omitempty"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{5}
}

func (x *Component) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Component) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Component) GetProps() string {
	if x != nil {
		return x.Props
	}
	return ""
}

func (x *Component) GetSubComponents() []*Component {
	if x != nil {
		return x.SubComponents
	}
	return nil
}

type AssetNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Criticality  string `protobuf:"bytes,1,opt,name=criticality,proto3" json:"criticality,omitempty"`
	Type         string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Class        string `protobuf:"bytes,3,opt,name=class,proto3" json:"class,omitempty"`
	Sequence     string `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Manufacturer string `protobuf:"bytes,5,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Model        string `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	SerialNumber string `protobuf:"bytes,7,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	// Deprecated: Do not use.
	Components []*Component `protobuf:"bytes,9,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *AssetNode) Reset() {
	*x = AssetNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetNode) ProtoMessage() {}

func (x *AssetNode) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetNode.ProtoReflect.Descriptor instead.
func (*AssetNode) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{6}
}

func (x *AssetNode) GetCriticality() string {
	if x != nil {
		return x.Criticality
	}
	return ""
}

func (x *AssetNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AssetNode) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *AssetNode) GetSequence() string {
	if x != nil {
		return x.Sequence
	}
	return ""
}

func (x *AssetNode) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *AssetNode) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *AssetNode) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

// Deprecated: Do not use.
func (x *AssetNode) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label            string                  `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Description      string                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Type             string                  `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Criticality      string                  `protobuf:"bytes,5,opt,name=criticality,proto3" json:"criticality,omitempty"`
	SubType          string                  `protobuf:"bytes,6,opt,name=subType,proto3" json:"subType,omitempty"`
	IndustrySegment  *common.PrimitiveString `protobuf:"bytes,16,opt,name=industrySegment,proto3" json:"industrySegment,omitempty"`
	Origin           *common.Origin          `protobuf:"bytes,7,opt,name=origin,proto3" json:"origin,omitempty"`
	AssetNode        *AssetNode              `protobuf:"bytes,8,opt,name=assetNode,proto3" json:"assetNode,omitempty"`
	MeasurementPoint *MeasurementPoint       `protobuf:"bytes,9,opt,name=measurementPoint,proto3" json:"measurementPoint,omitempty"`
	InspectionPoint  *InspectionPoint        `protobuf:"bytes,10,opt,name=inspectionPoint,proto3" json:"inspectionPoint,omitempty"`
	LubricationPoint *LubricationPoint       `protobuf:"bytes,14,opt,name=lubricationPoint,proto3" json:"lubricationPoint,omitempty"`
	Position         *common.PrimitiveInt64  `protobuf:"bytes,12,opt,name=position,proto3" json:"position,omitempty"`
	Tags             *common.PrimitiveString `protobuf:"bytes,13,opt,name=tags,proto3" json:"tags,omitempty"`
	ParentId         string                  `protobuf:"bytes,15,opt,name=parentId,proto3" json:"parentId,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{7}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Node) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Node) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Node) GetCriticality() string {
	if x != nil {
		return x.Criticality
	}
	return ""
}

func (x *Node) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *Node) GetIndustrySegment() *common.PrimitiveString {
	if x != nil {
		return x.IndustrySegment
	}
	return nil
}

func (x *Node) GetOrigin() *common.Origin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *Node) GetAssetNode() *AssetNode {
	if x != nil {
		return x.AssetNode
	}
	return nil
}

func (x *Node) GetMeasurementPoint() *MeasurementPoint {
	if x != nil {
		return x.MeasurementPoint
	}
	return nil
}

func (x *Node) GetInspectionPoint() *InspectionPoint {
	if x != nil {
		return x.InspectionPoint
	}
	return nil
}

func (x *Node) GetLubricationPoint() *LubricationPoint {
	if x != nil {
		return x.LubricationPoint
	}
	return nil
}

func (x *Node) GetPosition() *common.PrimitiveInt64 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Node) GetTags() *common.PrimitiveString {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Node) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

type Nodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *Nodes) Reset() {
	*x = Nodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nodes) ProtoMessage() {}

func (x *Nodes) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nodes.ProtoReflect.Descriptor instead.
func (*Nodes) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{8}
}

func (x *Nodes) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type GetEventsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Since      int64                   `protobuf:"varint,1,opt,name=since,proto3" json:"since,omitempty"`
	Limit      *common.PrimitiveInt32  `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	CustomerId *common.PrimitiveString `protobuf:"bytes,3,opt,name=customerId,proto3" json:"customerId,omitempty"`
}

func (x *GetEventsInput) Reset() {
	*x = GetEventsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsInput) ProtoMessage() {}

func (x *GetEventsInput) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsInput.ProtoReflect.Descriptor instead.
func (*GetEventsInput) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{9}
}

func (x *GetEventsInput) GetSince() int64 {
	if x != nil {
		return x.Since
	}
	return 0
}

func (x *GetEventsInput) GetLimit() *common.PrimitiveInt32 {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *GetEventsInput) GetCustomerId() *common.PrimitiveString {
	if x != nil {
		return x.CustomerId
	}
	return nil
}

type GetEventsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []byte `protobuf:"bytes,1,opt,name=events,proto3" json:"events,omitempty"`
}

func (x *GetEventsOutput) Reset() {
	*x = GetEventsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsOutput) ProtoMessage() {}

func (x *GetEventsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsOutput.ProtoReflect.Descriptor instead.
func (*GetEventsOutput) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{10}
}

func (x *GetEventsOutput) GetEvents() []byte {
	if x != nil {
		return x.Events
	}
	return nil
}

type SaveNodeInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string         `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Node         *Node          `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	ParentId     string         `protobuf:"bytes,2,opt,name=parentId,proto3" json:"parentId,omitempty"`
	ParentOrigin *common.Origin `protobuf:"bytes,4,opt,name=parentOrigin,proto3" json:"parentOrigin,omitempty"`
}

func (x *SaveNodeInput) Reset() {
	*x = SaveNodeInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveNodeInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveNodeInput) ProtoMessage() {}

func (x *SaveNodeInput) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveNodeInput.ProtoReflect.Descriptor instead.
func (*SaveNodeInput) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{11}
}

func (x *SaveNodeInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SaveNodeInput) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *SaveNodeInput) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *SaveNodeInput) GetParentOrigin() *common.Origin {
	if x != nil {
		return x.ParentOrigin
	}
	return nil
}

type CopyNodeInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	SrcNodeId       string `protobuf:"bytes,2,opt,name=srcNodeId,proto3" json:"srcNodeId,omitempty"`
	DstParentNodeId string `protobuf:"bytes,3,opt,name=dstParentNodeId,proto3" json:"dstParentNodeId,omitempty"`
}

func (x *CopyNodeInput) Reset() {
	*x = CopyNodeInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyNodeInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyNodeInput) ProtoMessage() {}

func (x *CopyNodeInput) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyNodeInput.ProtoReflect.Descriptor instead.
func (*CopyNodeInput) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{12}
}

func (x *CopyNodeInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CopyNodeInput) GetSrcNodeId() string {
	if x != nil {
		return x.SrcNodeId
	}
	return ""
}

func (x *CopyNodeInput) GetDstParentNodeId() string {
	if x != nil {
		return x.DstParentNodeId
	}
	return ""
}

type DeleteNodeInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string         `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	NodeId string         `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Origin *common.Origin `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *DeleteNodeInput) Reset() {
	*x = DeleteNodeInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeInput) ProtoMessage() {}

func (x *DeleteNodeInput) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeInput.ProtoReflect.Descriptor instead.
func (*DeleteNodeInput) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteNodeInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeleteNodeInput) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *DeleteNodeInput) GetOrigin() *common.Origin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type GetSubTreeInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootId    string   `protobuf:"bytes,1,opt,name=rootId,proto3" json:"rootId,omitempty"`
	Depth     int32    `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
	NodeTypes []string `protobuf:"bytes,3,rep,name=nodeTypes,proto3" json:"nodeTypes,omitempty"`
}

func (x *GetSubTreeInput) Reset() {
	*x = GetSubTreeInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubTreeInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubTreeInput) ProtoMessage() {}

func (x *GetSubTreeInput) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubTreeInput.ProtoReflect.Descriptor instead.
func (*GetSubTreeInput) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{14}
}

func (x *GetSubTreeInput) GetRootId() string {
	if x != nil {
		return x.RootId
	}
	return ""
}

func (x *GetSubTreeInput) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *GetSubTreeInput) GetNodeTypes() []string {
	if x != nil {
		return x.NodeTypes
	}
	return nil
}

type GetAncestorsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *GetAncestorsInput) Reset() {
	*x = GetAncestorsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAncestorsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAncestorsInput) ProtoMessage() {}

func (x *GetAncestorsInput) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAncestorsInput.ProtoReflect.Descriptor instead.
func (*GetAncestorsInput) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{15}
}

func (x *GetAncestorsInput) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type GetAncestorsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*AncestorNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *GetAncestorsOutput) Reset() {
	*x = GetAncestorsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAncestorsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAncestorsOutput) ProtoMessage() {}

func (x *GetAncestorsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAncestorsOutput.ProtoReflect.Descriptor instead.
func (*GetAncestorsOutput) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{16}
}

func (x *GetAncestorsOutput) GetNodes() []*AncestorNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type AncestorNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Origin      *common.Origin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
	Label       string         `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Description string         `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Type        string         `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	SubType     string         `protobuf:"bytes,6,opt,name=subType,proto3" json:"subType,omitempty"`
	ParentId    string         `protobuf:"bytes,7,opt,name=parentId,proto3" json:"parentId,omitempty"`
}

func (x *AncestorNode) Reset() {
	*x = AncestorNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AncestorNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AncestorNode) ProtoMessage() {}

func (x *AncestorNode) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AncestorNode.ProtoReflect.Descriptor instead.
func (*AncestorNode) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{17}
}

func (x *AncestorNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AncestorNode) GetOrigin() *common.Origin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *AncestorNode) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *AncestorNode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AncestorNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AncestorNode) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *AncestorNode) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

type AssetTypes_Class struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Types []*AssetTypes_Class_Type `protobuf:"bytes,2,rep,name=types,proto3" json:"types,omitempty"`
	Code  string                   `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *AssetTypes_Class) Reset() {
	*x = AssetTypes_Class{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetTypes_Class) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetTypes_Class) ProtoMessage() {}

func (x *AssetTypes_Class) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetTypes_Class.ProtoReflect.Descriptor instead.
func (*AssetTypes_Class) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AssetTypes_Class) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AssetTypes_Class) GetTypes() []*AssetTypes_Class_Type {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *AssetTypes_Class) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type AssetTypes_Class_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OBSOLETESequences []string                          `protobuf:"bytes,2,rep,name=OBSOLETE_sequences,json=OBSOLETESequences,proto3" json:"OBSOLETE_sequences,omitempty"`
	Code              string                            `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Sequences         []*AssetTypes_Class_Type_Sequence `protobuf:"bytes,4,rep,name=sequences,proto3" json:"sequences,omitempty"`
}

func (x *AssetTypes_Class_Type) Reset() {
	*x = AssetTypes_Class_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetTypes_Class_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetTypes_Class_Type) ProtoMessage() {}

func (x *AssetTypes_Class_Type) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetTypes_Class_Type.ProtoReflect.Descriptor instead.
func (*AssetTypes_Class_Type) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *AssetTypes_Class_Type) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AssetTypes_Class_Type) GetOBSOLETESequences() []string {
	if x != nil {
		return x.OBSOLETESequences
	}
	return nil
}

func (x *AssetTypes_Class_Type) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AssetTypes_Class_Type) GetSequences() []*AssetTypes_Class_Type_Sequence {
	if x != nil {
		return x.Sequences
	}
	return nil
}

type AssetTypes_Class_Type_Sequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *AssetTypes_Class_Type_Sequence) Reset() {
	*x = AssetTypes_Class_Type_Sequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hierarchy_grpcapi_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetTypes_Class_Type_Sequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetTypes_Class_Type_Sequence) ProtoMessage() {}

func (x *AssetTypes_Class_Type_Sequence) ProtoReflect() protoreflect.Message {
	mi := &file_hierarchy_grpcapi_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetTypes_Class_Type_Sequence.ProtoReflect.Descriptor instead.
func (*AssetTypes_Class_Type_Sequence) Descriptor() ([]byte, []int) {
	return file_hierarchy_grpcapi_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *AssetTypes_Class_Type_Sequence) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AssetTypes_Class_Type_Sequence) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

var File_hierarchy_grpcapi_proto protoreflect.FileDescriptor

var file_hierarchy_grpcapi_proto_rawDesc = []byte{
	0x0a, 0x17, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x72, 0x70, 0x63, 0x61,
	0x70, 0x69, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x03, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x1a, 0xc0, 0x02, 0x0a, 0x05,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x1a, 0xd8, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x4f, 0x42,
	0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x32, 0x0a, 0x08, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x89,
	0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x27, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x4e,
	0x54, 0x48, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x59, 0x53, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x57, 0x45, 0x45, 0x4b, 0x53, 0x10, 0x02, 0x22, 0xd1, 0x02, 0x0a, 0x10, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x68, 0x61, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68,
	0x61, 0x66, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x66, 0x74, 0x53, 0x69, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x66, 0x74, 0x53, 0x69, 0x64,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52,
	0x50, 0x4d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x52, 0x50, 0x4d, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x88,
	0x03, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x12, 0x48, 0x0a, 0x11, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x76, 0x69,
	0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xdd, 0x01, 0x0a, 0x10, 0x4c, 0x75,
	0x62, 0x72, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x75, 0x62,
	0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x12,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x83, 0x01, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70,
	0x73, 0x12, 0x38, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x75,
	0x62, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x02, 0x18, 0x01, 0x22,
	0x89, 0x02, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x90, 0x05, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0f,
	0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f,
	0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x10,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x42, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x10, 0x6c, 0x75, 0x62, 0x72, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0x2c,
	0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x8d, 0x01, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0d, 0x53, 0x61, 0x76, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x22, 0x6f, 0x0a, 0x0d, 0x43, 0x6f, 0x70, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x64,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x73, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x22, 0x5d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22,
	0x2c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x41, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x63,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0xc8, 0x01, 0x0a, 0x0c, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2a, 0x3d, 0x0a, 0x09, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x55, 0x4d, 0x45,
	0x52, 0x49, 0x43, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f,
	0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x02, 0x2a, 0x6c, 0x0a, 0x11, 0x56, 0x69,
	0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x49, 0x53, 0x55, 0x41,
	0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x4c, 0x41,
	0x52, 0x5f, 0x47, 0x41, 0x55, 0x47, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x49, 0x53,
	0x55, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x47, 0x41, 0x55, 0x47, 0x45, 0x10, 0x02, 0x2a, 0x2d, 0x0a, 0x0d, 0x4c, 0x75, 0x62, 0x72,
	0x69, 0x63, 0x61, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x52, 0x41,
	0x4d, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x43, 0x4d, 0x33, 0x10, 0x02, 0x32, 0xd1, 0x06, 0x0a, 0x09, 0x48, 0x69, 0x65, 0x72,
	0x61, 0x72, 0x63, 0x68, 0x79, 0x12, 0x33, 0x0a, 0x08, 0x44, 0x65, 0x65, 0x70, 0x50, 0x69, 0x6e,
	0x67, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0d,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12,
	0x35, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x1a, 0x0e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x54, 0x72, 0x65, 0x65,
	0x12, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0e, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6e,
	0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0d, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x12, 0x0c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x13, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x42, 0x79, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x08, 0x43, 0x6f,
	0x70, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x70, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x42, 0x3c, 0x5a, 0x1e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x4b, 0x46, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0xaa, 0x02, 0x19,
	0x53, 0x4b, 0x46, 0x2e, 0x45, 0x6e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_hierarchy_grpcapi_proto_rawDescOnce sync.Once
	file_hierarchy_grpcapi_proto_rawDescData = file_hierarchy_grpcapi_proto_rawDesc
)

func file_hierarchy_grpcapi_proto_rawDescGZIP() []byte {
	file_hierarchy_grpcapi_proto_rawDescOnce.Do(func() {
		file_hierarchy_grpcapi_proto_rawDescData = protoimpl.X.CompressGZIP(file_hierarchy_grpcapi_proto_rawDescData)
	})
	return file_hierarchy_grpcapi_proto_rawDescData
}

var file_hierarchy_grpcapi_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_hierarchy_grpcapi_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_hierarchy_grpcapi_proto_goTypes = []interface{}{
	(ValueType)(0),                         // 0: grpcapi.ValueType
	(VisualizationType)(0),                 // 1: grpcapi.VisualizationType
	(LubricantUnit)(0),                     // 2: grpcapi.LubricantUnit
	(CollectionInterval_Unit)(0),           // 3: grpcapi.CollectionInterval.Unit
	(*AssetTypes)(nil),                     // 4: grpcapi.AssetTypes
	(*CollectionInterval)(nil),             // 5: grpcapi.CollectionInterval
	(*MeasurementPoint)(nil),               // 6: grpcapi.MeasurementPoint
	(*InspectionPoint)(nil),                // 7: grpcapi.InspectionPoint
	(*LubricationPoint)(nil),               // 8: grpcapi.LubricationPoint
	(*Component)(nil),                      // 9: grpcapi.Component
	(*AssetNode)(nil),                      // 10: grpcapi.AssetNode
	(*Node)(nil),                           // 11: grpcapi.Node
	(*Nodes)(nil),                          // 12: grpcapi.Nodes
	(*GetEventsInput)(nil),                 // 13: grpcapi.GetEventsInput
	(*GetEventsOutput)(nil),                // 14: grpcapi.GetEventsOutput
	(*SaveNodeInput)(nil),                  // 15: grpcapi.SaveNodeInput
	(*CopyNodeInput)(nil),                  // 16: grpcapi.CopyNodeInput
	(*DeleteNodeInput)(nil),                // 17: grpcapi.DeleteNodeInput
	(*GetSubTreeInput)(nil),                // 18: grpcapi.GetSubTreeInput
	(*GetAncestorsInput)(nil),              // 19: grpcapi.GetAncestorsInput
	(*GetAncestorsOutput)(nil),             // 20: grpcapi.GetAncestorsOutput
	(*AncestorNode)(nil),                   // 21: grpcapi.AncestorNode
	(*AssetTypes_Class)(nil),               // 22: grpcapi.AssetTypes.Class
	(*AssetTypes_Class_Type)(nil),          // 23: grpcapi.AssetTypes.Class.Type
	(*AssetTypes_Class_Type_Sequence)(nil), // 24: grpcapi.AssetTypes.Class.Type.Sequence
	(*common.PrimitiveString)(nil),         // 25: common.PrimitiveString
	(*common.Origin)(nil),                  // 26: common.Origin
	(*common.PrimitiveInt64)(nil),          // 27: common.PrimitiveInt64
	(*common.PrimitiveInt32)(nil),          // 28: common.PrimitiveInt32
	(*common.Void)(nil),                    // 29: common.Void
}
var file_hierarchy_grpcapi_proto_depIdxs = []int32{
	22, // 0: grpcapi.AssetTypes.classes:type_name -> grpcapi.AssetTypes.Class
	3,  // 1: grpcapi.CollectionInterval.unit:type_name -> grpcapi.CollectionInterval.Unit
	5,  // 2: grpcapi.MeasurementPoint.collectionInterval:type_name -> grpcapi.CollectionInterval
	0,  // 3: grpcapi.InspectionPoint.valueType:type_name -> grpcapi.ValueType
	1,  // 4: grpcapi.InspectionPoint.visualizationType:type_name -> grpcapi.VisualizationType
	5,  // 5: grpcapi.InspectionPoint.collectionInterval:type_name -> grpcapi.CollectionInterval
	2,  // 6: grpcapi.LubricationPoint.unit:type_name -> grpcapi.LubricantUnit
	5,  // 7: grpcapi.LubricationPoint.collectionInterval:type_name -> grpcapi.CollectionInterval
	9,  // 8: grpcapi.Component.subComponents:type_name -> grpcapi.Component
	9,  // 9: grpcapi.AssetNode.components:type_name -> grpcapi.Component
	25, // 10: grpcapi.Node.industrySegment:type_name -> common.PrimitiveString
	26, // 11: grpcapi.Node.origin:type_name -> common.Origin
	10, // 12: grpcapi.Node.assetNode:type_name -> grpcapi.AssetNode
	6,  // 13: grpcapi.Node.measurementPoint:type_name -> grpcapi.MeasurementPoint
	7,  // 14: grpcapi.Node.inspectionPoint:type_name -> grpcapi.InspectionPoint
	8,  // 15: grpcapi.Node.lubricationPoint:type_name -> grpcapi.LubricationPoint
	27, // 16: grpcapi.Node.position:type_name -> common.PrimitiveInt64
	25, // 17: grpcapi.Node.tags:type_name -> common.PrimitiveString
	11, // 18: grpcapi.Nodes.nodes:type_name -> grpcapi.Node
	28, // 19: grpcapi.GetEventsInput.limit:type_name -> common.PrimitiveInt32
	25, // 20: grpcapi.GetEventsInput.customerId:type_name -> common.PrimitiveString
	11, // 21: grpcapi.SaveNodeInput.node:type_name -> grpcapi.Node
	26, // 22: grpcapi.SaveNodeInput.parentOrigin:type_name -> common.Origin
	26, // 23: grpcapi.DeleteNodeInput.origin:type_name -> common.Origin
	21, // 24: grpcapi.GetAncestorsOutput.nodes:type_name -> grpcapi.AncestorNode
	26, // 25: grpcapi.AncestorNode.origin:type_name -> common.Origin
	23, // 26: grpcapi.AssetTypes.Class.types:type_name -> grpcapi.AssetTypes.Class.Type
	24, // 27: grpcapi.AssetTypes.Class.Type.sequences:type_name -> grpcapi.AssetTypes.Class.Type.Sequence
	29, // 28: grpcapi.Hierarchy.DeepPing:input_type -> common.Void
	25, // 29: grpcapi.Hierarchy.GetNode:input_type -> common.PrimitiveString
	25, // 30: grpcapi.Hierarchy.GetNodes:input_type -> common.PrimitiveString
	25, // 31: grpcapi.Hierarchy.GetChildNodes:input_type -> common.PrimitiveString
	18, // 32: grpcapi.Hierarchy.GetSubTree:input_type -> grpcapi.GetSubTreeInput
	25, // 33: grpcapi.Hierarchy.GetParentNode:input_type -> common.PrimitiveString
	19, // 34: grpcapi.Hierarchy.GetAncestors:input_type -> grpcapi.GetAncestorsInput
	25, // 35: grpcapi.Hierarchy.GetCompany:input_type -> common.PrimitiveString
	29, // 36: grpcapi.Hierarchy.GetAssetTaxonomy:input_type -> common.Void
	26, // 37: grpcapi.Hierarchy.GetNodeIdByOrigin:input_type -> common.Origin
	15, // 38: grpcapi.Hierarchy.SaveNode:input_type -> grpcapi.SaveNodeInput
	17, // 39: grpcapi.Hierarchy.DeleteNode:input_type -> grpcapi.DeleteNodeInput
	16, // 40: grpcapi.Hierarchy.CopyNode:input_type -> grpcapi.CopyNodeInput
	13, // 41: grpcapi.Hierarchy.GetEvents:input_type -> grpcapi.GetEventsInput
	25, // 42: grpcapi.Hierarchy.DeepPing:output_type -> common.PrimitiveString
	11, // 43: grpcapi.Hierarchy.GetNode:output_type -> grpcapi.Node
	12, // 44: grpcapi.Hierarchy.GetNodes:output_type -> grpcapi.Nodes
	12, // 45: grpcapi.Hierarchy.GetChildNodes:output_type -> grpcapi.Nodes
	12, // 46: grpcapi.Hierarchy.GetSubTree:output_type -> grpcapi.Nodes
	11, // 47: grpcapi.Hierarchy.GetParentNode:output_type -> grpcapi.Node
	20, // 48: grpcapi.Hierarchy.GetAncestors:output_type -> grpcapi.GetAncestorsOutput
	11, // 49: grpcapi.Hierarchy.GetCompany:output_type -> grpcapi.Node
	4,  // 50: grpcapi.Hierarchy.GetAssetTaxonomy:output_type -> grpcapi.AssetTypes
	25, // 51: grpcapi.Hierarchy.GetNodeIdByOrigin:output_type -> common.PrimitiveString
	25, // 52: grpcapi.Hierarchy.SaveNode:output_type -> common.PrimitiveString
	29, // 53: grpcapi.Hierarchy.DeleteNode:output_type -> common.Void
	25, // 54: grpcapi.Hierarchy.CopyNode:output_type -> common.PrimitiveString
	14, // 55: grpcapi.Hierarchy.GetEvents:output_type -> grpcapi.GetEventsOutput
	42, // [42:56] is the sub-list for method output_type
	28, // [28:42] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_hierarchy_grpcapi_proto_init() }
func file_hierarchy_grpcapi_proto_init() {
	if File_hierarchy_grpcapi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hierarchy_grpcapi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasurementPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectionPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LubricationPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveNodeInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyNodeInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubTreeInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAncestorsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAncestorsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AncestorNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetTypes_Class); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetTypes_Class_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hierarchy_grpcapi_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetTypes_Class_Type_Sequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hierarchy_grpcapi_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hierarchy_grpcapi_proto_goTypes,
		DependencyIndexes: file_hierarchy_grpcapi_proto_depIdxs,
		EnumInfos:         file_hierarchy_grpcapi_proto_enumTypes,
		MessageInfos:      file_hierarchy_grpcapi_proto_msgTypes,
	}.Build()
	File_hierarchy_grpcapi_proto = out.File
	file_hierarchy_grpcapi_proto_rawDesc = nil
	file_hierarchy_grpcapi_proto_goTypes = nil
	file_hierarchy_grpcapi_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HierarchyClient is the client API for Hierarchy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HierarchyClient interface {
	DeepPing(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.PrimitiveString, error)
	GetNode(ctx context.Context, in *common.PrimitiveString, opts ...grpc.CallOption) (*Node, error)
	GetNodes(ctx context.Context, in *common.PrimitiveString, opts ...grpc.CallOption) (*Nodes, error)
	GetChildNodes(ctx context.Context, in *common.PrimitiveString, opts ...grpc.CallOption) (*Nodes, error)
	GetSubTree(ctx context.Context, in *GetSubTreeInput, opts ...grpc.CallOption) (*Nodes, error)
	GetParentNode(ctx context.Context, in *common.PrimitiveString, opts ...grpc.CallOption) (*Node, error)
	GetAncestors(ctx context.Context, in *GetAncestorsInput, opts ...grpc.CallOption) (*GetAncestorsOutput, error)
	GetCompany(ctx context.Context, in *common.PrimitiveString, opts ...grpc.CallOption) (*Node, error)
	GetAssetTaxonomy(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*AssetTypes, error)
	GetNodeIdByOrigin(ctx context.Context, in *common.Origin, opts ...grpc.CallOption) (*common.PrimitiveString, error)
	SaveNode(ctx context.Context, in *SaveNodeInput, opts ...grpc.CallOption) (*common.PrimitiveString, error)
	DeleteNode(ctx context.Context, in *DeleteNodeInput, opts ...grpc.CallOption) (*common.Void, error)
	CopyNode(ctx context.Context, in *CopyNodeInput, opts ...grpc.CallOption) (*common.PrimitiveString, error)
	GetEvents(ctx context.Context, in *GetEventsInput, opts ...grpc.CallOption) (*GetEventsOutput, error)
}

type hierarchyClient struct {
	cc grpc.ClientConnInterface
}

func NewHierarchyClient(cc grpc.ClientConnInterface) HierarchyClient {
	return &hierarchyClient{cc}
}

func (c *hierarchyClient) DeepPing(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.PrimitiveString, error) {
	out := new(common.PrimitiveString)
	err := c.cc.Invoke(ctx, "/grpcapi.Hierarchy/DeepPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) GetNode(ctx context.Context, in *common.PrimitiveString, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/grpcapi.Hierarchy/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) GetNodes(ctx context.Context, in *common.PrimitiveString, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/grpcapi.Hierarchy/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) GetChildNodes(ctx context.Context, in *common.PrimitiveString, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/grpcapi.Hierarchy/GetChildNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) GetSubTree(ctx context.Context, in *GetSubTreeInput, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/grpcapi.Hierarchy/GetSubTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) GetParentNode(ctx context.Context, in *common.PrimitiveString, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/grpcapi.Hierarchy/GetParentNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) GetAncestors(ctx context.Context, in *GetAncestorsInput, opts ...grpc.CallOption) (*GetAncestorsOutput, error) {
	out := new(GetAncestorsOutput)
	err := c.cc.Invoke(ctx, "/grpcapi.Hierarchy/GetAncestors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) GetCompany(ctx context.Context, in *common.PrimitiveString, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/grpcapi.Hierarchy/GetCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) GetAssetTaxonomy(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*AssetTypes, error) {
	out := new(AssetTypes)
	err := c.cc.Invoke(ctx, "/grpcapi.Hierarchy/GetAssetTaxonomy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) GetNodeIdByOrigin(ctx context.Context, in *common.Origin, opts ...grpc.CallOption) (*common.PrimitiveString, error) {
	out := new(common.PrimitiveString)
	err := c.cc.Invoke(ctx, "/grpcapi.Hierarchy/GetNodeIdByOrigin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) SaveNode(ctx context.Context, in *SaveNodeInput, opts ...grpc.CallOption) (*common.PrimitiveString, error) {
	out := new(common.PrimitiveString)
	err := c.cc.Invoke(ctx, "/grpcapi.Hierarchy/SaveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) DeleteNode(ctx context.Context, in *DeleteNodeInput, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := c.cc.Invoke(ctx, "/grpcapi.Hierarchy/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) CopyNode(ctx context.Context, in *CopyNodeInput, opts ...grpc.CallOption) (*common.PrimitiveString, error) {
	out := new(common.PrimitiveString)
	err := c.cc.Invoke(ctx, "/grpcapi.Hierarchy/CopyNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) GetEvents(ctx context.Context, in *GetEventsInput, opts ...grpc.CallOption) (*GetEventsOutput, error) {
	out := new(GetEventsOutput)
	err := c.cc.Invoke(ctx, "/grpcapi.Hierarchy/GetEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HierarchyServer is the server API for Hierarchy service.
type HierarchyServer interface {
	DeepPing(context.Context, *common.Void) (*common.PrimitiveString, error)
	GetNode(context.Context, *common.PrimitiveString) (*Node, error)
	GetNodes(context.Context, *common.PrimitiveString) (*Nodes, error)
	GetChildNodes(context.Context, *common.PrimitiveString) (*Nodes, error)
	GetSubTree(context.Context, *GetSubTreeInput) (*Nodes, error)
	GetParentNode(context.Context, *common.PrimitiveString) (*Node, error)
	GetAncestors(context.Context, *GetAncestorsInput) (*GetAncestorsOutput, error)
	GetCompany(context.Context, *common.PrimitiveString) (*Node, error)
	GetAssetTaxonomy(context.Context, *common.Void) (*AssetTypes, error)
	GetNodeIdByOrigin(context.Context, *common.Origin) (*common.PrimitiveString, error)
	SaveNode(context.Context, *SaveNodeInput) (*common.PrimitiveString, error)
	DeleteNode(context.Context, *DeleteNodeInput) (*common.Void, error)
	CopyNode(context.Context, *CopyNodeInput) (*common.PrimitiveString, error)
	GetEvents(context.Context, *GetEventsInput) (*GetEventsOutput, error)
}

// UnimplementedHierarchyServer can be embedded to have forward compatible implementations.
type UnimplementedHierarchyServer struct {
}

func (*UnimplementedHierarchyServer) DeepPing(context.Context, *common.Void) (*common.PrimitiveString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeepPing not implemented")
}
func (*UnimplementedHierarchyServer) GetNode(context.Context, *common.PrimitiveString) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (*UnimplementedHierarchyServer) GetNodes(context.Context, *common.PrimitiveString) (*Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (*UnimplementedHierarchyServer) GetChildNodes(context.Context, *common.PrimitiveString) (*Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildNodes not implemented")
}
func (*UnimplementedHierarchyServer) GetSubTree(context.Context, *GetSubTreeInput) (*Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubTree not implemented")
}
func (*UnimplementedHierarchyServer) GetParentNode(context.Context, *common.PrimitiveString) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParentNode not implemented")
}
func (*UnimplementedHierarchyServer) GetAncestors(context.Context, *GetAncestorsInput) (*GetAncestorsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAncestors not implemented")
}
func (*UnimplementedHierarchyServer) GetCompany(context.Context, *common.PrimitiveString) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompany not implemented")
}
func (*UnimplementedHierarchyServer) GetAssetTaxonomy(context.Context, *common.Void) (*AssetTypes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetTaxonomy not implemented")
}
func (*UnimplementedHierarchyServer) GetNodeIdByOrigin(context.Context, *common.Origin) (*common.PrimitiveString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeIdByOrigin not implemented")
}
func (*UnimplementedHierarchyServer) SaveNode(context.Context, *SaveNodeInput) (*common.PrimitiveString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveNode not implemented")
}
func (*UnimplementedHierarchyServer) DeleteNode(context.Context, *DeleteNodeInput) (*common.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (*UnimplementedHierarchyServer) CopyNode(context.Context, *CopyNodeInput) (*common.PrimitiveString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyNode not implemented")
}
func (*UnimplementedHierarchyServer) GetEvents(context.Context, *GetEventsInput) (*GetEventsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}

func RegisterHierarchyServer(s *grpc.Server, srv HierarchyServer) {
	s.RegisterService(&_Hierarchy_serviceDesc, srv)
}

func _Hierarchy_DeepPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).DeepPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/DeepPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).DeepPing(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PrimitiveString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).GetNode(ctx, req.(*common.PrimitiveString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PrimitiveString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).GetNodes(ctx, req.(*common.PrimitiveString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_GetChildNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PrimitiveString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).GetChildNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/GetChildNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).GetChildNodes(ctx, req.(*common.PrimitiveString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_GetSubTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubTreeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).GetSubTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/GetSubTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).GetSubTree(ctx, req.(*GetSubTreeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_GetParentNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PrimitiveString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).GetParentNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/GetParentNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).GetParentNode(ctx, req.(*common.PrimitiveString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_GetAncestors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAncestorsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).GetAncestors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/GetAncestors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).GetAncestors(ctx, req.(*GetAncestorsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PrimitiveString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/GetCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).GetCompany(ctx, req.(*common.PrimitiveString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_GetAssetTaxonomy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).GetAssetTaxonomy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/GetAssetTaxonomy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).GetAssetTaxonomy(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_GetNodeIdByOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Origin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).GetNodeIdByOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/GetNodeIdByOrigin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).GetNodeIdByOrigin(ctx, req.(*common.Origin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_SaveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveNodeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).SaveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/SaveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).SaveNode(ctx, req.(*SaveNodeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).DeleteNode(ctx, req.(*DeleteNodeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_CopyNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyNodeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).CopyNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/CopyNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).CopyNode(ctx, req.(*CopyNodeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).GetEvents(ctx, req.(*GetEventsInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hierarchy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapi.Hierarchy",
	HandlerType: (*HierarchyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeepPing",
			Handler:    _Hierarchy_DeepPing_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _Hierarchy_GetNode_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _Hierarchy_GetNodes_Handler,
		},
		{
			MethodName: "GetChildNodes",
			Handler:    _Hierarchy_GetChildNodes_Handler,
		},
		{
			MethodName: "GetSubTree",
			Handler:    _Hierarchy_GetSubTree_Handler,
		},
		{
			MethodName: "GetParentNode",
			Handler:    _Hierarchy_GetParentNode_Handler,
		},
		{
			MethodName: "GetAncestors",
			Handler:    _Hierarchy_GetAncestors_Handler,
		},
		{
			MethodName: "GetCompany",
			Handler:    _Hierarchy_GetCompany_Handler,
		},
		{
			MethodName: "GetAssetTaxonomy",
			Handler:    _Hierarchy_GetAssetTaxonomy_Handler,
		},
		{
			MethodName: "GetNodeIdByOrigin",
			Handler:    _Hierarchy_GetNodeIdByOrigin_Handler,
		},
		{
			MethodName: "SaveNode",
			Handler:    _Hierarchy_SaveNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _Hierarchy_DeleteNode_Handler,
		},
		{
			MethodName: "CopyNode",
			Handler:    _Hierarchy_CopyNode_Handler,
		},
		{
			MethodName: "GetEvents",
			Handler:    _Hierarchy_GetEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hierarchy/grpcapi.proto",
}
