// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: hierarchy/grpcapi.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SKF.Enlight.API.Hierarchy {

  /// <summary>Holder for reflection information generated from hierarchy/grpcapi.proto</summary>
  public static partial class GrpcapiReflection {

    #region Descriptor
    /// <summary>File descriptor for hierarchy/grpcapi.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GrpcapiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdoaWVyYXJjaHkvZ3JwY2FwaS5wcm90bxIHZ3JwY2FwaRoTY29tbW9uL2Nv",
            "bW1vbi5wcm90byKyAgoKQXNzZXRUeXBlcxIqCgdjbGFzc2VzGAEgAygLMhku",
            "Z3JwY2FwaS5Bc3NldFR5cGVzLkNsYXNzGvcBCgVDbGFzcxIMCgRuYW1lGAEg",
            "ASgJEi0KBXR5cGVzGAIgAygLMh4uZ3JwY2FwaS5Bc3NldFR5cGVzLkNsYXNz",
            "LlR5cGUSDAoEY29kZRgDIAEoCRqiAQoEVHlwZRIMCgRuYW1lGAEgASgJEhoK",
            "Ek9CU09MRVRFX3NlcXVlbmNlcxgCIAMoCRIMCgRjb2RlGAMgASgJEjoKCXNl",
            "cXVlbmNlcxgEIAMoCzInLmdycGNhcGkuQXNzZXRUeXBlcy5DbGFzcy5UeXBl",
            "LlNlcXVlbmNlGiYKCFNlcXVlbmNlEgwKBG5hbWUYASABKAkSDAoEY29kZRgC",
            "IAEoCSJ8ChJDb2xsZWN0aW9uSW50ZXJ2YWwSLgoEdW5pdBgBIAEoDjIgLmdy",
            "cGNhcGkuQ29sbGVjdGlvbkludGVydmFsLlVuaXQSDQoFdmFsdWUYAiABKAUi",
            "JwoEVW5pdBIKCgZNT05USFMQABIICgREQVlTEAESCQoFV0VFS1MQAiK/AQoQ",
            "TWVhc3VyZW1lbnRQb2ludBIPCgdhbmd1bGFyGAEgASgJEg8KB2JlYXJpbmcY",
            "AyABKAUSFwoPbWVhc3VyZW1lbnRUeXBlGAQgASgJEg0KBXNoYWZ0GAUgASgJ",
            "EhEKCXNoYWZ0U2lkZRgGIAEoCRIVCg1maXhlZFNwZWVkUlBNGAcgASgBEjcK",
            "EmNvbGxlY3Rpb25JbnRlcnZhbBgIIAEoCzIbLmdycGNhcGkuQ29sbGVjdGlv",
            "bkludGVydmFsIpICCg9JbnNwZWN0aW9uUG9pbnQSJQoJdmFsdWVUeXBlGAQg",
            "ASgOMhIuZ3JwY2FwaS5WYWx1ZVR5cGUSEwoLbnVtZXJpY1VuaXQYAiABKAkS",
            "DwoHYW5zd2VycxgDIAMoCRI1ChF2aXN1YWxpemF0aW9uVHlwZRgFIAEoDjIa",
            "LmdycGNhcGkuVmlzdWFsaXphdGlvblR5cGUSHQoVdmlzdWFsaXphdGlvbk1p",
            "blZhbHVlGAYgASgJEh0KFXZpc3VhbGl6YXRpb25NYXhWYWx1ZRgHIAEoCRI3",
            "ChJjb2xsZWN0aW9uSW50ZXJ2YWwYCCABKAsyGy5ncnBjYXBpLkNvbGxlY3Rp",
            "b25JbnRlcnZhbEoECAEQAiKmAQoQTHVicmljYXRpb25Qb2ludBIRCglsdWJy",
            "aWNhbnQYASABKAkSDgoGdm9sdW1lGAIgASgFEiQKBHVuaXQYAyABKA4yFi5n",
            "cnBjYXBpLkx1YnJpY2FudFVuaXQSEAoIaW50ZXJ2YWwYBCABKAUSNwoSY29s",
            "bGVjdGlvbkludGVydmFsGAUgASgLMhsuZ3JwY2FwaS5Db2xsZWN0aW9uSW50",
            "ZXJ2YWwidgoHQmVhcmluZxIVCg1iZWFyaW5nTnVtYmVyGAEgASgFEhMKC2Rl",
            "c2lnbmF0aW9uGAIgASgJEhQKDG1hbnVmYWN0dXJlchgDIAEoCRITCgtzaWRl",
            "T2ZTaGFmdBgEIAEoCRIUCgxzZXJpYWxOdW1iZXIYBSABKAkiZAoFU2hhZnQS",
            "EwoLc2hhZnROdW1iZXIYASABKAUSDQoFc3BlZWQYAiABKAkSEwoLZGVzY3Jp",
            "cHRpb24YAyABKAkSIgoIYmVhcmluZ3MYBCADKAsyEC5ncnBjYXBpLkJlYXJp",
            "bmciqgEKCUFzc2V0Tm9kZRITCgtjcml0aWNhbGl0eRgBIAEoCRIMCgR0eXBl",
            "GAIgASgJEg0KBWNsYXNzGAMgASgJEhAKCHNlcXVlbmNlGAQgASgJEhQKDG1h",
            "bnVmYWN0dXJlchgFIAEoCRINCgVtb2RlbBgGIAEoCRIUCgxzZXJpYWxOdW1i",
            "ZXIYByABKAkSHgoGc2hhZnRzGAggAygLMg4uZ3JwY2FwaS5TaGFmdCLpAwoE",
            "Tm9kZRIKCgJpZBgBIAEoCRINCgVsYWJlbBgCIAEoCRITCgtkZXNjcmlwdGlv",
            "bhgDIAEoCRIMCgR0eXBlGAQgASgJEhMKC2NyaXRpY2FsaXR5GAUgASgJEg8K",
            "B3N1YlR5cGUYBiABKAkSMAoPaW5kdXN0cnlTZWdtZW50GBAgASgLMhcuY29t",
            "bW9uLlByaW1pdGl2ZVN0cmluZxIeCgZvcmlnaW4YByABKAsyDi5jb21tb24u",
            "T3JpZ2luEiUKCWFzc2V0Tm9kZRgIIAEoCzISLmdycGNhcGkuQXNzZXROb2Rl",
            "EjMKEG1lYXN1cmVtZW50UG9pbnQYCSABKAsyGS5ncnBjYXBpLk1lYXN1cmVt",
            "ZW50UG9pbnQSMQoPaW5zcGVjdGlvblBvaW50GAogASgLMhguZ3JwY2FwaS5J",
            "bnNwZWN0aW9uUG9pbnQSMwoQbHVicmljYXRpb25Qb2ludBgOIAEoCzIZLmdy",
            "cGNhcGkuTHVicmljYXRpb25Qb2ludBIoCghwb3NpdGlvbhgMIAEoCzIWLmNv",
            "bW1vbi5QcmltaXRpdmVJbnQ2NBIlCgR0YWdzGA0gASgLMhcuY29tbW9uLlBy",
            "aW1pdGl2ZVN0cmluZxIQCghwYXJlbnRJZBgPIAEoCUoECAsQDCIlCgVOb2Rl",
            "cxIcCgVub2RlcxgBIAMoCzINLmdycGNhcGkuTm9kZSJzCg5HZXRFdmVudHNJ",
            "bnB1dBINCgVzaW5jZRgBIAEoAxIlCgVsaW1pdBgCIAEoCzIWLmNvbW1vbi5Q",
            "cmltaXRpdmVJbnQzMhIrCgpjdXN0b21lcklkGAMgASgLMhcuY29tbW9uLlBy",
            "aW1pdGl2ZVN0cmluZyIhCg9HZXRFdmVudHNPdXRwdXQSDgoGZXZlbnRzGAEg",
            "ASgMInQKDVNhdmVOb2RlSW5wdXQSDgoGdXNlcklkGAEgASgJEhsKBG5vZGUY",
            "AyABKAsyDS5ncnBjYXBpLk5vZGUSEAoIcGFyZW50SWQYAiABKAkSJAoMcGFy",
            "ZW50T3JpZ2luGAQgASgLMg4uY29tbW9uLk9yaWdpbiJLCg1Db3B5Tm9kZUlu",
            "cHV0Eg4KBnVzZXJJZBgBIAEoCRIRCglzcmNOb2RlSWQYAiABKAkSFwoPZHN0",
            "UGFyZW50Tm9kZUlkGAMgASgJIlEKD0RlbGV0ZU5vZGVJbnB1dBIOCgZ1c2Vy",
            "SWQYASABKAkSDgoGbm9kZUlkGAIgASgJEh4KBm9yaWdpbhgDIAEoCzIOLmNv",
            "bW1vbi5PcmlnaW4iQwoPR2V0U3ViVHJlZUlucHV0Eg4KBnJvb3RJZBgBIAEo",
            "CRINCgVkZXB0aBgCIAEoBRIRCglub2RlVHlwZXMYAyADKAkiJAoRR2V0QW5j",
            "ZXN0b3JzSW5wdXQSDwoHbm9kZV9pZBgBIAEoCSI6ChJHZXRBbmNlc3RvcnNP",
            "dXRwdXQSJAoFbm9kZXMYASADKAsyFS5ncnBjYXBpLkFuY2VzdG9yTm9kZSKP",
            "AQoMQW5jZXN0b3JOb2RlEgoKAmlkGAEgASgJEh4KBm9yaWdpbhgCIAEoCzIO",
            "LmNvbW1vbi5PcmlnaW4SDQoFbGFiZWwYAyABKAkSEwoLZGVzY3JpcHRpb24Y",
            "BCABKAkSDAoEdHlwZRgFIAEoCRIPCgdzdWJUeXBlGAYgASgJEhAKCHBhcmVu",
            "dElkGAcgASgJKj0KCVZhbHVlVHlwZRILCgdOVU1FUklDEAASEQoNU0lOR0xF",
            "X0NIT0lDRRABEhAKDE1VTFRJX0NIT0lDRRACKmwKEVZpc3VhbGl6YXRpb25U",
            "eXBlEhYKElZJU1VBTElaQVRJT05fTk9ORRAAEiAKHFZJU1VBTElaQVRJT05f",
            "Q0lSQ1VMQVJfR0FVR0UQARIdChlWSVNVQUxJWkFUSU9OX0xFVkVMX0dBVUdF",
            "EAIqLQoNTHVicmljYW50VW5pdBIICgRHUkFNEAASCQoFT1VOQ0UQARIHCgND",
            "TTMQAjLRBgoJSGllcmFyY2h5EjMKCERlZXBQaW5nEgwuY29tbW9uLlZvaWQa",
            "Fy5jb21tb24uUHJpbWl0aXZlU3RyaW5nIgASMwoHR2V0Tm9kZRIXLmNvbW1v",
            "bi5QcmltaXRpdmVTdHJpbmcaDS5ncnBjYXBpLk5vZGUiABI1CghHZXROb2Rl",
            "cxIXLmNvbW1vbi5QcmltaXRpdmVTdHJpbmcaDi5ncnBjYXBpLk5vZGVzIgAS",
            "OgoNR2V0Q2hpbGROb2RlcxIXLmNvbW1vbi5QcmltaXRpdmVTdHJpbmcaDi5n",
            "cnBjYXBpLk5vZGVzIgASOAoKR2V0U3ViVHJlZRIYLmdycGNhcGkuR2V0U3Vi",
            "VHJlZUlucHV0Gg4uZ3JwY2FwaS5Ob2RlcyIAEjkKDUdldFBhcmVudE5vZGUS",
            "Fy5jb21tb24uUHJpbWl0aXZlU3RyaW5nGg0uZ3JwY2FwaS5Ob2RlIgASSQoM",
            "R2V0QW5jZXN0b3JzEhouZ3JwY2FwaS5HZXRBbmNlc3RvcnNJbnB1dBobLmdy",
            "cGNhcGkuR2V0QW5jZXN0b3JzT3V0cHV0IgASNgoKR2V0Q29tcGFueRIXLmNv",
            "bW1vbi5QcmltaXRpdmVTdHJpbmcaDS5ncnBjYXBpLk5vZGUiABI3ChBHZXRB",
            "c3NldFRheG9ub215EgwuY29tbW9uLlZvaWQaEy5ncnBjYXBpLkFzc2V0VHlw",
            "ZXMiABI+ChFHZXROb2RlSWRCeU9yaWdpbhIOLmNvbW1vbi5PcmlnaW4aFy5j",
            "b21tb24uUHJpbWl0aXZlU3RyaW5nIgASPQoIU2F2ZU5vZGUSFi5ncnBjYXBp",
            "LlNhdmVOb2RlSW5wdXQaFy5jb21tb24uUHJpbWl0aXZlU3RyaW5nIgASNgoK",
            "RGVsZXRlTm9kZRIYLmdycGNhcGkuRGVsZXRlTm9kZUlucHV0GgwuY29tbW9u",
            "LlZvaWQiABI9CghDb3B5Tm9kZRIWLmdycGNhcGkuQ29weU5vZGVJbnB1dBoX",
            "LmNvbW1vbi5QcmltaXRpdmVTdHJpbmciABJACglHZXRFdmVudHMSFy5ncnBj",
            "YXBpLkdldEV2ZW50c0lucHV0GhguZ3JwY2FwaS5HZXRFdmVudHNPdXRwdXQi",
            "AEIcqgIZU0tGLkVubGlnaHQuQVBJLkhpZXJhcmNoeWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SKF.Enlight.API.Common.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SKF.Enlight.API.Hierarchy.ValueType), typeof(global::SKF.Enlight.API.Hierarchy.VisualizationType), typeof(global::SKF.Enlight.API.Hierarchy.LubricantUnit), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.AssetTypes), global::SKF.Enlight.API.Hierarchy.AssetTypes.Parser, new[]{ "Classes" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class), global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class.Parser, new[]{ "Name", "Types_", "Code" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class.Types.Type), global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class.Types.Type.Parser, new[]{ "Name", "OBSOLETESequences", "Code", "Sequences" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class.Types.Type.Types.Sequence), global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class.Types.Type.Types.Sequence.Parser, new[]{ "Name", "Code" }, null, null, null)})})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.CollectionInterval), global::SKF.Enlight.API.Hierarchy.CollectionInterval.Parser, new[]{ "Unit", "Value" }, null, new[]{ typeof(global::SKF.Enlight.API.Hierarchy.CollectionInterval.Types.Unit) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.MeasurementPoint), global::SKF.Enlight.API.Hierarchy.MeasurementPoint.Parser, new[]{ "Angular", "Bearing", "MeasurementType", "Shaft", "ShaftSide", "FixedSpeedRPM", "CollectionInterval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.InspectionPoint), global::SKF.Enlight.API.Hierarchy.InspectionPoint.Parser, new[]{ "ValueType", "NumericUnit", "Answers", "VisualizationType", "VisualizationMinValue", "VisualizationMaxValue", "CollectionInterval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.LubricationPoint), global::SKF.Enlight.API.Hierarchy.LubricationPoint.Parser, new[]{ "Lubricant", "Volume", "Unit", "Interval", "CollectionInterval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.Bearing), global::SKF.Enlight.API.Hierarchy.Bearing.Parser, new[]{ "BearingNumber", "Designation", "Manufacturer", "SideOfShaft", "SerialNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.Shaft), global::SKF.Enlight.API.Hierarchy.Shaft.Parser, new[]{ "ShaftNumber", "Speed", "Description", "Bearings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.AssetNode), global::SKF.Enlight.API.Hierarchy.AssetNode.Parser, new[]{ "Criticality", "Type", "Class", "Sequence", "Manufacturer", "Model", "SerialNumber", "Shafts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.Node), global::SKF.Enlight.API.Hierarchy.Node.Parser, new[]{ "Id", "Label", "Description", "Type", "Criticality", "SubType", "IndustrySegment", "Origin", "AssetNode", "MeasurementPoint", "InspectionPoint", "LubricationPoint", "Position", "Tags", "ParentId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.Nodes), global::SKF.Enlight.API.Hierarchy.Nodes.Parser, new[]{ "Nodes_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.GetEventsInput), global::SKF.Enlight.API.Hierarchy.GetEventsInput.Parser, new[]{ "Since", "Limit", "CustomerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.GetEventsOutput), global::SKF.Enlight.API.Hierarchy.GetEventsOutput.Parser, new[]{ "Events" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.SaveNodeInput), global::SKF.Enlight.API.Hierarchy.SaveNodeInput.Parser, new[]{ "UserId", "Node", "ParentId", "ParentOrigin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.CopyNodeInput), global::SKF.Enlight.API.Hierarchy.CopyNodeInput.Parser, new[]{ "UserId", "SrcNodeId", "DstParentNodeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.DeleteNodeInput), global::SKF.Enlight.API.Hierarchy.DeleteNodeInput.Parser, new[]{ "UserId", "NodeId", "Origin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.GetSubTreeInput), global::SKF.Enlight.API.Hierarchy.GetSubTreeInput.Parser, new[]{ "RootId", "Depth", "NodeTypes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.GetAncestorsInput), global::SKF.Enlight.API.Hierarchy.GetAncestorsInput.Parser, new[]{ "NodeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.GetAncestorsOutput), global::SKF.Enlight.API.Hierarchy.GetAncestorsOutput.Parser, new[]{ "Nodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Hierarchy.AncestorNode), global::SKF.Enlight.API.Hierarchy.AncestorNode.Parser, new[]{ "Id", "Origin", "Label", "Description", "Type", "SubType", "ParentId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ValueType {
    [pbr::OriginalName("NUMERIC")] Numeric = 0,
    [pbr::OriginalName("SINGLE_CHOICE")] SingleChoice = 1,
    [pbr::OriginalName("MULTI_CHOICE")] MultiChoice = 2,
  }

  public enum VisualizationType {
    [pbr::OriginalName("VISUALIZATION_NONE")] VisualizationNone = 0,
    [pbr::OriginalName("VISUALIZATION_CIRCULAR_GAUGE")] VisualizationCircularGauge = 1,
    [pbr::OriginalName("VISUALIZATION_LEVEL_GAUGE")] VisualizationLevelGauge = 2,
  }

  public enum LubricantUnit {
    [pbr::OriginalName("GRAM")] Gram = 0,
    [pbr::OriginalName("OUNCE")] Ounce = 1,
    [pbr::OriginalName("CM3")] Cm3 = 2,
  }

  #endregion

  #region Messages
  public sealed partial class AssetTypes : pb::IMessage<AssetTypes> {
    private static readonly pb::MessageParser<AssetTypes> _parser = new pb::MessageParser<AssetTypes>(() => new AssetTypes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssetTypes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetTypes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetTypes(AssetTypes other) : this() {
      classes_ = other.classes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetTypes Clone() {
      return new AssetTypes(this);
    }

    /// <summary>Field number for the "classes" field.</summary>
    public const int ClassesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class> _repeated_classes_codec
        = pb::FieldCodec.ForMessage(10, global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class.Parser);
    private readonly pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class> classes_ = new pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class> Classes {
      get { return classes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssetTypes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssetTypes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!classes_.Equals(other.classes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= classes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      classes_.WriteTo(output, _repeated_classes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += classes_.CalculateSize(_repeated_classes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssetTypes other) {
      if (other == null) {
        return;
      }
      classes_.Add(other.classes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            classes_.AddEntriesFrom(input, _repeated_classes_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AssetTypes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Class : pb::IMessage<Class> {
        private static readonly pb::MessageParser<Class> _parser = new pb::MessageParser<Class>(() => new Class());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Class> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SKF.Enlight.API.Hierarchy.AssetTypes.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Class() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Class(Class other) : this() {
          name_ = other.name_;
          types_ = other.types_.Clone();
          code_ = other.code_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Class Clone() {
          return new Class(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "types" field.</summary>
        public const int Types_FieldNumber = 2;
        private static readonly pb::FieldCodec<global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class.Types.Type> _repeated_types_codec
            = pb::FieldCodec.ForMessage(18, global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class.Types.Type.Parser);
        private readonly pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class.Types.Type> types_ = new pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class.Types.Type>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class.Types.Type> Types_ {
          get { return types_; }
        }

        /// <summary>Field number for the "code" field.</summary>
        public const int CodeFieldNumber = 3;
        private string code_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Code {
          get { return code_; }
          set {
            code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Class);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Class other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if(!types_.Equals(other.types_)) return false;
          if (Code != other.Code) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= types_.GetHashCode();
          if (Code.Length != 0) hash ^= Code.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          types_.WriteTo(output, _repeated_types_codec);
          if (Code.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Code);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += types_.CalculateSize(_repeated_types_codec);
          if (Code.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Class other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          types_.Add(other.types_);
          if (other.Code.Length != 0) {
            Code = other.Code;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                types_.AddEntriesFrom(input, _repeated_types_codec);
                break;
              }
              case 26: {
                Code = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Class message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Type : pb::IMessage<Type> {
            private static readonly pb::MessageParser<Type> _parser = new pb::MessageParser<Type>(() => new Type());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Type> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Type() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Type(Type other) : this() {
              name_ = other.name_;
              oBSOLETESequences_ = other.oBSOLETESequences_.Clone();
              code_ = other.code_;
              sequences_ = other.sequences_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Type Clone() {
              return new Type(this);
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 1;
            private string name_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "OBSOLETE_sequences" field.</summary>
            public const int OBSOLETESequencesFieldNumber = 2;
            private static readonly pb::FieldCodec<string> _repeated_oBSOLETESequences_codec
                = pb::FieldCodec.ForString(18);
            private readonly pbc::RepeatedField<string> oBSOLETESequences_ = new pbc::RepeatedField<string>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<string> OBSOLETESequences {
              get { return oBSOLETESequences_; }
            }

            /// <summary>Field number for the "code" field.</summary>
            public const int CodeFieldNumber = 3;
            private string code_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Code {
              get { return code_; }
              set {
                code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "sequences" field.</summary>
            public const int SequencesFieldNumber = 4;
            private static readonly pb::FieldCodec<global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class.Types.Type.Types.Sequence> _repeated_sequences_codec
                = pb::FieldCodec.ForMessage(34, global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class.Types.Type.Types.Sequence.Parser);
            private readonly pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class.Types.Type.Types.Sequence> sequences_ = new pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class.Types.Type.Types.Sequence>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class.Types.Type.Types.Sequence> Sequences {
              get { return sequences_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Type);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Type other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Name != other.Name) return false;
              if(!oBSOLETESequences_.Equals(other.oBSOLETESequences_)) return false;
              if (Code != other.Code) return false;
              if(!sequences_.Equals(other.sequences_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Name.Length != 0) hash ^= Name.GetHashCode();
              hash ^= oBSOLETESequences_.GetHashCode();
              if (Code.Length != 0) hash ^= Code.GetHashCode();
              hash ^= sequences_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Name.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Name);
              }
              oBSOLETESequences_.WriteTo(output, _repeated_oBSOLETESequences_codec);
              if (Code.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Code);
              }
              sequences_.WriteTo(output, _repeated_sequences_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              size += oBSOLETESequences_.CalculateSize(_repeated_oBSOLETESequences_codec);
              if (Code.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
              }
              size += sequences_.CalculateSize(_repeated_sequences_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Type other) {
              if (other == null) {
                return;
              }
              if (other.Name.Length != 0) {
                Name = other.Name;
              }
              oBSOLETESequences_.Add(other.oBSOLETESequences_);
              if (other.Code.Length != 0) {
                Code = other.Code;
              }
              sequences_.Add(other.sequences_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Name = input.ReadString();
                    break;
                  }
                  case 18: {
                    oBSOLETESequences_.AddEntriesFrom(input, _repeated_oBSOLETESequences_codec);
                    break;
                  }
                  case 26: {
                    Code = input.ReadString();
                    break;
                  }
                  case 34: {
                    sequences_.AddEntriesFrom(input, _repeated_sequences_codec);
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Type message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class Sequence : pb::IMessage<Sequence> {
                private static readonly pb::MessageParser<Sequence> _parser = new pb::MessageParser<Sequence>(() => new Sequence());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Sequence> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::SKF.Enlight.API.Hierarchy.AssetTypes.Types.Class.Types.Type.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Sequence() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Sequence(Sequence other) : this() {
                  name_ = other.name_;
                  code_ = other.code_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Sequence Clone() {
                  return new Sequence(this);
                }

                /// <summary>Field number for the "name" field.</summary>
                public const int NameFieldNumber = 1;
                private string name_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Name {
                  get { return name_; }
                  set {
                    name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "code" field.</summary>
                public const int CodeFieldNumber = 2;
                private string code_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Code {
                  get { return code_; }
                  set {
                    code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Sequence);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Sequence other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Name != other.Name) return false;
                  if (Code != other.Code) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Name.Length != 0) hash ^= Name.GetHashCode();
                  if (Code.Length != 0) hash ^= Code.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Name.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(Name);
                  }
                  if (Code.Length != 0) {
                    output.WriteRawTag(18);
                    output.WriteString(Code);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Name.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
                  }
                  if (Code.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Sequence other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Name.Length != 0) {
                    Name = other.Name;
                  }
                  if (other.Code.Length != 0) {
                    Code = other.Code;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        Name = input.ReadString();
                        break;
                      }
                      case 18: {
                        Code = input.ReadString();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class CollectionInterval : pb::IMessage<CollectionInterval> {
    private static readonly pb::MessageParser<CollectionInterval> _parser = new pb::MessageParser<CollectionInterval>(() => new CollectionInterval());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CollectionInterval> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectionInterval() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectionInterval(CollectionInterval other) : this() {
      unit_ = other.unit_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectionInterval Clone() {
      return new CollectionInterval(this);
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 1;
    private global::SKF.Enlight.API.Hierarchy.CollectionInterval.Types.Unit unit_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Hierarchy.CollectionInterval.Types.Unit Unit {
      get { return unit_; }
      set {
        unit_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CollectionInterval);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CollectionInterval other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Unit != other.Unit) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Unit != 0) hash ^= Unit.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Unit != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Unit);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Unit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Unit);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CollectionInterval other) {
      if (other == null) {
        return;
      }
      if (other.Unit != 0) {
        Unit = other.Unit;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Unit = (global::SKF.Enlight.API.Hierarchy.CollectionInterval.Types.Unit) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CollectionInterval message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Unit {
        /// <summary>
        /// Month should be default
        /// </summary>
        [pbr::OriginalName("MONTHS")] Months = 0,
        [pbr::OriginalName("DAYS")] Days = 1,
        [pbr::OriginalName("WEEKS")] Weeks = 2,
      }

    }
    #endregion

  }

  public sealed partial class MeasurementPoint : pb::IMessage<MeasurementPoint> {
    private static readonly pb::MessageParser<MeasurementPoint> _parser = new pb::MessageParser<MeasurementPoint>(() => new MeasurementPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MeasurementPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeasurementPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeasurementPoint(MeasurementPoint other) : this() {
      angular_ = other.angular_;
      bearing_ = other.bearing_;
      measurementType_ = other.measurementType_;
      shaft_ = other.shaft_;
      shaftSide_ = other.shaftSide_;
      fixedSpeedRPM_ = other.fixedSpeedRPM_;
      collectionInterval_ = other.collectionInterval_ != null ? other.collectionInterval_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeasurementPoint Clone() {
      return new MeasurementPoint(this);
    }

    /// <summary>Field number for the "angular" field.</summary>
    public const int AngularFieldNumber = 1;
    private string angular_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Angular {
      get { return angular_; }
      set {
        angular_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bearing" field.</summary>
    public const int BearingFieldNumber = 3;
    private int bearing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bearing {
      get { return bearing_; }
      set {
        bearing_ = value;
      }
    }

    /// <summary>Field number for the "measurementType" field.</summary>
    public const int MeasurementTypeFieldNumber = 4;
    private string measurementType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeasurementType {
      get { return measurementType_; }
      set {
        measurementType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shaft" field.</summary>
    public const int ShaftFieldNumber = 5;
    private string shaft_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shaft {
      get { return shaft_; }
      set {
        shaft_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shaftSide" field.</summary>
    public const int ShaftSideFieldNumber = 6;
    private string shaftSide_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShaftSide {
      get { return shaftSide_; }
      set {
        shaftSide_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fixedSpeedRPM" field.</summary>
    public const int FixedSpeedRPMFieldNumber = 7;
    private double fixedSpeedRPM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FixedSpeedRPM {
      get { return fixedSpeedRPM_; }
      set {
        fixedSpeedRPM_ = value;
      }
    }

    /// <summary>Field number for the "collectionInterval" field.</summary>
    public const int CollectionIntervalFieldNumber = 8;
    private global::SKF.Enlight.API.Hierarchy.CollectionInterval collectionInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Hierarchy.CollectionInterval CollectionInterval {
      get { return collectionInterval_; }
      set {
        collectionInterval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MeasurementPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MeasurementPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Angular != other.Angular) return false;
      if (Bearing != other.Bearing) return false;
      if (MeasurementType != other.MeasurementType) return false;
      if (Shaft != other.Shaft) return false;
      if (ShaftSide != other.ShaftSide) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FixedSpeedRPM, other.FixedSpeedRPM)) return false;
      if (!object.Equals(CollectionInterval, other.CollectionInterval)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Angular.Length != 0) hash ^= Angular.GetHashCode();
      if (Bearing != 0) hash ^= Bearing.GetHashCode();
      if (MeasurementType.Length != 0) hash ^= MeasurementType.GetHashCode();
      if (Shaft.Length != 0) hash ^= Shaft.GetHashCode();
      if (ShaftSide.Length != 0) hash ^= ShaftSide.GetHashCode();
      if (FixedSpeedRPM != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FixedSpeedRPM);
      if (collectionInterval_ != null) hash ^= CollectionInterval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Angular.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Angular);
      }
      if (Bearing != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Bearing);
      }
      if (MeasurementType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MeasurementType);
      }
      if (Shaft.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Shaft);
      }
      if (ShaftSide.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ShaftSide);
      }
      if (FixedSpeedRPM != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(FixedSpeedRPM);
      }
      if (collectionInterval_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CollectionInterval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Angular.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Angular);
      }
      if (Bearing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bearing);
      }
      if (MeasurementType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeasurementType);
      }
      if (Shaft.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shaft);
      }
      if (ShaftSide.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShaftSide);
      }
      if (FixedSpeedRPM != 0D) {
        size += 1 + 8;
      }
      if (collectionInterval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionInterval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MeasurementPoint other) {
      if (other == null) {
        return;
      }
      if (other.Angular.Length != 0) {
        Angular = other.Angular;
      }
      if (other.Bearing != 0) {
        Bearing = other.Bearing;
      }
      if (other.MeasurementType.Length != 0) {
        MeasurementType = other.MeasurementType;
      }
      if (other.Shaft.Length != 0) {
        Shaft = other.Shaft;
      }
      if (other.ShaftSide.Length != 0) {
        ShaftSide = other.ShaftSide;
      }
      if (other.FixedSpeedRPM != 0D) {
        FixedSpeedRPM = other.FixedSpeedRPM;
      }
      if (other.collectionInterval_ != null) {
        if (collectionInterval_ == null) {
          CollectionInterval = new global::SKF.Enlight.API.Hierarchy.CollectionInterval();
        }
        CollectionInterval.MergeFrom(other.CollectionInterval);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Angular = input.ReadString();
            break;
          }
          case 24: {
            Bearing = input.ReadInt32();
            break;
          }
          case 34: {
            MeasurementType = input.ReadString();
            break;
          }
          case 42: {
            Shaft = input.ReadString();
            break;
          }
          case 50: {
            ShaftSide = input.ReadString();
            break;
          }
          case 57: {
            FixedSpeedRPM = input.ReadDouble();
            break;
          }
          case 66: {
            if (collectionInterval_ == null) {
              CollectionInterval = new global::SKF.Enlight.API.Hierarchy.CollectionInterval();
            }
            input.ReadMessage(CollectionInterval);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InspectionPoint : pb::IMessage<InspectionPoint> {
    private static readonly pb::MessageParser<InspectionPoint> _parser = new pb::MessageParser<InspectionPoint>(() => new InspectionPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectionPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectionPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectionPoint(InspectionPoint other) : this() {
      valueType_ = other.valueType_;
      numericUnit_ = other.numericUnit_;
      answers_ = other.answers_.Clone();
      visualizationType_ = other.visualizationType_;
      visualizationMinValue_ = other.visualizationMinValue_;
      visualizationMaxValue_ = other.visualizationMaxValue_;
      collectionInterval_ = other.collectionInterval_ != null ? other.collectionInterval_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectionPoint Clone() {
      return new InspectionPoint(this);
    }

    /// <summary>Field number for the "valueType" field.</summary>
    public const int ValueTypeFieldNumber = 4;
    private global::SKF.Enlight.API.Hierarchy.ValueType valueType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Hierarchy.ValueType ValueType {
      get { return valueType_; }
      set {
        valueType_ = value;
      }
    }

    /// <summary>Field number for the "numericUnit" field.</summary>
    public const int NumericUnitFieldNumber = 2;
    private string numericUnit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NumericUnit {
      get { return numericUnit_; }
      set {
        numericUnit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "answers" field.</summary>
    public const int AnswersFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_answers_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> answers_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Answers {
      get { return answers_; }
    }

    /// <summary>Field number for the "visualizationType" field.</summary>
    public const int VisualizationTypeFieldNumber = 5;
    private global::SKF.Enlight.API.Hierarchy.VisualizationType visualizationType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Hierarchy.VisualizationType VisualizationType {
      get { return visualizationType_; }
      set {
        visualizationType_ = value;
      }
    }

    /// <summary>Field number for the "visualizationMinValue" field.</summary>
    public const int VisualizationMinValueFieldNumber = 6;
    private string visualizationMinValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VisualizationMinValue {
      get { return visualizationMinValue_; }
      set {
        visualizationMinValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "visualizationMaxValue" field.</summary>
    public const int VisualizationMaxValueFieldNumber = 7;
    private string visualizationMaxValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VisualizationMaxValue {
      get { return visualizationMaxValue_; }
      set {
        visualizationMaxValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "collectionInterval" field.</summary>
    public const int CollectionIntervalFieldNumber = 8;
    private global::SKF.Enlight.API.Hierarchy.CollectionInterval collectionInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Hierarchy.CollectionInterval CollectionInterval {
      get { return collectionInterval_; }
      set {
        collectionInterval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectionPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectionPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ValueType != other.ValueType) return false;
      if (NumericUnit != other.NumericUnit) return false;
      if(!answers_.Equals(other.answers_)) return false;
      if (VisualizationType != other.VisualizationType) return false;
      if (VisualizationMinValue != other.VisualizationMinValue) return false;
      if (VisualizationMaxValue != other.VisualizationMaxValue) return false;
      if (!object.Equals(CollectionInterval, other.CollectionInterval)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ValueType != 0) hash ^= ValueType.GetHashCode();
      if (NumericUnit.Length != 0) hash ^= NumericUnit.GetHashCode();
      hash ^= answers_.GetHashCode();
      if (VisualizationType != 0) hash ^= VisualizationType.GetHashCode();
      if (VisualizationMinValue.Length != 0) hash ^= VisualizationMinValue.GetHashCode();
      if (VisualizationMaxValue.Length != 0) hash ^= VisualizationMaxValue.GetHashCode();
      if (collectionInterval_ != null) hash ^= CollectionInterval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumericUnit.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NumericUnit);
      }
      answers_.WriteTo(output, _repeated_answers_codec);
      if (ValueType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ValueType);
      }
      if (VisualizationType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) VisualizationType);
      }
      if (VisualizationMinValue.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(VisualizationMinValue);
      }
      if (VisualizationMaxValue.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VisualizationMaxValue);
      }
      if (collectionInterval_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CollectionInterval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ValueType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ValueType);
      }
      if (NumericUnit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NumericUnit);
      }
      size += answers_.CalculateSize(_repeated_answers_codec);
      if (VisualizationType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VisualizationType);
      }
      if (VisualizationMinValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VisualizationMinValue);
      }
      if (VisualizationMaxValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VisualizationMaxValue);
      }
      if (collectionInterval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionInterval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectionPoint other) {
      if (other == null) {
        return;
      }
      if (other.ValueType != 0) {
        ValueType = other.ValueType;
      }
      if (other.NumericUnit.Length != 0) {
        NumericUnit = other.NumericUnit;
      }
      answers_.Add(other.answers_);
      if (other.VisualizationType != 0) {
        VisualizationType = other.VisualizationType;
      }
      if (other.VisualizationMinValue.Length != 0) {
        VisualizationMinValue = other.VisualizationMinValue;
      }
      if (other.VisualizationMaxValue.Length != 0) {
        VisualizationMaxValue = other.VisualizationMaxValue;
      }
      if (other.collectionInterval_ != null) {
        if (collectionInterval_ == null) {
          CollectionInterval = new global::SKF.Enlight.API.Hierarchy.CollectionInterval();
        }
        CollectionInterval.MergeFrom(other.CollectionInterval);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            NumericUnit = input.ReadString();
            break;
          }
          case 26: {
            answers_.AddEntriesFrom(input, _repeated_answers_codec);
            break;
          }
          case 32: {
            ValueType = (global::SKF.Enlight.API.Hierarchy.ValueType) input.ReadEnum();
            break;
          }
          case 40: {
            VisualizationType = (global::SKF.Enlight.API.Hierarchy.VisualizationType) input.ReadEnum();
            break;
          }
          case 50: {
            VisualizationMinValue = input.ReadString();
            break;
          }
          case 58: {
            VisualizationMaxValue = input.ReadString();
            break;
          }
          case 66: {
            if (collectionInterval_ == null) {
              CollectionInterval = new global::SKF.Enlight.API.Hierarchy.CollectionInterval();
            }
            input.ReadMessage(CollectionInterval);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LubricationPoint : pb::IMessage<LubricationPoint> {
    private static readonly pb::MessageParser<LubricationPoint> _parser = new pb::MessageParser<LubricationPoint>(() => new LubricationPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LubricationPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LubricationPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LubricationPoint(LubricationPoint other) : this() {
      lubricant_ = other.lubricant_;
      volume_ = other.volume_;
      unit_ = other.unit_;
      interval_ = other.interval_;
      collectionInterval_ = other.collectionInterval_ != null ? other.collectionInterval_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LubricationPoint Clone() {
      return new LubricationPoint(this);
    }

    /// <summary>Field number for the "lubricant" field.</summary>
    public const int LubricantFieldNumber = 1;
    private string lubricant_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lubricant {
      get { return lubricant_; }
      set {
        lubricant_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 2;
    private int volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 3;
    private global::SKF.Enlight.API.Hierarchy.LubricantUnit unit_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Hierarchy.LubricantUnit Unit {
      get { return unit_; }
      set {
        unit_ = value;
      }
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 4;
    private int interval_;
    /// <summary>
    /// days
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    /// <summary>Field number for the "collectionInterval" field.</summary>
    public const int CollectionIntervalFieldNumber = 5;
    private global::SKF.Enlight.API.Hierarchy.CollectionInterval collectionInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Hierarchy.CollectionInterval CollectionInterval {
      get { return collectionInterval_; }
      set {
        collectionInterval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LubricationPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LubricationPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Lubricant != other.Lubricant) return false;
      if (Volume != other.Volume) return false;
      if (Unit != other.Unit) return false;
      if (Interval != other.Interval) return false;
      if (!object.Equals(CollectionInterval, other.CollectionInterval)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Lubricant.Length != 0) hash ^= Lubricant.GetHashCode();
      if (Volume != 0) hash ^= Volume.GetHashCode();
      if (Unit != 0) hash ^= Unit.GetHashCode();
      if (Interval != 0) hash ^= Interval.GetHashCode();
      if (collectionInterval_ != null) hash ^= CollectionInterval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lubricant.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Lubricant);
      }
      if (Volume != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Volume);
      }
      if (Unit != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Unit);
      }
      if (Interval != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Interval);
      }
      if (collectionInterval_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CollectionInterval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lubricant.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lubricant);
      }
      if (Volume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Volume);
      }
      if (Unit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Unit);
      }
      if (Interval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Interval);
      }
      if (collectionInterval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionInterval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LubricationPoint other) {
      if (other == null) {
        return;
      }
      if (other.Lubricant.Length != 0) {
        Lubricant = other.Lubricant;
      }
      if (other.Volume != 0) {
        Volume = other.Volume;
      }
      if (other.Unit != 0) {
        Unit = other.Unit;
      }
      if (other.Interval != 0) {
        Interval = other.Interval;
      }
      if (other.collectionInterval_ != null) {
        if (collectionInterval_ == null) {
          CollectionInterval = new global::SKF.Enlight.API.Hierarchy.CollectionInterval();
        }
        CollectionInterval.MergeFrom(other.CollectionInterval);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Lubricant = input.ReadString();
            break;
          }
          case 16: {
            Volume = input.ReadInt32();
            break;
          }
          case 24: {
            Unit = (global::SKF.Enlight.API.Hierarchy.LubricantUnit) input.ReadEnum();
            break;
          }
          case 32: {
            Interval = input.ReadInt32();
            break;
          }
          case 42: {
            if (collectionInterval_ == null) {
              CollectionInterval = new global::SKF.Enlight.API.Hierarchy.CollectionInterval();
            }
            input.ReadMessage(CollectionInterval);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Bearing : pb::IMessage<Bearing> {
    private static readonly pb::MessageParser<Bearing> _parser = new pb::MessageParser<Bearing>(() => new Bearing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bearing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bearing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bearing(Bearing other) : this() {
      bearingNumber_ = other.bearingNumber_;
      designation_ = other.designation_;
      manufacturer_ = other.manufacturer_;
      sideOfShaft_ = other.sideOfShaft_;
      serialNumber_ = other.serialNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bearing Clone() {
      return new Bearing(this);
    }

    /// <summary>Field number for the "bearingNumber" field.</summary>
    public const int BearingNumberFieldNumber = 1;
    private int bearingNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BearingNumber {
      get { return bearingNumber_; }
      set {
        bearingNumber_ = value;
      }
    }

    /// <summary>Field number for the "designation" field.</summary>
    public const int DesignationFieldNumber = 2;
    private string designation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Designation {
      get { return designation_; }
      set {
        designation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "manufacturer" field.</summary>
    public const int ManufacturerFieldNumber = 3;
    private string manufacturer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Manufacturer {
      get { return manufacturer_; }
      set {
        manufacturer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sideOfShaft" field.</summary>
    public const int SideOfShaftFieldNumber = 4;
    private string sideOfShaft_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SideOfShaft {
      get { return sideOfShaft_; }
      set {
        sideOfShaft_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serialNumber" field.</summary>
    public const int SerialNumberFieldNumber = 5;
    private string serialNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SerialNumber {
      get { return serialNumber_; }
      set {
        serialNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bearing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bearing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BearingNumber != other.BearingNumber) return false;
      if (Designation != other.Designation) return false;
      if (Manufacturer != other.Manufacturer) return false;
      if (SideOfShaft != other.SideOfShaft) return false;
      if (SerialNumber != other.SerialNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BearingNumber != 0) hash ^= BearingNumber.GetHashCode();
      if (Designation.Length != 0) hash ^= Designation.GetHashCode();
      if (Manufacturer.Length != 0) hash ^= Manufacturer.GetHashCode();
      if (SideOfShaft.Length != 0) hash ^= SideOfShaft.GetHashCode();
      if (SerialNumber.Length != 0) hash ^= SerialNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BearingNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BearingNumber);
      }
      if (Designation.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Designation);
      }
      if (Manufacturer.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Manufacturer);
      }
      if (SideOfShaft.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SideOfShaft);
      }
      if (SerialNumber.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SerialNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BearingNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BearingNumber);
      }
      if (Designation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Designation);
      }
      if (Manufacturer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Manufacturer);
      }
      if (SideOfShaft.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SideOfShaft);
      }
      if (SerialNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SerialNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bearing other) {
      if (other == null) {
        return;
      }
      if (other.BearingNumber != 0) {
        BearingNumber = other.BearingNumber;
      }
      if (other.Designation.Length != 0) {
        Designation = other.Designation;
      }
      if (other.Manufacturer.Length != 0) {
        Manufacturer = other.Manufacturer;
      }
      if (other.SideOfShaft.Length != 0) {
        SideOfShaft = other.SideOfShaft;
      }
      if (other.SerialNumber.Length != 0) {
        SerialNumber = other.SerialNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BearingNumber = input.ReadInt32();
            break;
          }
          case 18: {
            Designation = input.ReadString();
            break;
          }
          case 26: {
            Manufacturer = input.ReadString();
            break;
          }
          case 34: {
            SideOfShaft = input.ReadString();
            break;
          }
          case 42: {
            SerialNumber = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Shaft : pb::IMessage<Shaft> {
    private static readonly pb::MessageParser<Shaft> _parser = new pb::MessageParser<Shaft>(() => new Shaft());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Shaft> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shaft() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shaft(Shaft other) : this() {
      shaftNumber_ = other.shaftNumber_;
      speed_ = other.speed_;
      description_ = other.description_;
      bearings_ = other.bearings_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shaft Clone() {
      return new Shaft(this);
    }

    /// <summary>Field number for the "shaftNumber" field.</summary>
    public const int ShaftNumberFieldNumber = 1;
    private int shaftNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShaftNumber {
      get { return shaftNumber_; }
      set {
        shaftNumber_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private string speed_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Speed {
      get { return speed_; }
      set {
        speed_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bearings" field.</summary>
    public const int BearingsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SKF.Enlight.API.Hierarchy.Bearing> _repeated_bearings_codec
        = pb::FieldCodec.ForMessage(34, global::SKF.Enlight.API.Hierarchy.Bearing.Parser);
    private readonly pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.Bearing> bearings_ = new pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.Bearing>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.Bearing> Bearings {
      get { return bearings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Shaft);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Shaft other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShaftNumber != other.ShaftNumber) return false;
      if (Speed != other.Speed) return false;
      if (Description != other.Description) return false;
      if(!bearings_.Equals(other.bearings_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShaftNumber != 0) hash ^= ShaftNumber.GetHashCode();
      if (Speed.Length != 0) hash ^= Speed.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= bearings_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShaftNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShaftNumber);
      }
      if (Speed.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Speed);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      bearings_.WriteTo(output, _repeated_bearings_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShaftNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShaftNumber);
      }
      if (Speed.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Speed);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += bearings_.CalculateSize(_repeated_bearings_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Shaft other) {
      if (other == null) {
        return;
      }
      if (other.ShaftNumber != 0) {
        ShaftNumber = other.ShaftNumber;
      }
      if (other.Speed.Length != 0) {
        Speed = other.Speed;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      bearings_.Add(other.bearings_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShaftNumber = input.ReadInt32();
            break;
          }
          case 18: {
            Speed = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            bearings_.AddEntriesFrom(input, _repeated_bearings_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AssetNode : pb::IMessage<AssetNode> {
    private static readonly pb::MessageParser<AssetNode> _parser = new pb::MessageParser<AssetNode>(() => new AssetNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssetNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetNode(AssetNode other) : this() {
      criticality_ = other.criticality_;
      type_ = other.type_;
      class_ = other.class_;
      sequence_ = other.sequence_;
      manufacturer_ = other.manufacturer_;
      model_ = other.model_;
      serialNumber_ = other.serialNumber_;
      shafts_ = other.shafts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetNode Clone() {
      return new AssetNode(this);
    }

    /// <summary>Field number for the "criticality" field.</summary>
    public const int CriticalityFieldNumber = 1;
    private string criticality_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Criticality {
      get { return criticality_; }
      set {
        criticality_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class" field.</summary>
    public const int ClassFieldNumber = 3;
    private string class_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Class {
      get { return class_; }
      set {
        class_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 4;
    private string sequence_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sequence {
      get { return sequence_; }
      set {
        sequence_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "manufacturer" field.</summary>
    public const int ManufacturerFieldNumber = 5;
    private string manufacturer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Manufacturer {
      get { return manufacturer_; }
      set {
        manufacturer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 6;
    private string model_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serialNumber" field.</summary>
    public const int SerialNumberFieldNumber = 7;
    private string serialNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SerialNumber {
      get { return serialNumber_; }
      set {
        serialNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shafts" field.</summary>
    public const int ShaftsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::SKF.Enlight.API.Hierarchy.Shaft> _repeated_shafts_codec
        = pb::FieldCodec.ForMessage(66, global::SKF.Enlight.API.Hierarchy.Shaft.Parser);
    private readonly pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.Shaft> shafts_ = new pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.Shaft>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.Shaft> Shafts {
      get { return shafts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssetNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssetNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Criticality != other.Criticality) return false;
      if (Type != other.Type) return false;
      if (Class != other.Class) return false;
      if (Sequence != other.Sequence) return false;
      if (Manufacturer != other.Manufacturer) return false;
      if (Model != other.Model) return false;
      if (SerialNumber != other.SerialNumber) return false;
      if(!shafts_.Equals(other.shafts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Criticality.Length != 0) hash ^= Criticality.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Class.Length != 0) hash ^= Class.GetHashCode();
      if (Sequence.Length != 0) hash ^= Sequence.GetHashCode();
      if (Manufacturer.Length != 0) hash ^= Manufacturer.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      if (SerialNumber.Length != 0) hash ^= SerialNumber.GetHashCode();
      hash ^= shafts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Criticality.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Criticality);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Class.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Class);
      }
      if (Sequence.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Sequence);
      }
      if (Manufacturer.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Manufacturer);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Model);
      }
      if (SerialNumber.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SerialNumber);
      }
      shafts_.WriteTo(output, _repeated_shafts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Criticality.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Criticality);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Class.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Class);
      }
      if (Sequence.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sequence);
      }
      if (Manufacturer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Manufacturer);
      }
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      if (SerialNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SerialNumber);
      }
      size += shafts_.CalculateSize(_repeated_shafts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssetNode other) {
      if (other == null) {
        return;
      }
      if (other.Criticality.Length != 0) {
        Criticality = other.Criticality;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Class.Length != 0) {
        Class = other.Class;
      }
      if (other.Sequence.Length != 0) {
        Sequence = other.Sequence;
      }
      if (other.Manufacturer.Length != 0) {
        Manufacturer = other.Manufacturer;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      if (other.SerialNumber.Length != 0) {
        SerialNumber = other.SerialNumber;
      }
      shafts_.Add(other.shafts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Criticality = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Class = input.ReadString();
            break;
          }
          case 34: {
            Sequence = input.ReadString();
            break;
          }
          case 42: {
            Manufacturer = input.ReadString();
            break;
          }
          case 50: {
            Model = input.ReadString();
            break;
          }
          case 58: {
            SerialNumber = input.ReadString();
            break;
          }
          case 66: {
            shafts_.AddEntriesFrom(input, _repeated_shafts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Node : pb::IMessage<Node> {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      id_ = other.id_;
      label_ = other.label_;
      description_ = other.description_;
      type_ = other.type_;
      criticality_ = other.criticality_;
      subType_ = other.subType_;
      industrySegment_ = other.industrySegment_ != null ? other.industrySegment_.Clone() : null;
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      assetNode_ = other.assetNode_ != null ? other.assetNode_.Clone() : null;
      measurementPoint_ = other.measurementPoint_ != null ? other.measurementPoint_.Clone() : null;
      inspectionPoint_ = other.inspectionPoint_ != null ? other.inspectionPoint_.Clone() : null;
      lubricationPoint_ = other.lubricationPoint_ != null ? other.lubricationPoint_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      tags_ = other.tags_ != null ? other.tags_.Clone() : null;
      parentId_ = other.parentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 2;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "criticality" field.</summary>
    public const int CriticalityFieldNumber = 5;
    private string criticality_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Criticality {
      get { return criticality_; }
      set {
        criticality_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 6;
    private string subType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubType {
      get { return subType_; }
      set {
        subType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "industrySegment" field.</summary>
    public const int IndustrySegmentFieldNumber = 16;
    private global::SKF.Enlight.API.Common.PrimitiveString industrySegment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Common.PrimitiveString IndustrySegment {
      get { return industrySegment_; }
      set {
        industrySegment_ = value;
      }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 7;
    private global::SKF.Enlight.API.Common.Origin origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Common.Origin Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "assetNode" field.</summary>
    public const int AssetNodeFieldNumber = 8;
    private global::SKF.Enlight.API.Hierarchy.AssetNode assetNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Hierarchy.AssetNode AssetNode {
      get { return assetNode_; }
      set {
        assetNode_ = value;
      }
    }

    /// <summary>Field number for the "measurementPoint" field.</summary>
    public const int MeasurementPointFieldNumber = 9;
    private global::SKF.Enlight.API.Hierarchy.MeasurementPoint measurementPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Hierarchy.MeasurementPoint MeasurementPoint {
      get { return measurementPoint_; }
      set {
        measurementPoint_ = value;
      }
    }

    /// <summary>Field number for the "inspectionPoint" field.</summary>
    public const int InspectionPointFieldNumber = 10;
    private global::SKF.Enlight.API.Hierarchy.InspectionPoint inspectionPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Hierarchy.InspectionPoint InspectionPoint {
      get { return inspectionPoint_; }
      set {
        inspectionPoint_ = value;
      }
    }

    /// <summary>Field number for the "lubricationPoint" field.</summary>
    public const int LubricationPointFieldNumber = 14;
    private global::SKF.Enlight.API.Hierarchy.LubricationPoint lubricationPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Hierarchy.LubricationPoint LubricationPoint {
      get { return lubricationPoint_; }
      set {
        lubricationPoint_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 12;
    private global::SKF.Enlight.API.Common.PrimitiveInt64 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Common.PrimitiveInt64 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 13;
    private global::SKF.Enlight.API.Common.PrimitiveString tags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Common.PrimitiveString Tags {
      get { return tags_; }
      set {
        tags_ = value;
      }
    }

    /// <summary>Field number for the "parentId" field.</summary>
    public const int ParentIdFieldNumber = 15;
    private string parentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentId {
      get { return parentId_; }
      set {
        parentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Label != other.Label) return false;
      if (Description != other.Description) return false;
      if (Type != other.Type) return false;
      if (Criticality != other.Criticality) return false;
      if (SubType != other.SubType) return false;
      if (!object.Equals(IndustrySegment, other.IndustrySegment)) return false;
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!object.Equals(AssetNode, other.AssetNode)) return false;
      if (!object.Equals(MeasurementPoint, other.MeasurementPoint)) return false;
      if (!object.Equals(InspectionPoint, other.InspectionPoint)) return false;
      if (!object.Equals(LubricationPoint, other.LubricationPoint)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Tags, other.Tags)) return false;
      if (ParentId != other.ParentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Criticality.Length != 0) hash ^= Criticality.GetHashCode();
      if (SubType.Length != 0) hash ^= SubType.GetHashCode();
      if (industrySegment_ != null) hash ^= IndustrySegment.GetHashCode();
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (assetNode_ != null) hash ^= AssetNode.GetHashCode();
      if (measurementPoint_ != null) hash ^= MeasurementPoint.GetHashCode();
      if (inspectionPoint_ != null) hash ^= InspectionPoint.GetHashCode();
      if (lubricationPoint_ != null) hash ^= LubricationPoint.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (tags_ != null) hash ^= Tags.GetHashCode();
      if (ParentId.Length != 0) hash ^= ParentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Label);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Type);
      }
      if (Criticality.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Criticality);
      }
      if (SubType.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SubType);
      }
      if (origin_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Origin);
      }
      if (assetNode_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(AssetNode);
      }
      if (measurementPoint_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MeasurementPoint);
      }
      if (inspectionPoint_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(InspectionPoint);
      }
      if (position_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Position);
      }
      if (tags_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Tags);
      }
      if (lubricationPoint_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(LubricationPoint);
      }
      if (ParentId.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(ParentId);
      }
      if (industrySegment_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(IndustrySegment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Criticality.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Criticality);
      }
      if (SubType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubType);
      }
      if (industrySegment_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndustrySegment);
      }
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (assetNode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AssetNode);
      }
      if (measurementPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeasurementPoint);
      }
      if (inspectionPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InspectionPoint);
      }
      if (lubricationPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LubricationPoint);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (tags_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tags);
      }
      if (ParentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Criticality.Length != 0) {
        Criticality = other.Criticality;
      }
      if (other.SubType.Length != 0) {
        SubType = other.SubType;
      }
      if (other.industrySegment_ != null) {
        if (industrySegment_ == null) {
          IndustrySegment = new global::SKF.Enlight.API.Common.PrimitiveString();
        }
        IndustrySegment.MergeFrom(other.IndustrySegment);
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          Origin = new global::SKF.Enlight.API.Common.Origin();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.assetNode_ != null) {
        if (assetNode_ == null) {
          AssetNode = new global::SKF.Enlight.API.Hierarchy.AssetNode();
        }
        AssetNode.MergeFrom(other.AssetNode);
      }
      if (other.measurementPoint_ != null) {
        if (measurementPoint_ == null) {
          MeasurementPoint = new global::SKF.Enlight.API.Hierarchy.MeasurementPoint();
        }
        MeasurementPoint.MergeFrom(other.MeasurementPoint);
      }
      if (other.inspectionPoint_ != null) {
        if (inspectionPoint_ == null) {
          InspectionPoint = new global::SKF.Enlight.API.Hierarchy.InspectionPoint();
        }
        InspectionPoint.MergeFrom(other.InspectionPoint);
      }
      if (other.lubricationPoint_ != null) {
        if (lubricationPoint_ == null) {
          LubricationPoint = new global::SKF.Enlight.API.Hierarchy.LubricationPoint();
        }
        LubricationPoint.MergeFrom(other.LubricationPoint);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::SKF.Enlight.API.Common.PrimitiveInt64();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.tags_ != null) {
        if (tags_ == null) {
          Tags = new global::SKF.Enlight.API.Common.PrimitiveString();
        }
        Tags.MergeFrom(other.Tags);
      }
      if (other.ParentId.Length != 0) {
        ParentId = other.ParentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Label = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            Type = input.ReadString();
            break;
          }
          case 42: {
            Criticality = input.ReadString();
            break;
          }
          case 50: {
            SubType = input.ReadString();
            break;
          }
          case 58: {
            if (origin_ == null) {
              Origin = new global::SKF.Enlight.API.Common.Origin();
            }
            input.ReadMessage(Origin);
            break;
          }
          case 66: {
            if (assetNode_ == null) {
              AssetNode = new global::SKF.Enlight.API.Hierarchy.AssetNode();
            }
            input.ReadMessage(AssetNode);
            break;
          }
          case 74: {
            if (measurementPoint_ == null) {
              MeasurementPoint = new global::SKF.Enlight.API.Hierarchy.MeasurementPoint();
            }
            input.ReadMessage(MeasurementPoint);
            break;
          }
          case 82: {
            if (inspectionPoint_ == null) {
              InspectionPoint = new global::SKF.Enlight.API.Hierarchy.InspectionPoint();
            }
            input.ReadMessage(InspectionPoint);
            break;
          }
          case 98: {
            if (position_ == null) {
              Position = new global::SKF.Enlight.API.Common.PrimitiveInt64();
            }
            input.ReadMessage(Position);
            break;
          }
          case 106: {
            if (tags_ == null) {
              Tags = new global::SKF.Enlight.API.Common.PrimitiveString();
            }
            input.ReadMessage(Tags);
            break;
          }
          case 114: {
            if (lubricationPoint_ == null) {
              LubricationPoint = new global::SKF.Enlight.API.Hierarchy.LubricationPoint();
            }
            input.ReadMessage(LubricationPoint);
            break;
          }
          case 122: {
            ParentId = input.ReadString();
            break;
          }
          case 130: {
            if (industrySegment_ == null) {
              IndustrySegment = new global::SKF.Enlight.API.Common.PrimitiveString();
            }
            input.ReadMessage(IndustrySegment);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Nodes : pb::IMessage<Nodes> {
    private static readonly pb::MessageParser<Nodes> _parser = new pb::MessageParser<Nodes>(() => new Nodes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Nodes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Nodes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Nodes(Nodes other) : this() {
      nodes_ = other.nodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Nodes Clone() {
      return new Nodes(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int Nodes_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::SKF.Enlight.API.Hierarchy.Node> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(10, global::SKF.Enlight.API.Hierarchy.Node.Parser);
    private readonly pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.Node> nodes_ = new pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.Node>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.Node> Nodes_ {
      get { return nodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Nodes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Nodes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _repeated_nodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Nodes other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetEventsInput : pb::IMessage<GetEventsInput> {
    private static readonly pb::MessageParser<GetEventsInput> _parser = new pb::MessageParser<GetEventsInput>(() => new GetEventsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetEventsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventsInput(GetEventsInput other) : this() {
      since_ = other.since_;
      limit_ = other.limit_ != null ? other.limit_.Clone() : null;
      customerId_ = other.customerId_ != null ? other.customerId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventsInput Clone() {
      return new GetEventsInput(this);
    }

    /// <summary>Field number for the "since" field.</summary>
    public const int SinceFieldNumber = 1;
    private long since_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Since {
      get { return since_; }
      set {
        since_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private global::SKF.Enlight.API.Common.PrimitiveInt32 limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Common.PrimitiveInt32 Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "customerId" field.</summary>
    public const int CustomerIdFieldNumber = 3;
    private global::SKF.Enlight.API.Common.PrimitiveString customerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Common.PrimitiveString CustomerId {
      get { return customerId_; }
      set {
        customerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetEventsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetEventsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Since != other.Since) return false;
      if (!object.Equals(Limit, other.Limit)) return false;
      if (!object.Equals(CustomerId, other.CustomerId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Since != 0L) hash ^= Since.GetHashCode();
      if (limit_ != null) hash ^= Limit.GetHashCode();
      if (customerId_ != null) hash ^= CustomerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Since != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Since);
      }
      if (limit_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Limit);
      }
      if (customerId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CustomerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Since != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Since);
      }
      if (limit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Limit);
      }
      if (customerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CustomerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetEventsInput other) {
      if (other == null) {
        return;
      }
      if (other.Since != 0L) {
        Since = other.Since;
      }
      if (other.limit_ != null) {
        if (limit_ == null) {
          Limit = new global::SKF.Enlight.API.Common.PrimitiveInt32();
        }
        Limit.MergeFrom(other.Limit);
      }
      if (other.customerId_ != null) {
        if (customerId_ == null) {
          CustomerId = new global::SKF.Enlight.API.Common.PrimitiveString();
        }
        CustomerId.MergeFrom(other.CustomerId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Since = input.ReadInt64();
            break;
          }
          case 18: {
            if (limit_ == null) {
              Limit = new global::SKF.Enlight.API.Common.PrimitiveInt32();
            }
            input.ReadMessage(Limit);
            break;
          }
          case 26: {
            if (customerId_ == null) {
              CustomerId = new global::SKF.Enlight.API.Common.PrimitiveString();
            }
            input.ReadMessage(CustomerId);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetEventsOutput : pb::IMessage<GetEventsOutput> {
    private static readonly pb::MessageParser<GetEventsOutput> _parser = new pb::MessageParser<GetEventsOutput>(() => new GetEventsOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetEventsOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventsOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventsOutput(GetEventsOutput other) : this() {
      events_ = other.events_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventsOutput Clone() {
      return new GetEventsOutput(this);
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 1;
    private pb::ByteString events_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Events {
      get { return events_; }
      set {
        events_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetEventsOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetEventsOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Events != other.Events) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Events.Length != 0) hash ^= Events.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Events.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Events);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Events.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Events);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetEventsOutput other) {
      if (other == null) {
        return;
      }
      if (other.Events.Length != 0) {
        Events = other.Events;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Events = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SaveNodeInput : pb::IMessage<SaveNodeInput> {
    private static readonly pb::MessageParser<SaveNodeInput> _parser = new pb::MessageParser<SaveNodeInput>(() => new SaveNodeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SaveNodeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveNodeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveNodeInput(SaveNodeInput other) : this() {
      userId_ = other.userId_;
      node_ = other.node_ != null ? other.node_.Clone() : null;
      parentId_ = other.parentId_;
      parentOrigin_ = other.parentOrigin_ != null ? other.parentOrigin_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveNodeInput Clone() {
      return new SaveNodeInput(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 3;
    private global::SKF.Enlight.API.Hierarchy.Node node_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Hierarchy.Node Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    /// <summary>Field number for the "parentId" field.</summary>
    public const int ParentIdFieldNumber = 2;
    private string parentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentId {
      get { return parentId_; }
      set {
        parentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentOrigin" field.</summary>
    public const int ParentOriginFieldNumber = 4;
    private global::SKF.Enlight.API.Common.Origin parentOrigin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Common.Origin ParentOrigin {
      get { return parentOrigin_; }
      set {
        parentOrigin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SaveNodeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SaveNodeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (!object.Equals(Node, other.Node)) return false;
      if (ParentId != other.ParentId) return false;
      if (!object.Equals(ParentOrigin, other.ParentOrigin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (node_ != null) hash ^= Node.GetHashCode();
      if (ParentId.Length != 0) hash ^= ParentId.GetHashCode();
      if (parentOrigin_ != null) hash ^= ParentOrigin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (ParentId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ParentId);
      }
      if (node_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Node);
      }
      if (parentOrigin_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ParentOrigin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (node_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (ParentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentId);
      }
      if (parentOrigin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParentOrigin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SaveNodeInput other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.node_ != null) {
        if (node_ == null) {
          Node = new global::SKF.Enlight.API.Hierarchy.Node();
        }
        Node.MergeFrom(other.Node);
      }
      if (other.ParentId.Length != 0) {
        ParentId = other.ParentId;
      }
      if (other.parentOrigin_ != null) {
        if (parentOrigin_ == null) {
          ParentOrigin = new global::SKF.Enlight.API.Common.Origin();
        }
        ParentOrigin.MergeFrom(other.ParentOrigin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            ParentId = input.ReadString();
            break;
          }
          case 26: {
            if (node_ == null) {
              Node = new global::SKF.Enlight.API.Hierarchy.Node();
            }
            input.ReadMessage(Node);
            break;
          }
          case 34: {
            if (parentOrigin_ == null) {
              ParentOrigin = new global::SKF.Enlight.API.Common.Origin();
            }
            input.ReadMessage(ParentOrigin);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CopyNodeInput : pb::IMessage<CopyNodeInput> {
    private static readonly pb::MessageParser<CopyNodeInput> _parser = new pb::MessageParser<CopyNodeInput>(() => new CopyNodeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CopyNodeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyNodeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyNodeInput(CopyNodeInput other) : this() {
      userId_ = other.userId_;
      srcNodeId_ = other.srcNodeId_;
      dstParentNodeId_ = other.dstParentNodeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyNodeInput Clone() {
      return new CopyNodeInput(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "srcNodeId" field.</summary>
    public const int SrcNodeIdFieldNumber = 2;
    private string srcNodeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SrcNodeId {
      get { return srcNodeId_; }
      set {
        srcNodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dstParentNodeId" field.</summary>
    public const int DstParentNodeIdFieldNumber = 3;
    private string dstParentNodeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DstParentNodeId {
      get { return dstParentNodeId_; }
      set {
        dstParentNodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CopyNodeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CopyNodeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (SrcNodeId != other.SrcNodeId) return false;
      if (DstParentNodeId != other.DstParentNodeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (SrcNodeId.Length != 0) hash ^= SrcNodeId.GetHashCode();
      if (DstParentNodeId.Length != 0) hash ^= DstParentNodeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (SrcNodeId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SrcNodeId);
      }
      if (DstParentNodeId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DstParentNodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (SrcNodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SrcNodeId);
      }
      if (DstParentNodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DstParentNodeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CopyNodeInput other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.SrcNodeId.Length != 0) {
        SrcNodeId = other.SrcNodeId;
      }
      if (other.DstParentNodeId.Length != 0) {
        DstParentNodeId = other.DstParentNodeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            SrcNodeId = input.ReadString();
            break;
          }
          case 26: {
            DstParentNodeId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteNodeInput : pb::IMessage<DeleteNodeInput> {
    private static readonly pb::MessageParser<DeleteNodeInput> _parser = new pb::MessageParser<DeleteNodeInput>(() => new DeleteNodeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteNodeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNodeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNodeInput(DeleteNodeInput other) : this() {
      userId_ = other.userId_;
      nodeId_ = other.nodeId_;
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNodeInput Clone() {
      return new DeleteNodeInput(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private string nodeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 3;
    private global::SKF.Enlight.API.Common.Origin origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Common.Origin Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteNodeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteNodeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (NodeId != other.NodeId) return false;
      if (!object.Equals(Origin, other.Origin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (NodeId.Length != 0) hash ^= NodeId.GetHashCode();
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (NodeId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NodeId);
      }
      if (origin_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Origin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (NodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeId);
      }
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteNodeInput other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.NodeId.Length != 0) {
        NodeId = other.NodeId;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          Origin = new global::SKF.Enlight.API.Common.Origin();
        }
        Origin.MergeFrom(other.Origin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            NodeId = input.ReadString();
            break;
          }
          case 26: {
            if (origin_ == null) {
              Origin = new global::SKF.Enlight.API.Common.Origin();
            }
            input.ReadMessage(Origin);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSubTreeInput : pb::IMessage<GetSubTreeInput> {
    private static readonly pb::MessageParser<GetSubTreeInput> _parser = new pb::MessageParser<GetSubTreeInput>(() => new GetSubTreeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSubTreeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSubTreeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSubTreeInput(GetSubTreeInput other) : this() {
      rootId_ = other.rootId_;
      depth_ = other.depth_;
      nodeTypes_ = other.nodeTypes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSubTreeInput Clone() {
      return new GetSubTreeInput(this);
    }

    /// <summary>Field number for the "rootId" field.</summary>
    public const int RootIdFieldNumber = 1;
    private string rootId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RootId {
      get { return rootId_; }
      set {
        rootId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "depth" field.</summary>
    public const int DepthFieldNumber = 2;
    private int depth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Depth {
      get { return depth_; }
      set {
        depth_ = value;
      }
    }

    /// <summary>Field number for the "nodeTypes" field.</summary>
    public const int NodeTypesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_nodeTypes_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> nodeTypes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NodeTypes {
      get { return nodeTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSubTreeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSubTreeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RootId != other.RootId) return false;
      if (Depth != other.Depth) return false;
      if(!nodeTypes_.Equals(other.nodeTypes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RootId.Length != 0) hash ^= RootId.GetHashCode();
      if (Depth != 0) hash ^= Depth.GetHashCode();
      hash ^= nodeTypes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RootId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RootId);
      }
      if (Depth != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Depth);
      }
      nodeTypes_.WriteTo(output, _repeated_nodeTypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RootId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RootId);
      }
      if (Depth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Depth);
      }
      size += nodeTypes_.CalculateSize(_repeated_nodeTypes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSubTreeInput other) {
      if (other == null) {
        return;
      }
      if (other.RootId.Length != 0) {
        RootId = other.RootId;
      }
      if (other.Depth != 0) {
        Depth = other.Depth;
      }
      nodeTypes_.Add(other.nodeTypes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RootId = input.ReadString();
            break;
          }
          case 16: {
            Depth = input.ReadInt32();
            break;
          }
          case 26: {
            nodeTypes_.AddEntriesFrom(input, _repeated_nodeTypes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAncestorsInput : pb::IMessage<GetAncestorsInput> {
    private static readonly pb::MessageParser<GetAncestorsInput> _parser = new pb::MessageParser<GetAncestorsInput>(() => new GetAncestorsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAncestorsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAncestorsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAncestorsInput(GetAncestorsInput other) : this() {
      nodeId_ = other.nodeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAncestorsInput Clone() {
      return new GetAncestorsInput(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private string nodeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAncestorsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAncestorsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId.Length != 0) hash ^= NodeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAncestorsInput other) {
      if (other == null) {
        return;
      }
      if (other.NodeId.Length != 0) {
        NodeId = other.NodeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAncestorsOutput : pb::IMessage<GetAncestorsOutput> {
    private static readonly pb::MessageParser<GetAncestorsOutput> _parser = new pb::MessageParser<GetAncestorsOutput>(() => new GetAncestorsOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAncestorsOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAncestorsOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAncestorsOutput(GetAncestorsOutput other) : this() {
      nodes_ = other.nodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAncestorsOutput Clone() {
      return new GetAncestorsOutput(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SKF.Enlight.API.Hierarchy.AncestorNode> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(10, global::SKF.Enlight.API.Hierarchy.AncestorNode.Parser);
    private readonly pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.AncestorNode> nodes_ = new pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.AncestorNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SKF.Enlight.API.Hierarchy.AncestorNode> Nodes {
      get { return nodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAncestorsOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAncestorsOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _repeated_nodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAncestorsOutput other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AncestorNode : pb::IMessage<AncestorNode> {
    private static readonly pb::MessageParser<AncestorNode> _parser = new pb::MessageParser<AncestorNode>(() => new AncestorNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AncestorNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Hierarchy.GrpcapiReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AncestorNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AncestorNode(AncestorNode other) : this() {
      id_ = other.id_;
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      label_ = other.label_;
      description_ = other.description_;
      type_ = other.type_;
      subType_ = other.subType_;
      parentId_ = other.parentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AncestorNode Clone() {
      return new AncestorNode(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 2;
    private global::SKF.Enlight.API.Common.Origin origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Common.Origin Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 3;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 6;
    private string subType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubType {
      get { return subType_; }
      set {
        subType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentId" field.</summary>
    public const int ParentIdFieldNumber = 7;
    private string parentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentId {
      get { return parentId_; }
      set {
        parentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AncestorNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AncestorNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Origin, other.Origin)) return false;
      if (Label != other.Label) return false;
      if (Description != other.Description) return false;
      if (Type != other.Type) return false;
      if (SubType != other.SubType) return false;
      if (ParentId != other.ParentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (SubType.Length != 0) hash ^= SubType.GetHashCode();
      if (ParentId.Length != 0) hash ^= ParentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (origin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Origin);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Label);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Type);
      }
      if (SubType.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SubType);
      }
      if (ParentId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ParentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (SubType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubType);
      }
      if (ParentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AncestorNode other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          Origin = new global::SKF.Enlight.API.Common.Origin();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.SubType.Length != 0) {
        SubType = other.SubType;
      }
      if (other.ParentId.Length != 0) {
        ParentId = other.ParentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (origin_ == null) {
              Origin = new global::SKF.Enlight.API.Common.Origin();
            }
            input.ReadMessage(Origin);
            break;
          }
          case 26: {
            Label = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            Type = input.ReadString();
            break;
          }
          case 50: {
            SubType = input.ReadString();
            break;
          }
          case 58: {
            ParentId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
