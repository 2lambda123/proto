// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: pas/grpcapi.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SKF.Enlight.API.PAS {
  public static partial class PointAlarmStatus
  {
    static readonly string __ServiceName = "pasapi.PointAlarmStatus";

    static readonly grpc::Marshaller<global::SKF.Enlight.API.PAS.Void> __Marshaller_pasapi_Void = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.PAS.Void.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.PAS.DeepPingOutput> __Marshaller_pasapi_DeepPingOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.PAS.DeepPingOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.PAS.SetPointStatusInput> __Marshaller_pasapi_SetPointStatusInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.PAS.SetPointStatusInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.PAS.SetPointStatusOutput> __Marshaller_pasapi_SetPointStatusOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.PAS.SetPointStatusOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.PAS.GetPointStatusInput> __Marshaller_pasapi_GetPointStatusInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.PAS.GetPointStatusInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.PAS.GetPointStatusOutput> __Marshaller_pasapi_GetPointStatusOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.PAS.GetPointStatusOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.PAS.GetPointStatusStreamInput> __Marshaller_pasapi_GetPointStatusStreamInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.PAS.GetPointStatusStreamInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.PAS.GetPointStatusStreamOutput> __Marshaller_pasapi_GetPointStatusStreamOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.PAS.GetPointStatusStreamOutput.Parser.ParseFrom);

    static readonly grpc::Method<global::SKF.Enlight.API.PAS.Void, global::SKF.Enlight.API.PAS.DeepPingOutput> __Method_DeepPing = new grpc::Method<global::SKF.Enlight.API.PAS.Void, global::SKF.Enlight.API.PAS.DeepPingOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeepPing",
        __Marshaller_pasapi_Void,
        __Marshaller_pasapi_DeepPingOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.PAS.SetPointStatusInput, global::SKF.Enlight.API.PAS.SetPointStatusOutput> __Method_SetPointStatus = new grpc::Method<global::SKF.Enlight.API.PAS.SetPointStatusInput, global::SKF.Enlight.API.PAS.SetPointStatusOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPointStatus",
        __Marshaller_pasapi_SetPointStatusInput,
        __Marshaller_pasapi_SetPointStatusOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.PAS.GetPointStatusInput, global::SKF.Enlight.API.PAS.GetPointStatusOutput> __Method_GetPointStatus = new grpc::Method<global::SKF.Enlight.API.PAS.GetPointStatusInput, global::SKF.Enlight.API.PAS.GetPointStatusOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPointStatus",
        __Marshaller_pasapi_GetPointStatusInput,
        __Marshaller_pasapi_GetPointStatusOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.PAS.GetPointStatusStreamInput, global::SKF.Enlight.API.PAS.GetPointStatusStreamOutput> __Method_GetPointStatusStream = new grpc::Method<global::SKF.Enlight.API.PAS.GetPointStatusStreamInput, global::SKF.Enlight.API.PAS.GetPointStatusStreamOutput>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetPointStatusStream",
        __Marshaller_pasapi_GetPointStatusStreamInput,
        __Marshaller_pasapi_GetPointStatusStreamOutput);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SKF.Enlight.API.PAS.GrpcapiReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PointAlarmStatus</summary>
    public abstract partial class PointAlarmStatusBase
    {
      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.PAS.DeepPingOutput> DeepPing(global::SKF.Enlight.API.PAS.Void request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.PAS.SetPointStatusOutput> SetPointStatus(global::SKF.Enlight.API.PAS.SetPointStatusInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.PAS.GetPointStatusOutput> GetPointStatus(global::SKF.Enlight.API.PAS.GetPointStatusInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetPointStatusStream(global::SKF.Enlight.API.PAS.GetPointStatusStreamInput request, grpc::IServerStreamWriter<global::SKF.Enlight.API.PAS.GetPointStatusStreamOutput> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PointAlarmStatus</summary>
    public partial class PointAlarmStatusClient : grpc::ClientBase<PointAlarmStatusClient>
    {
      /// <summary>Creates a new client for PointAlarmStatus</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PointAlarmStatusClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PointAlarmStatus that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PointAlarmStatusClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PointAlarmStatusClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PointAlarmStatusClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::SKF.Enlight.API.PAS.DeepPingOutput DeepPing(global::SKF.Enlight.API.PAS.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeepPing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.PAS.DeepPingOutput DeepPing(global::SKF.Enlight.API.PAS.Void request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeepPing, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.PAS.DeepPingOutput> DeepPingAsync(global::SKF.Enlight.API.PAS.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeepPingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.PAS.DeepPingOutput> DeepPingAsync(global::SKF.Enlight.API.PAS.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeepPing, null, options, request);
      }
      public virtual global::SKF.Enlight.API.PAS.SetPointStatusOutput SetPointStatus(global::SKF.Enlight.API.PAS.SetPointStatusInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPointStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.PAS.SetPointStatusOutput SetPointStatus(global::SKF.Enlight.API.PAS.SetPointStatusInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPointStatus, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.PAS.SetPointStatusOutput> SetPointStatusAsync(global::SKF.Enlight.API.PAS.SetPointStatusInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPointStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.PAS.SetPointStatusOutput> SetPointStatusAsync(global::SKF.Enlight.API.PAS.SetPointStatusInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPointStatus, null, options, request);
      }
      public virtual global::SKF.Enlight.API.PAS.GetPointStatusOutput GetPointStatus(global::SKF.Enlight.API.PAS.GetPointStatusInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPointStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.PAS.GetPointStatusOutput GetPointStatus(global::SKF.Enlight.API.PAS.GetPointStatusInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPointStatus, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.PAS.GetPointStatusOutput> GetPointStatusAsync(global::SKF.Enlight.API.PAS.GetPointStatusInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPointStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.PAS.GetPointStatusOutput> GetPointStatusAsync(global::SKF.Enlight.API.PAS.GetPointStatusInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPointStatus, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::SKF.Enlight.API.PAS.GetPointStatusStreamOutput> GetPointStatusStream(global::SKF.Enlight.API.PAS.GetPointStatusStreamInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPointStatusStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::SKF.Enlight.API.PAS.GetPointStatusStreamOutput> GetPointStatusStream(global::SKF.Enlight.API.PAS.GetPointStatusStreamInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetPointStatusStream, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PointAlarmStatusClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PointAlarmStatusClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PointAlarmStatusBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DeepPing, serviceImpl.DeepPing)
          .AddMethod(__Method_SetPointStatus, serviceImpl.SetPointStatus)
          .AddMethod(__Method_GetPointStatus, serviceImpl.GetPointStatus)
          .AddMethod(__Method_GetPointStatusStream, serviceImpl.GetPointStatusStream).Build();
    }

  }
}
#endregion
