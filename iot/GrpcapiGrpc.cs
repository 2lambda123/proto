// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: iot/grpcapi.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SKF.Enlight.API.IoT {
  public static partial class IoT
  {
    static readonly string __ServiceName = "iotgrpcapi.IoT";

    static readonly grpc::Marshaller<global::SKF.Enlight.API.Common.Void> __Marshaller_common_Void = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.Common.Void.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.Common.PrimitiveString> __Marshaller_common_PrimitiveString = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.Common.PrimitiveString.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.InitialTaskDescription> __Marshaller_iotgrpcapi_InitialTaskDescription = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.InitialTaskDescription.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.TaskDescriptions> __Marshaller_iotgrpcapi_TaskDescriptions = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.TaskDescriptions.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.TaskUser> __Marshaller_iotgrpcapi_TaskUser = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.TaskUser.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.SetTaskStatusInput> __Marshaller_iotgrpcapi_SetTaskStatusInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.SetTaskStatusInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetTaskStreamInput> __Marshaller_iotgrpcapi_GetTaskStreamInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetTaskStreamInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetTaskStreamOutput> __Marshaller_iotgrpcapi_GetTaskStreamOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetTaskStreamOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetTasksByStatusInput> __Marshaller_iotgrpcapi_GetTasksByStatusInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetTasksByStatusInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetTasksByStatusOutput> __Marshaller_iotgrpcapi_GetTasksByStatusOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetTasksByStatusOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetTaskByUUIDInput> __Marshaller_iotgrpcapi_GetTaskByUUIDInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetTaskByUUIDInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetTaskByUUIDOutput> __Marshaller_iotgrpcapi_GetTaskByUUIDOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetTaskByUUIDOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetTaskByLongIdInput> __Marshaller_iotgrpcapi_GetTaskByLongIdInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetTaskByLongIdInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetTaskByLongIdOutput> __Marshaller_iotgrpcapi_GetTaskByLongIdOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetTaskByLongIdOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampInput> __Marshaller_iotgrpcapi_GetTasksModifiedSinceTimestampInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampOutput> __Marshaller_iotgrpcapi_GetTasksModifiedSinceTimestampOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.IngestNodesDataInput> __Marshaller_iotgrpcapi_IngestNodesDataInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.IngestNodesDataInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.IngestNodesDataOutput> __Marshaller_iotgrpcapi_IngestNodesDataOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.IngestNodesDataOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.IngestNodeDataInput> __Marshaller_iotgrpcapi_IngestNodeDataInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.IngestNodeDataInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.IngestNodeDataOutput> __Marshaller_iotgrpcapi_IngestNodeDataOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.IngestNodeDataOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetLatestNodeDataInput> __Marshaller_iotgrpcapi_GetLatestNodeDataInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetLatestNodeDataInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetLatestNodeDataOutput> __Marshaller_iotgrpcapi_GetLatestNodeDataOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetLatestNodeDataOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetNodeDataInput> __Marshaller_iotgrpcapi_GetNodeDataInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetNodeDataInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetNodeDataOutput> __Marshaller_iotgrpcapi_GetNodeDataOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetNodeDataOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.DeleteNodeDataInput> __Marshaller_iotgrpcapi_DeleteNodeDataInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.DeleteNodeDataInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetNodeEventLogInput> __Marshaller_iotgrpcapi_GetNodeEventLogInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetNodeEventLogInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetNodeEventLogOutput> __Marshaller_iotgrpcapi_GetNodeEventLogOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetNodeEventLogOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetMediaInput> __Marshaller_iotgrpcapi_GetMediaInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetMediaInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetMediaOutput> __Marshaller_iotgrpcapi_GetMediaOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetMediaOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetMediaSignedUrlInput> __Marshaller_iotgrpcapi_GetMediaSignedUrlInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetMediaSignedUrlInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.GetMediaSignedUrlOutput> __Marshaller_iotgrpcapi_GetMediaSignedUrlOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.GetMediaSignedUrlOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.PutMediaSignedUrlInput> __Marshaller_iotgrpcapi_PutMediaSignedUrlInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.PutMediaSignedUrlInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SKF.Enlight.API.IoT.PutMediaSignedUrlOutput> __Marshaller_iotgrpcapi_PutMediaSignedUrlOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SKF.Enlight.API.IoT.PutMediaSignedUrlOutput.Parser.ParseFrom);

    static readonly grpc::Method<global::SKF.Enlight.API.Common.Void, global::SKF.Enlight.API.Common.PrimitiveString> __Method_DeepPing = new grpc::Method<global::SKF.Enlight.API.Common.Void, global::SKF.Enlight.API.Common.PrimitiveString>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeepPing",
        __Marshaller_common_Void,
        __Marshaller_common_PrimitiveString);

    static readonly grpc::Method<global::SKF.Enlight.API.IoT.InitialTaskDescription, global::SKF.Enlight.API.Common.PrimitiveString> __Method_CreateTask = new grpc::Method<global::SKF.Enlight.API.IoT.InitialTaskDescription, global::SKF.Enlight.API.Common.PrimitiveString>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTask",
        __Marshaller_iotgrpcapi_InitialTaskDescription,
        __Marshaller_common_PrimitiveString);

    static readonly grpc::Method<global::SKF.Enlight.API.Common.PrimitiveString, global::SKF.Enlight.API.IoT.TaskDescriptions> __Method_GetAllTasks = new grpc::Method<global::SKF.Enlight.API.Common.PrimitiveString, global::SKF.Enlight.API.IoT.TaskDescriptions>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllTasks",
        __Marshaller_common_PrimitiveString,
        __Marshaller_iotgrpcapi_TaskDescriptions);

    static readonly grpc::Method<global::SKF.Enlight.API.Common.PrimitiveString, global::SKF.Enlight.API.IoT.TaskDescriptions> __Method_GetUncompletedTasks = new grpc::Method<global::SKF.Enlight.API.Common.PrimitiveString, global::SKF.Enlight.API.IoT.TaskDescriptions>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUncompletedTasks",
        __Marshaller_common_PrimitiveString,
        __Marshaller_iotgrpcapi_TaskDescriptions);

    static readonly grpc::Method<global::SKF.Enlight.API.IoT.TaskUser, global::SKF.Enlight.API.Common.Void> __Method_SetTaskCompleted = new grpc::Method<global::SKF.Enlight.API.IoT.TaskUser, global::SKF.Enlight.API.Common.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTaskCompleted",
        __Marshaller_iotgrpcapi_TaskUser,
        __Marshaller_common_Void);

    static readonly grpc::Method<global::SKF.Enlight.API.IoT.TaskUser, global::SKF.Enlight.API.Common.Void> __Method_DeleteTask = new grpc::Method<global::SKF.Enlight.API.IoT.TaskUser, global::SKF.Enlight.API.Common.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTask",
        __Marshaller_iotgrpcapi_TaskUser,
        __Marshaller_common_Void);

    static readonly grpc::Method<global::SKF.Enlight.API.Common.PrimitiveString, global::SKF.Enlight.API.IoT.TaskDescriptions> __Method_GetUncompletedTasksByHierarchy = new grpc::Method<global::SKF.Enlight.API.Common.PrimitiveString, global::SKF.Enlight.API.IoT.TaskDescriptions>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUncompletedTasksByHierarchy",
        __Marshaller_common_PrimitiveString,
        __Marshaller_iotgrpcapi_TaskDescriptions);

    static readonly grpc::Method<global::SKF.Enlight.API.IoT.SetTaskStatusInput, global::SKF.Enlight.API.Common.Void> __Method_SetTaskStatus = new grpc::Method<global::SKF.Enlight.API.IoT.SetTaskStatusInput, global::SKF.Enlight.API.Common.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTaskStatus",
        __Marshaller_iotgrpcapi_SetTaskStatusInput,
        __Marshaller_common_Void);

    static readonly grpc::Method<global::SKF.Enlight.API.IoT.GetTaskStreamInput, global::SKF.Enlight.API.IoT.GetTaskStreamOutput> __Method_GetTaskStream = new grpc::Method<global::SKF.Enlight.API.IoT.GetTaskStreamInput, global::SKF.Enlight.API.IoT.GetTaskStreamOutput>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetTaskStream",
        __Marshaller_iotgrpcapi_GetTaskStreamInput,
        __Marshaller_iotgrpcapi_GetTaskStreamOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.IoT.GetTasksByStatusInput, global::SKF.Enlight.API.IoT.GetTasksByStatusOutput> __Method_GetTasksByStatus = new grpc::Method<global::SKF.Enlight.API.IoT.GetTasksByStatusInput, global::SKF.Enlight.API.IoT.GetTasksByStatusOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTasksByStatus",
        __Marshaller_iotgrpcapi_GetTasksByStatusInput,
        __Marshaller_iotgrpcapi_GetTasksByStatusOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.IoT.GetTaskByUUIDInput, global::SKF.Enlight.API.IoT.GetTaskByUUIDOutput> __Method_GetTaskByUUID = new grpc::Method<global::SKF.Enlight.API.IoT.GetTaskByUUIDInput, global::SKF.Enlight.API.IoT.GetTaskByUUIDOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTaskByUUID",
        __Marshaller_iotgrpcapi_GetTaskByUUIDInput,
        __Marshaller_iotgrpcapi_GetTaskByUUIDOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.IoT.GetTaskByLongIdInput, global::SKF.Enlight.API.IoT.GetTaskByLongIdOutput> __Method_GetTaskByLongId = new grpc::Method<global::SKF.Enlight.API.IoT.GetTaskByLongIdInput, global::SKF.Enlight.API.IoT.GetTaskByLongIdOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTaskByLongId",
        __Marshaller_iotgrpcapi_GetTaskByLongIdInput,
        __Marshaller_iotgrpcapi_GetTaskByLongIdOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampInput, global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampOutput> __Method_GetTasksModifiedSinceTimestamp = new grpc::Method<global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampInput, global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTasksModifiedSinceTimestamp",
        __Marshaller_iotgrpcapi_GetTasksModifiedSinceTimestampInput,
        __Marshaller_iotgrpcapi_GetTasksModifiedSinceTimestampOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.IoT.IngestNodesDataInput, global::SKF.Enlight.API.IoT.IngestNodesDataOutput> __Method_IngestNodesData = new grpc::Method<global::SKF.Enlight.API.IoT.IngestNodesDataInput, global::SKF.Enlight.API.IoT.IngestNodesDataOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IngestNodesData",
        __Marshaller_iotgrpcapi_IngestNodesDataInput,
        __Marshaller_iotgrpcapi_IngestNodesDataOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.IoT.IngestNodeDataInput, global::SKF.Enlight.API.IoT.IngestNodeDataOutput> __Method_IngestNodeData = new grpc::Method<global::SKF.Enlight.API.IoT.IngestNodeDataInput, global::SKF.Enlight.API.IoT.IngestNodeDataOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IngestNodeData",
        __Marshaller_iotgrpcapi_IngestNodeDataInput,
        __Marshaller_iotgrpcapi_IngestNodeDataOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.IoT.GetLatestNodeDataInput, global::SKF.Enlight.API.IoT.GetLatestNodeDataOutput> __Method_GetLatestNodeData = new grpc::Method<global::SKF.Enlight.API.IoT.GetLatestNodeDataInput, global::SKF.Enlight.API.IoT.GetLatestNodeDataOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLatestNodeData",
        __Marshaller_iotgrpcapi_GetLatestNodeDataInput,
        __Marshaller_iotgrpcapi_GetLatestNodeDataOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.IoT.GetNodeDataInput, global::SKF.Enlight.API.IoT.GetNodeDataOutput> __Method_GetNodeData = new grpc::Method<global::SKF.Enlight.API.IoT.GetNodeDataInput, global::SKF.Enlight.API.IoT.GetNodeDataOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNodeData",
        __Marshaller_iotgrpcapi_GetNodeDataInput,
        __Marshaller_iotgrpcapi_GetNodeDataOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.IoT.DeleteNodeDataInput, global::SKF.Enlight.API.Common.Void> __Method_DeleteNodeData = new grpc::Method<global::SKF.Enlight.API.IoT.DeleteNodeDataInput, global::SKF.Enlight.API.Common.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteNodeData",
        __Marshaller_iotgrpcapi_DeleteNodeDataInput,
        __Marshaller_common_Void);

    static readonly grpc::Method<global::SKF.Enlight.API.IoT.GetNodeEventLogInput, global::SKF.Enlight.API.IoT.GetNodeEventLogOutput> __Method_GetNodeEventLog = new grpc::Method<global::SKF.Enlight.API.IoT.GetNodeEventLogInput, global::SKF.Enlight.API.IoT.GetNodeEventLogOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNodeEventLog",
        __Marshaller_iotgrpcapi_GetNodeEventLogInput,
        __Marshaller_iotgrpcapi_GetNodeEventLogOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.IoT.GetMediaInput, global::SKF.Enlight.API.IoT.GetMediaOutput> __Method_GetMedia = new grpc::Method<global::SKF.Enlight.API.IoT.GetMediaInput, global::SKF.Enlight.API.IoT.GetMediaOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMedia",
        __Marshaller_iotgrpcapi_GetMediaInput,
        __Marshaller_iotgrpcapi_GetMediaOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.IoT.GetMediaSignedUrlInput, global::SKF.Enlight.API.IoT.GetMediaSignedUrlOutput> __Method_RequestGetMediaSignedUrl = new grpc::Method<global::SKF.Enlight.API.IoT.GetMediaSignedUrlInput, global::SKF.Enlight.API.IoT.GetMediaSignedUrlOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestGetMediaSignedUrl",
        __Marshaller_iotgrpcapi_GetMediaSignedUrlInput,
        __Marshaller_iotgrpcapi_GetMediaSignedUrlOutput);

    static readonly grpc::Method<global::SKF.Enlight.API.IoT.PutMediaSignedUrlInput, global::SKF.Enlight.API.IoT.PutMediaSignedUrlOutput> __Method_RequestPutMediaSignedUrl = new grpc::Method<global::SKF.Enlight.API.IoT.PutMediaSignedUrlInput, global::SKF.Enlight.API.IoT.PutMediaSignedUrlOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestPutMediaSignedUrl",
        __Marshaller_iotgrpcapi_PutMediaSignedUrlInput,
        __Marshaller_iotgrpcapi_PutMediaSignedUrlOutput);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SKF.Enlight.API.IoT.GrpcapiReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of IoT</summary>
    [grpc::BindServiceMethod(typeof(IoT), "BindService")]
    public abstract partial class IoTBase
    {
      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Common.PrimitiveString> DeepPing(global::SKF.Enlight.API.Common.Void request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Common.PrimitiveString> CreateTask(global::SKF.Enlight.API.IoT.InitialTaskDescription request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.IoT.TaskDescriptions> GetAllTasks(global::SKF.Enlight.API.Common.PrimitiveString request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.IoT.TaskDescriptions> GetUncompletedTasks(global::SKF.Enlight.API.Common.PrimitiveString request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Common.Void> SetTaskCompleted(global::SKF.Enlight.API.IoT.TaskUser request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Common.Void> DeleteTask(global::SKF.Enlight.API.IoT.TaskUser request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.IoT.TaskDescriptions> GetUncompletedTasksByHierarchy(global::SKF.Enlight.API.Common.PrimitiveString request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Common.Void> SetTaskStatus(global::SKF.Enlight.API.IoT.SetTaskStatusInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetTaskStream(global::SKF.Enlight.API.IoT.GetTaskStreamInput request, grpc::IServerStreamWriter<global::SKF.Enlight.API.IoT.GetTaskStreamOutput> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.IoT.GetTasksByStatusOutput> GetTasksByStatus(global::SKF.Enlight.API.IoT.GetTasksByStatusInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.IoT.GetTaskByUUIDOutput> GetTaskByUUID(global::SKF.Enlight.API.IoT.GetTaskByUUIDInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.IoT.GetTaskByLongIdOutput> GetTaskByLongId(global::SKF.Enlight.API.IoT.GetTaskByLongIdInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampOutput> GetTasksModifiedSinceTimestamp(global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.IoT.IngestNodesDataOutput> IngestNodesData(global::SKF.Enlight.API.IoT.IngestNodesDataInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.IoT.IngestNodeDataOutput> IngestNodeData(global::SKF.Enlight.API.IoT.IngestNodeDataInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.IoT.GetLatestNodeDataOutput> GetLatestNodeData(global::SKF.Enlight.API.IoT.GetLatestNodeDataInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.IoT.GetNodeDataOutput> GetNodeData(global::SKF.Enlight.API.IoT.GetNodeDataInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.Common.Void> DeleteNodeData(global::SKF.Enlight.API.IoT.DeleteNodeDataInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.IoT.GetNodeEventLogOutput> GetNodeEventLog(global::SKF.Enlight.API.IoT.GetNodeEventLogInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.IoT.GetMediaOutput> GetMedia(global::SKF.Enlight.API.IoT.GetMediaInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.IoT.GetMediaSignedUrlOutput> RequestGetMediaSignedUrl(global::SKF.Enlight.API.IoT.GetMediaSignedUrlInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SKF.Enlight.API.IoT.PutMediaSignedUrlOutput> RequestPutMediaSignedUrl(global::SKF.Enlight.API.IoT.PutMediaSignedUrlInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for IoT</summary>
    public partial class IoTClient : grpc::ClientBase<IoTClient>
    {
      /// <summary>Creates a new client for IoT</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public IoTClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for IoT that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public IoTClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected IoTClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected IoTClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::SKF.Enlight.API.Common.PrimitiveString DeepPing(global::SKF.Enlight.API.Common.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeepPing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Common.PrimitiveString DeepPing(global::SKF.Enlight.API.Common.Void request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeepPing, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.PrimitiveString> DeepPingAsync(global::SKF.Enlight.API.Common.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeepPingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.PrimitiveString> DeepPingAsync(global::SKF.Enlight.API.Common.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeepPing, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Common.PrimitiveString CreateTask(global::SKF.Enlight.API.IoT.InitialTaskDescription request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Common.PrimitiveString CreateTask(global::SKF.Enlight.API.IoT.InitialTaskDescription request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTask, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.PrimitiveString> CreateTaskAsync(global::SKF.Enlight.API.IoT.InitialTaskDescription request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.PrimitiveString> CreateTaskAsync(global::SKF.Enlight.API.IoT.InitialTaskDescription request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTask, null, options, request);
      }
      public virtual global::SKF.Enlight.API.IoT.TaskDescriptions GetAllTasks(global::SKF.Enlight.API.Common.PrimitiveString request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.IoT.TaskDescriptions GetAllTasks(global::SKF.Enlight.API.Common.PrimitiveString request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllTasks, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.TaskDescriptions> GetAllTasksAsync(global::SKF.Enlight.API.Common.PrimitiveString request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.TaskDescriptions> GetAllTasksAsync(global::SKF.Enlight.API.Common.PrimitiveString request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllTasks, null, options, request);
      }
      public virtual global::SKF.Enlight.API.IoT.TaskDescriptions GetUncompletedTasks(global::SKF.Enlight.API.Common.PrimitiveString request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUncompletedTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.IoT.TaskDescriptions GetUncompletedTasks(global::SKF.Enlight.API.Common.PrimitiveString request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUncompletedTasks, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.TaskDescriptions> GetUncompletedTasksAsync(global::SKF.Enlight.API.Common.PrimitiveString request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUncompletedTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.TaskDescriptions> GetUncompletedTasksAsync(global::SKF.Enlight.API.Common.PrimitiveString request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUncompletedTasks, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Common.Void SetTaskCompleted(global::SKF.Enlight.API.IoT.TaskUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTaskCompleted(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Common.Void SetTaskCompleted(global::SKF.Enlight.API.IoT.TaskUser request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTaskCompleted, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> SetTaskCompletedAsync(global::SKF.Enlight.API.IoT.TaskUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTaskCompletedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> SetTaskCompletedAsync(global::SKF.Enlight.API.IoT.TaskUser request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTaskCompleted, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Common.Void DeleteTask(global::SKF.Enlight.API.IoT.TaskUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Common.Void DeleteTask(global::SKF.Enlight.API.IoT.TaskUser request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTask, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> DeleteTaskAsync(global::SKF.Enlight.API.IoT.TaskUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> DeleteTaskAsync(global::SKF.Enlight.API.IoT.TaskUser request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTask, null, options, request);
      }
      public virtual global::SKF.Enlight.API.IoT.TaskDescriptions GetUncompletedTasksByHierarchy(global::SKF.Enlight.API.Common.PrimitiveString request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUncompletedTasksByHierarchy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.IoT.TaskDescriptions GetUncompletedTasksByHierarchy(global::SKF.Enlight.API.Common.PrimitiveString request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUncompletedTasksByHierarchy, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.TaskDescriptions> GetUncompletedTasksByHierarchyAsync(global::SKF.Enlight.API.Common.PrimitiveString request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUncompletedTasksByHierarchyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.TaskDescriptions> GetUncompletedTasksByHierarchyAsync(global::SKF.Enlight.API.Common.PrimitiveString request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUncompletedTasksByHierarchy, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Common.Void SetTaskStatus(global::SKF.Enlight.API.IoT.SetTaskStatusInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTaskStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Common.Void SetTaskStatus(global::SKF.Enlight.API.IoT.SetTaskStatusInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTaskStatus, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> SetTaskStatusAsync(global::SKF.Enlight.API.IoT.SetTaskStatusInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTaskStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> SetTaskStatusAsync(global::SKF.Enlight.API.IoT.SetTaskStatusInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTaskStatus, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::SKF.Enlight.API.IoT.GetTaskStreamOutput> GetTaskStream(global::SKF.Enlight.API.IoT.GetTaskStreamInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::SKF.Enlight.API.IoT.GetTaskStreamOutput> GetTaskStream(global::SKF.Enlight.API.IoT.GetTaskStreamInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetTaskStream, null, options, request);
      }
      public virtual global::SKF.Enlight.API.IoT.GetTasksByStatusOutput GetTasksByStatus(global::SKF.Enlight.API.IoT.GetTasksByStatusInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTasksByStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.IoT.GetTasksByStatusOutput GetTasksByStatus(global::SKF.Enlight.API.IoT.GetTasksByStatusInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTasksByStatus, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.GetTasksByStatusOutput> GetTasksByStatusAsync(global::SKF.Enlight.API.IoT.GetTasksByStatusInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTasksByStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.GetTasksByStatusOutput> GetTasksByStatusAsync(global::SKF.Enlight.API.IoT.GetTasksByStatusInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTasksByStatus, null, options, request);
      }
      public virtual global::SKF.Enlight.API.IoT.GetTaskByUUIDOutput GetTaskByUUID(global::SKF.Enlight.API.IoT.GetTaskByUUIDInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskByUUID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.IoT.GetTaskByUUIDOutput GetTaskByUUID(global::SKF.Enlight.API.IoT.GetTaskByUUIDInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTaskByUUID, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.GetTaskByUUIDOutput> GetTaskByUUIDAsync(global::SKF.Enlight.API.IoT.GetTaskByUUIDInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskByUUIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.GetTaskByUUIDOutput> GetTaskByUUIDAsync(global::SKF.Enlight.API.IoT.GetTaskByUUIDInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTaskByUUID, null, options, request);
      }
      public virtual global::SKF.Enlight.API.IoT.GetTaskByLongIdOutput GetTaskByLongId(global::SKF.Enlight.API.IoT.GetTaskByLongIdInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskByLongId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.IoT.GetTaskByLongIdOutput GetTaskByLongId(global::SKF.Enlight.API.IoT.GetTaskByLongIdInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTaskByLongId, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.GetTaskByLongIdOutput> GetTaskByLongIdAsync(global::SKF.Enlight.API.IoT.GetTaskByLongIdInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskByLongIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.GetTaskByLongIdOutput> GetTaskByLongIdAsync(global::SKF.Enlight.API.IoT.GetTaskByLongIdInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTaskByLongId, null, options, request);
      }
      public virtual global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampOutput GetTasksModifiedSinceTimestamp(global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTasksModifiedSinceTimestamp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampOutput GetTasksModifiedSinceTimestamp(global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTasksModifiedSinceTimestamp, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampOutput> GetTasksModifiedSinceTimestampAsync(global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTasksModifiedSinceTimestampAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampOutput> GetTasksModifiedSinceTimestampAsync(global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTasksModifiedSinceTimestamp, null, options, request);
      }
      public virtual global::SKF.Enlight.API.IoT.IngestNodesDataOutput IngestNodesData(global::SKF.Enlight.API.IoT.IngestNodesDataInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IngestNodesData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.IoT.IngestNodesDataOutput IngestNodesData(global::SKF.Enlight.API.IoT.IngestNodesDataInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IngestNodesData, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.IngestNodesDataOutput> IngestNodesDataAsync(global::SKF.Enlight.API.IoT.IngestNodesDataInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IngestNodesDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.IngestNodesDataOutput> IngestNodesDataAsync(global::SKF.Enlight.API.IoT.IngestNodesDataInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IngestNodesData, null, options, request);
      }
      public virtual global::SKF.Enlight.API.IoT.IngestNodeDataOutput IngestNodeData(global::SKF.Enlight.API.IoT.IngestNodeDataInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IngestNodeData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.IoT.IngestNodeDataOutput IngestNodeData(global::SKF.Enlight.API.IoT.IngestNodeDataInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IngestNodeData, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.IngestNodeDataOutput> IngestNodeDataAsync(global::SKF.Enlight.API.IoT.IngestNodeDataInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IngestNodeDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.IngestNodeDataOutput> IngestNodeDataAsync(global::SKF.Enlight.API.IoT.IngestNodeDataInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IngestNodeData, null, options, request);
      }
      public virtual global::SKF.Enlight.API.IoT.GetLatestNodeDataOutput GetLatestNodeData(global::SKF.Enlight.API.IoT.GetLatestNodeDataInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLatestNodeData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.IoT.GetLatestNodeDataOutput GetLatestNodeData(global::SKF.Enlight.API.IoT.GetLatestNodeDataInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLatestNodeData, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.GetLatestNodeDataOutput> GetLatestNodeDataAsync(global::SKF.Enlight.API.IoT.GetLatestNodeDataInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLatestNodeDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.GetLatestNodeDataOutput> GetLatestNodeDataAsync(global::SKF.Enlight.API.IoT.GetLatestNodeDataInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLatestNodeData, null, options, request);
      }
      public virtual global::SKF.Enlight.API.IoT.GetNodeDataOutput GetNodeData(global::SKF.Enlight.API.IoT.GetNodeDataInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.IoT.GetNodeDataOutput GetNodeData(global::SKF.Enlight.API.IoT.GetNodeDataInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNodeData, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.GetNodeDataOutput> GetNodeDataAsync(global::SKF.Enlight.API.IoT.GetNodeDataInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.GetNodeDataOutput> GetNodeDataAsync(global::SKF.Enlight.API.IoT.GetNodeDataInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNodeData, null, options, request);
      }
      public virtual global::SKF.Enlight.API.Common.Void DeleteNodeData(global::SKF.Enlight.API.IoT.DeleteNodeDataInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNodeData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.Common.Void DeleteNodeData(global::SKF.Enlight.API.IoT.DeleteNodeDataInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteNodeData, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> DeleteNodeDataAsync(global::SKF.Enlight.API.IoT.DeleteNodeDataInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNodeDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.Common.Void> DeleteNodeDataAsync(global::SKF.Enlight.API.IoT.DeleteNodeDataInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteNodeData, null, options, request);
      }
      public virtual global::SKF.Enlight.API.IoT.GetNodeEventLogOutput GetNodeEventLog(global::SKF.Enlight.API.IoT.GetNodeEventLogInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeEventLog(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.IoT.GetNodeEventLogOutput GetNodeEventLog(global::SKF.Enlight.API.IoT.GetNodeEventLogInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNodeEventLog, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.GetNodeEventLogOutput> GetNodeEventLogAsync(global::SKF.Enlight.API.IoT.GetNodeEventLogInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeEventLogAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.GetNodeEventLogOutput> GetNodeEventLogAsync(global::SKF.Enlight.API.IoT.GetNodeEventLogInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNodeEventLog, null, options, request);
      }
      public virtual global::SKF.Enlight.API.IoT.GetMediaOutput GetMedia(global::SKF.Enlight.API.IoT.GetMediaInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMedia(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.IoT.GetMediaOutput GetMedia(global::SKF.Enlight.API.IoT.GetMediaInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMedia, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.GetMediaOutput> GetMediaAsync(global::SKF.Enlight.API.IoT.GetMediaInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMediaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.GetMediaOutput> GetMediaAsync(global::SKF.Enlight.API.IoT.GetMediaInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMedia, null, options, request);
      }
      public virtual global::SKF.Enlight.API.IoT.GetMediaSignedUrlOutput RequestGetMediaSignedUrl(global::SKF.Enlight.API.IoT.GetMediaSignedUrlInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestGetMediaSignedUrl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.IoT.GetMediaSignedUrlOutput RequestGetMediaSignedUrl(global::SKF.Enlight.API.IoT.GetMediaSignedUrlInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestGetMediaSignedUrl, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.GetMediaSignedUrlOutput> RequestGetMediaSignedUrlAsync(global::SKF.Enlight.API.IoT.GetMediaSignedUrlInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestGetMediaSignedUrlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.GetMediaSignedUrlOutput> RequestGetMediaSignedUrlAsync(global::SKF.Enlight.API.IoT.GetMediaSignedUrlInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestGetMediaSignedUrl, null, options, request);
      }
      public virtual global::SKF.Enlight.API.IoT.PutMediaSignedUrlOutput RequestPutMediaSignedUrl(global::SKF.Enlight.API.IoT.PutMediaSignedUrlInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestPutMediaSignedUrl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SKF.Enlight.API.IoT.PutMediaSignedUrlOutput RequestPutMediaSignedUrl(global::SKF.Enlight.API.IoT.PutMediaSignedUrlInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestPutMediaSignedUrl, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.PutMediaSignedUrlOutput> RequestPutMediaSignedUrlAsync(global::SKF.Enlight.API.IoT.PutMediaSignedUrlInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestPutMediaSignedUrlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SKF.Enlight.API.IoT.PutMediaSignedUrlOutput> RequestPutMediaSignedUrlAsync(global::SKF.Enlight.API.IoT.PutMediaSignedUrlInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestPutMediaSignedUrl, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override IoTClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new IoTClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(IoTBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DeepPing, serviceImpl.DeepPing)
          .AddMethod(__Method_CreateTask, serviceImpl.CreateTask)
          .AddMethod(__Method_GetAllTasks, serviceImpl.GetAllTasks)
          .AddMethod(__Method_GetUncompletedTasks, serviceImpl.GetUncompletedTasks)
          .AddMethod(__Method_SetTaskCompleted, serviceImpl.SetTaskCompleted)
          .AddMethod(__Method_DeleteTask, serviceImpl.DeleteTask)
          .AddMethod(__Method_GetUncompletedTasksByHierarchy, serviceImpl.GetUncompletedTasksByHierarchy)
          .AddMethod(__Method_SetTaskStatus, serviceImpl.SetTaskStatus)
          .AddMethod(__Method_GetTaskStream, serviceImpl.GetTaskStream)
          .AddMethod(__Method_GetTasksByStatus, serviceImpl.GetTasksByStatus)
          .AddMethod(__Method_GetTaskByUUID, serviceImpl.GetTaskByUUID)
          .AddMethod(__Method_GetTaskByLongId, serviceImpl.GetTaskByLongId)
          .AddMethod(__Method_GetTasksModifiedSinceTimestamp, serviceImpl.GetTasksModifiedSinceTimestamp)
          .AddMethod(__Method_IngestNodesData, serviceImpl.IngestNodesData)
          .AddMethod(__Method_IngestNodeData, serviceImpl.IngestNodeData)
          .AddMethod(__Method_GetLatestNodeData, serviceImpl.GetLatestNodeData)
          .AddMethod(__Method_GetNodeData, serviceImpl.GetNodeData)
          .AddMethod(__Method_DeleteNodeData, serviceImpl.DeleteNodeData)
          .AddMethod(__Method_GetNodeEventLog, serviceImpl.GetNodeEventLog)
          .AddMethod(__Method_GetMedia, serviceImpl.GetMedia)
          .AddMethod(__Method_RequestGetMediaSignedUrl, serviceImpl.RequestGetMediaSignedUrl)
          .AddMethod(__Method_RequestPutMediaSignedUrl, serviceImpl.RequestPutMediaSignedUrl).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, IoTBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_DeepPing, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Common.Void, global::SKF.Enlight.API.Common.PrimitiveString>(serviceImpl.DeepPing));
      serviceBinder.AddMethod(__Method_CreateTask, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.IoT.InitialTaskDescription, global::SKF.Enlight.API.Common.PrimitiveString>(serviceImpl.CreateTask));
      serviceBinder.AddMethod(__Method_GetAllTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Common.PrimitiveString, global::SKF.Enlight.API.IoT.TaskDescriptions>(serviceImpl.GetAllTasks));
      serviceBinder.AddMethod(__Method_GetUncompletedTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Common.PrimitiveString, global::SKF.Enlight.API.IoT.TaskDescriptions>(serviceImpl.GetUncompletedTasks));
      serviceBinder.AddMethod(__Method_SetTaskCompleted, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.IoT.TaskUser, global::SKF.Enlight.API.Common.Void>(serviceImpl.SetTaskCompleted));
      serviceBinder.AddMethod(__Method_DeleteTask, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.IoT.TaskUser, global::SKF.Enlight.API.Common.Void>(serviceImpl.DeleteTask));
      serviceBinder.AddMethod(__Method_GetUncompletedTasksByHierarchy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.Common.PrimitiveString, global::SKF.Enlight.API.IoT.TaskDescriptions>(serviceImpl.GetUncompletedTasksByHierarchy));
      serviceBinder.AddMethod(__Method_SetTaskStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.IoT.SetTaskStatusInput, global::SKF.Enlight.API.Common.Void>(serviceImpl.SetTaskStatus));
      serviceBinder.AddMethod(__Method_GetTaskStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::SKF.Enlight.API.IoT.GetTaskStreamInput, global::SKF.Enlight.API.IoT.GetTaskStreamOutput>(serviceImpl.GetTaskStream));
      serviceBinder.AddMethod(__Method_GetTasksByStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.IoT.GetTasksByStatusInput, global::SKF.Enlight.API.IoT.GetTasksByStatusOutput>(serviceImpl.GetTasksByStatus));
      serviceBinder.AddMethod(__Method_GetTaskByUUID, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.IoT.GetTaskByUUIDInput, global::SKF.Enlight.API.IoT.GetTaskByUUIDOutput>(serviceImpl.GetTaskByUUID));
      serviceBinder.AddMethod(__Method_GetTaskByLongId, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.IoT.GetTaskByLongIdInput, global::SKF.Enlight.API.IoT.GetTaskByLongIdOutput>(serviceImpl.GetTaskByLongId));
      serviceBinder.AddMethod(__Method_GetTasksModifiedSinceTimestamp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampInput, global::SKF.Enlight.API.IoT.GetTasksModifiedSinceTimestampOutput>(serviceImpl.GetTasksModifiedSinceTimestamp));
      serviceBinder.AddMethod(__Method_IngestNodesData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.IoT.IngestNodesDataInput, global::SKF.Enlight.API.IoT.IngestNodesDataOutput>(serviceImpl.IngestNodesData));
      serviceBinder.AddMethod(__Method_IngestNodeData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.IoT.IngestNodeDataInput, global::SKF.Enlight.API.IoT.IngestNodeDataOutput>(serviceImpl.IngestNodeData));
      serviceBinder.AddMethod(__Method_GetLatestNodeData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.IoT.GetLatestNodeDataInput, global::SKF.Enlight.API.IoT.GetLatestNodeDataOutput>(serviceImpl.GetLatestNodeData));
      serviceBinder.AddMethod(__Method_GetNodeData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.IoT.GetNodeDataInput, global::SKF.Enlight.API.IoT.GetNodeDataOutput>(serviceImpl.GetNodeData));
      serviceBinder.AddMethod(__Method_DeleteNodeData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.IoT.DeleteNodeDataInput, global::SKF.Enlight.API.Common.Void>(serviceImpl.DeleteNodeData));
      serviceBinder.AddMethod(__Method_GetNodeEventLog, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.IoT.GetNodeEventLogInput, global::SKF.Enlight.API.IoT.GetNodeEventLogOutput>(serviceImpl.GetNodeEventLog));
      serviceBinder.AddMethod(__Method_GetMedia, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.IoT.GetMediaInput, global::SKF.Enlight.API.IoT.GetMediaOutput>(serviceImpl.GetMedia));
      serviceBinder.AddMethod(__Method_RequestGetMediaSignedUrl, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.IoT.GetMediaSignedUrlInput, global::SKF.Enlight.API.IoT.GetMediaSignedUrlOutput>(serviceImpl.RequestGetMediaSignedUrl));
      serviceBinder.AddMethod(__Method_RequestPutMediaSignedUrl, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SKF.Enlight.API.IoT.PutMediaSignedUrlInput, global::SKF.Enlight.API.IoT.PutMediaSignedUrlOutput>(serviceImpl.RequestPutMediaSignedUrl));
    }

  }
}
#endregion
