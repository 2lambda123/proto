// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: reports/grpcapi.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SKF.Enlight.API.Reports {

  /// <summary>Holder for reflection information generated from reports/grpcapi.proto</summary>
  public static partial class GrpcapiReflection {

    #region Descriptor
    /// <summary>File descriptor for reports/grpcapi.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GrpcapiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVyZXBvcnRzL2dycGNhcGkucHJvdG8SDnJlcG9ydHNncnBjYXBpGhNjb21t",
            "b24vY29tbW9uLnByb3RvIh8KDkRlZXBQaW5nT3V0cHV0Eg0KBXZhbHVlGAEg",
            "ASgJIiYKE0dldEFzc2V0SGVhbHRoSW5wdXQSDwoHbm9kZV9pZBgBIAEoCSIt",
            "ChRHZXRBc3NldEhlYWx0aE91dHB1dBIVCg1oZWFsdGhfc3RhdHVzGAEgASgJ",
            "IjMKIEdldEZ1bmN0aW9uYWxMb2NhdGlvbkhlYWx0aElucHV0Eg8KB25vZGVf",
            "aWQYASABKAkiOgohR2V0RnVuY3Rpb25hbExvY2F0aW9uSGVhbHRoT3V0cHV0",
            "EhUKDWhlYWx0aF9zdGF0dXMYASABKAkiKAoVR2V0Q29tcGxpYW5jZUxvZ0lu",
            "cHV0Eg8KB25vZGVfaWQYASABKAkiUQoWR2V0Q29tcGxpYW5jZUxvZ091dHB1",
            "dBI3Cg9jb21wbGlhbmNlX2xpc3QYASADKAsyHi5yZXBvcnRzZ3JwY2FwaS5D",
            "b21wbGlhbmNlSXRlbSJoCg5Db21wbGlhbmNlSXRlbRIWCg5hc3NldF9jbGFz",
            "c19pZBgBIAEoCRIUCgxpc19jb21wbGlhbnQYAiABKAgSFwoPY29tcGxpYW5j",
            "ZV9ub3RlGAMgASgJEg8KB2NyZWF0ZWQYBCABKAMiIwoPR2V0UmVwb3J0c0lu",
            "cHV0EhAKCG5vZGVfaWRzGAEgAygJIkUKEEdldFJlcG9ydHNPdXRwdXQSMQoM",
            "cmVwb3J0c19saXN0GAEgAygLMhsucmVwb3J0c2dycGNhcGkuUmVwb3J0c0l0",
            "ZW0i2gEKC1JlcG9ydHNJdGVtEh4KFmZ1bmN0aW9uYWxfbG9jYXRpb25faWQY",
            "ASABKAkSIAoYZnVuY3Rpb25hbF9sb2NhdGlvbl9uYW1lGAIgASgJEiAKGGZ1",
            "bmN0aW9uYWxfbG9jYXRpb25fcmlzaxgDIAEoARIiChpmdW5jdGlvbmFsX2xv",
            "Y2F0aW9uX2hlYWx0aBgEIAEoCRINCgVuYW1lcxgFIAMoCRINCgV1dWlkcxgG",
            "IAMoCRIlCgZhc3NldHMYByADKAsyFS5yZXBvcnRzZ3JwY2FwaS5Bc3NldCLb",
            "AQoFQXNzZXQSFgoOYXNzZXRfY2xhc3NfaWQYASABKAkSGAoQYXNzZXRfY2xh",
            "c3NfbmFtZRgCIAEoCRIYChBhc3NldF9jbGFzc19yaXNrGAMgASgBEhoKEmFz",
            "c2V0X2NsYXNzX2hlYWx0aBgEIAEoCRIkChxhc3NldF9jbGFzc19yaXNrX2xh",
            "YmVsX3NpbmNlGAUgASgDEhkKEWNvbXBsaWFuY2Vfc3RhdHVzGAYgASgJEikK",
            "BmZhdWx0cxgHIAMoCzIZLnJlcG9ydHNncnBjYXBpLkZhdWx0SXRlbSKyAgoJ",
            "RmF1bHRJdGVtEhIKCmZhdWx0X1VVSUQYASABKAkSFgoOYXNzZXRfY2xhc3Nf",
            "aWQYAiABKAkSEgoKZmF1bHRfdHlwZRgDIAEoCRIOCgZhdXRob3IYBCABKAkS",
            "DwoHY3JlYXRlZBgFIAEoAxIVCg1sYXN0X21vZGlmaWVkGAYgASgDEg8KB2lz",
            "X29wZW4YByABKAgSFAoMZmF1bHRfc3RhdHVzGAggASgJEhkKEWZhdWx0X29i",
            "c2VydmF0aW9uGAkgASgJEhAKCHNldmVyaXR5GAogASgJEhUKDWNsb3NlX2Nv",
            "bW1lbnQYCyABKAkSQgoTcmVjb21tZW5kZWRfYWN0aW9ucxgMIAMoCzIlLnJl",
            "cG9ydHNncnBjYXBpLlJlY29tbWVuZGVkQWN0aW9uSXRlbSKWAQoVUmVjb21t",
            "ZW5kZWRBY3Rpb25JdGVtEg4KBmFjdGlvbhgBIAEoCRIPCgdjcmVhdGVkGAIg",
            "ASgDEg8KB2NvbW1lbnQYAyABKAkSDwoHd29ya19pZBgEIAEoCRIVCg1sYXN0",
            "X21vZGlmaWVkGAUgASgDEhMKC2FjdGlvbl9VVUlEGAYgASgJEg4KBnN0YXR1",
            "cxgHIAEoCSJGChlHZXRDb21wbGlhbmNlU3VtbWFyeUlucHV0Eg0KBXV1aWRz",
            "GAEgAygJEg0KBXN0YXJ0GAIgASgDEgsKA2VuZBgDIAEoAyKvAQoaR2V0Q29t",
            "cGxpYW5jZVN1bW1hcnlPdXRwdXQSDQoFc3RhcnQYASABKAMSCwoDZW5kGAIg",
            "ASgDEjAKDHN0YXR1c19ub3RlcxgDIAMoCzIaLnJlcG9ydHNncnBjYXBpLlN0",
            "YXR1c05vdGUSJwoHc3lzdGVtcxgEIAMoCzIWLnJlcG9ydHNncnBjYXBpLlN5",
            "c3RlbRIaChJ0aW1lX25vbl9jb21wbGlhbnQYBSADKAMiKwoKU3RhdHVzTm90",
            "ZRIOCgZyZWFzb24YASABKAkSDQoFY291bnQYAiABKAMiZwoGU3lzdGVtEg8K",
            "B2FyZWFfaWQYASABKAkSEQoJYXJlYV9uYW1lGAIgASgJEhEKCWNvbXBsaWFu",
            "dBgDIAEoAxIVCg1ub25fY29tcGxpYW50GAQgASgDEg8KB292ZXJkdWUYBSAB",
            "KAMy1AQKB1JlcG9ydHMSOgoIRGVlcFBpbmcSDC5jb21tb24uVm9pZBoeLnJl",
            "cG9ydHNncnBjYXBpLkRlZXBQaW5nT3V0cHV0IgASXQoOR2V0QXNzZXRIZWFs",
            "dGgSIy5yZXBvcnRzZ3JwY2FwaS5HZXRBc3NldEhlYWx0aElucHV0GiQucmVw",
            "b3J0c2dycGNhcGkuR2V0QXNzZXRIZWFsdGhPdXRwdXQiABKEAQobR2V0RnVu",
            "Y3Rpb25hbExvY2F0aW9uSGVhbHRoEjAucmVwb3J0c2dycGNhcGkuR2V0RnVu",
            "Y3Rpb25hbExvY2F0aW9uSGVhbHRoSW5wdXQaMS5yZXBvcnRzZ3JwY2FwaS5H",
            "ZXRGdW5jdGlvbmFsTG9jYXRpb25IZWFsdGhPdXRwdXQiABJjChBHZXRDb21w",
            "bGlhbmNlTG9nEiUucmVwb3J0c2dycGNhcGkuR2V0Q29tcGxpYW5jZUxvZ0lu",
            "cHV0GiYucmVwb3J0c2dycGNhcGkuR2V0Q29tcGxpYW5jZUxvZ091dHB1dCIA",
            "ElEKCkdldFJlcG9ydHMSHy5yZXBvcnRzZ3JwY2FwaS5HZXRSZXBvcnRzSW5w",
            "dXQaIC5yZXBvcnRzZ3JwY2FwaS5HZXRSZXBvcnRzT3V0cHV0IgASbwoUR2V0",
            "Q29tcGxpYW5jZVN1bW1hcnkSKS5yZXBvcnRzZ3JwY2FwaS5HZXRDb21wbGlh",
            "bmNlU3VtbWFyeUlucHV0GioucmVwb3J0c2dycGNhcGkuR2V0Q29tcGxpYW5j",
            "ZVN1bW1hcnlPdXRwdXQiAEIaqgIXU0tGLkVubGlnaHQuQVBJLlJlcG9ydHNi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SKF.Enlight.API.Common.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Reports.DeepPingOutput), global::SKF.Enlight.API.Reports.DeepPingOutput.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Reports.GetAssetHealthInput), global::SKF.Enlight.API.Reports.GetAssetHealthInput.Parser, new[]{ "NodeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Reports.GetAssetHealthOutput), global::SKF.Enlight.API.Reports.GetAssetHealthOutput.Parser, new[]{ "HealthStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Reports.GetFunctionalLocationHealthInput), global::SKF.Enlight.API.Reports.GetFunctionalLocationHealthInput.Parser, new[]{ "NodeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Reports.GetFunctionalLocationHealthOutput), global::SKF.Enlight.API.Reports.GetFunctionalLocationHealthOutput.Parser, new[]{ "HealthStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Reports.GetComplianceLogInput), global::SKF.Enlight.API.Reports.GetComplianceLogInput.Parser, new[]{ "NodeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Reports.GetComplianceLogOutput), global::SKF.Enlight.API.Reports.GetComplianceLogOutput.Parser, new[]{ "ComplianceList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Reports.ComplianceItem), global::SKF.Enlight.API.Reports.ComplianceItem.Parser, new[]{ "AssetClassId", "IsCompliant", "ComplianceNote", "Created" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Reports.GetReportsInput), global::SKF.Enlight.API.Reports.GetReportsInput.Parser, new[]{ "NodeIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Reports.GetReportsOutput), global::SKF.Enlight.API.Reports.GetReportsOutput.Parser, new[]{ "ReportsList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Reports.ReportsItem), global::SKF.Enlight.API.Reports.ReportsItem.Parser, new[]{ "FunctionalLocationId", "FunctionalLocationName", "FunctionalLocationRisk", "FunctionalLocationHealth", "Names", "Uuids", "Assets" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Reports.Asset), global::SKF.Enlight.API.Reports.Asset.Parser, new[]{ "AssetClassId", "AssetClassName", "AssetClassRisk", "AssetClassHealth", "AssetClassRiskLabelSince", "ComplianceStatus", "Faults" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Reports.FaultItem), global::SKF.Enlight.API.Reports.FaultItem.Parser, new[]{ "FaultUUID", "AssetClassId", "FaultType", "Author", "Created", "LastModified", "IsOpen", "FaultStatus", "FaultObservation", "Severity", "CloseComment", "RecommendedActions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Reports.RecommendedActionItem), global::SKF.Enlight.API.Reports.RecommendedActionItem.Parser, new[]{ "Action", "Created", "Comment", "WorkId", "LastModified", "ActionUUID", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Reports.GetComplianceSummaryInput), global::SKF.Enlight.API.Reports.GetComplianceSummaryInput.Parser, new[]{ "Uuids", "Start", "End" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Reports.GetComplianceSummaryOutput), global::SKF.Enlight.API.Reports.GetComplianceSummaryOutput.Parser, new[]{ "Start", "End", "StatusNotes", "Systems", "TimeNonCompliant" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Reports.StatusNote), global::SKF.Enlight.API.Reports.StatusNote.Parser, new[]{ "Reason", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Reports.System), global::SKF.Enlight.API.Reports.System.Parser, new[]{ "AreaId", "AreaName", "Compliant", "NonCompliant", "Overdue" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DeepPingOutput : pb::IMessage<DeepPingOutput> {
    private static readonly pb::MessageParser<DeepPingOutput> _parser = new pb::MessageParser<DeepPingOutput>(() => new DeepPingOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeepPingOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Reports.GrpcapiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeepPingOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeepPingOutput(DeepPingOutput other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeepPingOutput Clone() {
      return new DeepPingOutput(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeepPingOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeepPingOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeepPingOutput other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Return asset health for the requested asset node
  /// </summary>
  public sealed partial class GetAssetHealthInput : pb::IMessage<GetAssetHealthInput> {
    private static readonly pb::MessageParser<GetAssetHealthInput> _parser = new pb::MessageParser<GetAssetHealthInput>(() => new GetAssetHealthInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAssetHealthInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Reports.GrpcapiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAssetHealthInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAssetHealthInput(GetAssetHealthInput other) : this() {
      nodeId_ = other.nodeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAssetHealthInput Clone() {
      return new GetAssetHealthInput(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private string nodeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAssetHealthInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAssetHealthInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId.Length != 0) hash ^= NodeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAssetHealthInput other) {
      if (other == null) {
        return;
      }
      if (other.NodeId.Length != 0) {
        NodeId = other.NodeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAssetHealthOutput : pb::IMessage<GetAssetHealthOutput> {
    private static readonly pb::MessageParser<GetAssetHealthOutput> _parser = new pb::MessageParser<GetAssetHealthOutput>(() => new GetAssetHealthOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAssetHealthOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Reports.GrpcapiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAssetHealthOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAssetHealthOutput(GetAssetHealthOutput other) : this() {
      healthStatus_ = other.healthStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAssetHealthOutput Clone() {
      return new GetAssetHealthOutput(this);
    }

    /// <summary>Field number for the "health_status" field.</summary>
    public const int HealthStatusFieldNumber = 1;
    private string healthStatus_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HealthStatus {
      get { return healthStatus_; }
      set {
        healthStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAssetHealthOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAssetHealthOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HealthStatus != other.HealthStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HealthStatus.Length != 0) hash ^= HealthStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HealthStatus.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HealthStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HealthStatus.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HealthStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAssetHealthOutput other) {
      if (other == null) {
        return;
      }
      if (other.HealthStatus.Length != 0) {
        HealthStatus = other.HealthStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HealthStatus = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Return functional location health for requested functional location node
  /// </summary>
  public sealed partial class GetFunctionalLocationHealthInput : pb::IMessage<GetFunctionalLocationHealthInput> {
    private static readonly pb::MessageParser<GetFunctionalLocationHealthInput> _parser = new pb::MessageParser<GetFunctionalLocationHealthInput>(() => new GetFunctionalLocationHealthInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetFunctionalLocationHealthInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Reports.GrpcapiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFunctionalLocationHealthInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFunctionalLocationHealthInput(GetFunctionalLocationHealthInput other) : this() {
      nodeId_ = other.nodeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFunctionalLocationHealthInput Clone() {
      return new GetFunctionalLocationHealthInput(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private string nodeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetFunctionalLocationHealthInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetFunctionalLocationHealthInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId.Length != 0) hash ^= NodeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetFunctionalLocationHealthInput other) {
      if (other == null) {
        return;
      }
      if (other.NodeId.Length != 0) {
        NodeId = other.NodeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetFunctionalLocationHealthOutput : pb::IMessage<GetFunctionalLocationHealthOutput> {
    private static readonly pb::MessageParser<GetFunctionalLocationHealthOutput> _parser = new pb::MessageParser<GetFunctionalLocationHealthOutput>(() => new GetFunctionalLocationHealthOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetFunctionalLocationHealthOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Reports.GrpcapiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFunctionalLocationHealthOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFunctionalLocationHealthOutput(GetFunctionalLocationHealthOutput other) : this() {
      healthStatus_ = other.healthStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFunctionalLocationHealthOutput Clone() {
      return new GetFunctionalLocationHealthOutput(this);
    }

    /// <summary>Field number for the "health_status" field.</summary>
    public const int HealthStatusFieldNumber = 1;
    private string healthStatus_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HealthStatus {
      get { return healthStatus_; }
      set {
        healthStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetFunctionalLocationHealthOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetFunctionalLocationHealthOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HealthStatus != other.HealthStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HealthStatus.Length != 0) hash ^= HealthStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HealthStatus.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HealthStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HealthStatus.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HealthStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetFunctionalLocationHealthOutput other) {
      if (other == null) {
        return;
      }
      if (other.HealthStatus.Length != 0) {
        HealthStatus = other.HealthStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HealthStatus = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Return the compliance log for the supplied hierarchy node
  /// </summary>
  public sealed partial class GetComplianceLogInput : pb::IMessage<GetComplianceLogInput> {
    private static readonly pb::MessageParser<GetComplianceLogInput> _parser = new pb::MessageParser<GetComplianceLogInput>(() => new GetComplianceLogInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetComplianceLogInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Reports.GrpcapiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetComplianceLogInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetComplianceLogInput(GetComplianceLogInput other) : this() {
      nodeId_ = other.nodeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetComplianceLogInput Clone() {
      return new GetComplianceLogInput(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private string nodeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetComplianceLogInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetComplianceLogInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId.Length != 0) hash ^= NodeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetComplianceLogInput other) {
      if (other == null) {
        return;
      }
      if (other.NodeId.Length != 0) {
        NodeId = other.NodeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetComplianceLogOutput : pb::IMessage<GetComplianceLogOutput> {
    private static readonly pb::MessageParser<GetComplianceLogOutput> _parser = new pb::MessageParser<GetComplianceLogOutput>(() => new GetComplianceLogOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetComplianceLogOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Reports.GrpcapiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetComplianceLogOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetComplianceLogOutput(GetComplianceLogOutput other) : this() {
      complianceList_ = other.complianceList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetComplianceLogOutput Clone() {
      return new GetComplianceLogOutput(this);
    }

    /// <summary>Field number for the "compliance_list" field.</summary>
    public const int ComplianceListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SKF.Enlight.API.Reports.ComplianceItem> _repeated_complianceList_codec
        = pb::FieldCodec.ForMessage(10, global::SKF.Enlight.API.Reports.ComplianceItem.Parser);
    private readonly pbc::RepeatedField<global::SKF.Enlight.API.Reports.ComplianceItem> complianceList_ = new pbc::RepeatedField<global::SKF.Enlight.API.Reports.ComplianceItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SKF.Enlight.API.Reports.ComplianceItem> ComplianceList {
      get { return complianceList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetComplianceLogOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetComplianceLogOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!complianceList_.Equals(other.complianceList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= complianceList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      complianceList_.WriteTo(output, _repeated_complianceList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += complianceList_.CalculateSize(_repeated_complianceList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetComplianceLogOutput other) {
      if (other == null) {
        return;
      }
      complianceList_.Add(other.complianceList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            complianceList_.AddEntriesFrom(input, _repeated_complianceList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComplianceItem : pb::IMessage<ComplianceItem> {
    private static readonly pb::MessageParser<ComplianceItem> _parser = new pb::MessageParser<ComplianceItem>(() => new ComplianceItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComplianceItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Reports.GrpcapiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceItem(ComplianceItem other) : this() {
      assetClassId_ = other.assetClassId_;
      isCompliant_ = other.isCompliant_;
      complianceNote_ = other.complianceNote_;
      created_ = other.created_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceItem Clone() {
      return new ComplianceItem(this);
    }

    /// <summary>Field number for the "asset_class_id" field.</summary>
    public const int AssetClassIdFieldNumber = 1;
    private string assetClassId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetClassId {
      get { return assetClassId_; }
      set {
        assetClassId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_compliant" field.</summary>
    public const int IsCompliantFieldNumber = 2;
    private bool isCompliant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCompliant {
      get { return isCompliant_; }
      set {
        isCompliant_ = value;
      }
    }

    /// <summary>Field number for the "compliance_note" field.</summary>
    public const int ComplianceNoteFieldNumber = 3;
    private string complianceNote_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ComplianceNote {
      get { return complianceNote_; }
      set {
        complianceNote_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 4;
    private long created_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComplianceItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComplianceItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssetClassId != other.AssetClassId) return false;
      if (IsCompliant != other.IsCompliant) return false;
      if (ComplianceNote != other.ComplianceNote) return false;
      if (Created != other.Created) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssetClassId.Length != 0) hash ^= AssetClassId.GetHashCode();
      if (IsCompliant != false) hash ^= IsCompliant.GetHashCode();
      if (ComplianceNote.Length != 0) hash ^= ComplianceNote.GetHashCode();
      if (Created != 0L) hash ^= Created.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AssetClassId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AssetClassId);
      }
      if (IsCompliant != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsCompliant);
      }
      if (ComplianceNote.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ComplianceNote);
      }
      if (Created != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Created);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssetClassId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetClassId);
      }
      if (IsCompliant != false) {
        size += 1 + 1;
      }
      if (ComplianceNote.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ComplianceNote);
      }
      if (Created != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Created);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComplianceItem other) {
      if (other == null) {
        return;
      }
      if (other.AssetClassId.Length != 0) {
        AssetClassId = other.AssetClassId;
      }
      if (other.IsCompliant != false) {
        IsCompliant = other.IsCompliant;
      }
      if (other.ComplianceNote.Length != 0) {
        ComplianceNote = other.ComplianceNote;
      }
      if (other.Created != 0L) {
        Created = other.Created;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AssetClassId = input.ReadString();
            break;
          }
          case 16: {
            IsCompliant = input.ReadBool();
            break;
          }
          case 26: {
            ComplianceNote = input.ReadString();
            break;
          }
          case 32: {
            Created = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Return list of functional locations with their faults for the supplied list of hierarchy nodes
  /// </summary>
  public sealed partial class GetReportsInput : pb::IMessage<GetReportsInput> {
    private static readonly pb::MessageParser<GetReportsInput> _parser = new pb::MessageParser<GetReportsInput>(() => new GetReportsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetReportsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Reports.GrpcapiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReportsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReportsInput(GetReportsInput other) : this() {
      nodeIds_ = other.nodeIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReportsInput Clone() {
      return new GetReportsInput(this);
    }

    /// <summary>Field number for the "node_ids" field.</summary>
    public const int NodeIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_nodeIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> nodeIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NodeIds {
      get { return nodeIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetReportsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetReportsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodeIds_.Equals(other.nodeIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodeIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodeIds_.WriteTo(output, _repeated_nodeIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodeIds_.CalculateSize(_repeated_nodeIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetReportsInput other) {
      if (other == null) {
        return;
      }
      nodeIds_.Add(other.nodeIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            nodeIds_.AddEntriesFrom(input, _repeated_nodeIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetReportsOutput : pb::IMessage<GetReportsOutput> {
    private static readonly pb::MessageParser<GetReportsOutput> _parser = new pb::MessageParser<GetReportsOutput>(() => new GetReportsOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetReportsOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Reports.GrpcapiReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReportsOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReportsOutput(GetReportsOutput other) : this() {
      reportsList_ = other.reportsList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReportsOutput Clone() {
      return new GetReportsOutput(this);
    }

    /// <summary>Field number for the "reports_list" field.</summary>
    public const int ReportsListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SKF.Enlight.API.Reports.ReportsItem> _repeated_reportsList_codec
        = pb::FieldCodec.ForMessage(10, global::SKF.Enlight.API.Reports.ReportsItem.Parser);
    private readonly pbc::RepeatedField<global::SKF.Enlight.API.Reports.ReportsItem> reportsList_ = new pbc::RepeatedField<global::SKF.Enlight.API.Reports.ReportsItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SKF.Enlight.API.Reports.ReportsItem> ReportsList {
      get { return reportsList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetReportsOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetReportsOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!reportsList_.Equals(other.reportsList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= reportsList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      reportsList_.WriteTo(output, _repeated_reportsList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += reportsList_.CalculateSize(_repeated_reportsList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetReportsOutput other) {
      if (other == null) {
        return;
      }
      reportsList_.Add(other.reportsList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            reportsList_.AddEntriesFrom(input, _repeated_reportsList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportsItem : pb::IMessage<ReportsItem> {
    private static readonly pb::MessageParser<ReportsItem> _parser = new pb::MessageParser<ReportsItem>(() => new ReportsItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportsItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Reports.GrpcapiReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportsItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportsItem(ReportsItem other) : this() {
      functionalLocationId_ = other.functionalLocationId_;
      functionalLocationName_ = other.functionalLocationName_;
      functionalLocationRisk_ = other.functionalLocationRisk_;
      functionalLocationHealth_ = other.functionalLocationHealth_;
      names_ = other.names_.Clone();
      uuids_ = other.uuids_.Clone();
      assets_ = other.assets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportsItem Clone() {
      return new ReportsItem(this);
    }

    /// <summary>Field number for the "functional_location_id" field.</summary>
    public const int FunctionalLocationIdFieldNumber = 1;
    private string functionalLocationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FunctionalLocationId {
      get { return functionalLocationId_; }
      set {
        functionalLocationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "functional_location_name" field.</summary>
    public const int FunctionalLocationNameFieldNumber = 2;
    private string functionalLocationName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FunctionalLocationName {
      get { return functionalLocationName_; }
      set {
        functionalLocationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "functional_location_risk" field.</summary>
    public const int FunctionalLocationRiskFieldNumber = 3;
    private double functionalLocationRisk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FunctionalLocationRisk {
      get { return functionalLocationRisk_; }
      set {
        functionalLocationRisk_ = value;
      }
    }

    /// <summary>Field number for the "functional_location_health" field.</summary>
    public const int FunctionalLocationHealthFieldNumber = 4;
    private string functionalLocationHealth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FunctionalLocationHealth {
      get { return functionalLocationHealth_; }
      set {
        functionalLocationHealth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "names" field.</summary>
    public const int NamesFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_names_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> names_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Names {
      get { return names_; }
    }

    /// <summary>Field number for the "uuids" field.</summary>
    public const int UuidsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_uuids_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> uuids_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Uuids {
      get { return uuids_; }
    }

    /// <summary>Field number for the "assets" field.</summary>
    public const int AssetsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::SKF.Enlight.API.Reports.Asset> _repeated_assets_codec
        = pb::FieldCodec.ForMessage(58, global::SKF.Enlight.API.Reports.Asset.Parser);
    private readonly pbc::RepeatedField<global::SKF.Enlight.API.Reports.Asset> assets_ = new pbc::RepeatedField<global::SKF.Enlight.API.Reports.Asset>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SKF.Enlight.API.Reports.Asset> Assets {
      get { return assets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportsItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportsItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FunctionalLocationId != other.FunctionalLocationId) return false;
      if (FunctionalLocationName != other.FunctionalLocationName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FunctionalLocationRisk, other.FunctionalLocationRisk)) return false;
      if (FunctionalLocationHealth != other.FunctionalLocationHealth) return false;
      if(!names_.Equals(other.names_)) return false;
      if(!uuids_.Equals(other.uuids_)) return false;
      if(!assets_.Equals(other.assets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FunctionalLocationId.Length != 0) hash ^= FunctionalLocationId.GetHashCode();
      if (FunctionalLocationName.Length != 0) hash ^= FunctionalLocationName.GetHashCode();
      if (FunctionalLocationRisk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FunctionalLocationRisk);
      if (FunctionalLocationHealth.Length != 0) hash ^= FunctionalLocationHealth.GetHashCode();
      hash ^= names_.GetHashCode();
      hash ^= uuids_.GetHashCode();
      hash ^= assets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FunctionalLocationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FunctionalLocationId);
      }
      if (FunctionalLocationName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FunctionalLocationName);
      }
      if (FunctionalLocationRisk != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(FunctionalLocationRisk);
      }
      if (FunctionalLocationHealth.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FunctionalLocationHealth);
      }
      names_.WriteTo(output, _repeated_names_codec);
      uuids_.WriteTo(output, _repeated_uuids_codec);
      assets_.WriteTo(output, _repeated_assets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FunctionalLocationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FunctionalLocationId);
      }
      if (FunctionalLocationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FunctionalLocationName);
      }
      if (FunctionalLocationRisk != 0D) {
        size += 1 + 8;
      }
      if (FunctionalLocationHealth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FunctionalLocationHealth);
      }
      size += names_.CalculateSize(_repeated_names_codec);
      size += uuids_.CalculateSize(_repeated_uuids_codec);
      size += assets_.CalculateSize(_repeated_assets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportsItem other) {
      if (other == null) {
        return;
      }
      if (other.FunctionalLocationId.Length != 0) {
        FunctionalLocationId = other.FunctionalLocationId;
      }
      if (other.FunctionalLocationName.Length != 0) {
        FunctionalLocationName = other.FunctionalLocationName;
      }
      if (other.FunctionalLocationRisk != 0D) {
        FunctionalLocationRisk = other.FunctionalLocationRisk;
      }
      if (other.FunctionalLocationHealth.Length != 0) {
        FunctionalLocationHealth = other.FunctionalLocationHealth;
      }
      names_.Add(other.names_);
      uuids_.Add(other.uuids_);
      assets_.Add(other.assets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FunctionalLocationId = input.ReadString();
            break;
          }
          case 18: {
            FunctionalLocationName = input.ReadString();
            break;
          }
          case 25: {
            FunctionalLocationRisk = input.ReadDouble();
            break;
          }
          case 34: {
            FunctionalLocationHealth = input.ReadString();
            break;
          }
          case 42: {
            names_.AddEntriesFrom(input, _repeated_names_codec);
            break;
          }
          case 50: {
            uuids_.AddEntriesFrom(input, _repeated_uuids_codec);
            break;
          }
          case 58: {
            assets_.AddEntriesFrom(input, _repeated_assets_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Asset : pb::IMessage<Asset> {
    private static readonly pb::MessageParser<Asset> _parser = new pb::MessageParser<Asset>(() => new Asset());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Asset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Reports.GrpcapiReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset(Asset other) : this() {
      assetClassId_ = other.assetClassId_;
      assetClassName_ = other.assetClassName_;
      assetClassRisk_ = other.assetClassRisk_;
      assetClassHealth_ = other.assetClassHealth_;
      assetClassRiskLabelSince_ = other.assetClassRiskLabelSince_;
      complianceStatus_ = other.complianceStatus_;
      faults_ = other.faults_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset Clone() {
      return new Asset(this);
    }

    /// <summary>Field number for the "asset_class_id" field.</summary>
    public const int AssetClassIdFieldNumber = 1;
    private string assetClassId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetClassId {
      get { return assetClassId_; }
      set {
        assetClassId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_class_name" field.</summary>
    public const int AssetClassNameFieldNumber = 2;
    private string assetClassName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetClassName {
      get { return assetClassName_; }
      set {
        assetClassName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_class_risk" field.</summary>
    public const int AssetClassRiskFieldNumber = 3;
    private double assetClassRisk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AssetClassRisk {
      get { return assetClassRisk_; }
      set {
        assetClassRisk_ = value;
      }
    }

    /// <summary>Field number for the "asset_class_health" field.</summary>
    public const int AssetClassHealthFieldNumber = 4;
    private string assetClassHealth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetClassHealth {
      get { return assetClassHealth_; }
      set {
        assetClassHealth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_class_risk_label_since" field.</summary>
    public const int AssetClassRiskLabelSinceFieldNumber = 5;
    private long assetClassRiskLabelSince_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AssetClassRiskLabelSince {
      get { return assetClassRiskLabelSince_; }
      set {
        assetClassRiskLabelSince_ = value;
      }
    }

    /// <summary>Field number for the "compliance_status" field.</summary>
    public const int ComplianceStatusFieldNumber = 6;
    private string complianceStatus_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ComplianceStatus {
      get { return complianceStatus_; }
      set {
        complianceStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "faults" field.</summary>
    public const int FaultsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::SKF.Enlight.API.Reports.FaultItem> _repeated_faults_codec
        = pb::FieldCodec.ForMessage(58, global::SKF.Enlight.API.Reports.FaultItem.Parser);
    private readonly pbc::RepeatedField<global::SKF.Enlight.API.Reports.FaultItem> faults_ = new pbc::RepeatedField<global::SKF.Enlight.API.Reports.FaultItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SKF.Enlight.API.Reports.FaultItem> Faults {
      get { return faults_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Asset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Asset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssetClassId != other.AssetClassId) return false;
      if (AssetClassName != other.AssetClassName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AssetClassRisk, other.AssetClassRisk)) return false;
      if (AssetClassHealth != other.AssetClassHealth) return false;
      if (AssetClassRiskLabelSince != other.AssetClassRiskLabelSince) return false;
      if (ComplianceStatus != other.ComplianceStatus) return false;
      if(!faults_.Equals(other.faults_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssetClassId.Length != 0) hash ^= AssetClassId.GetHashCode();
      if (AssetClassName.Length != 0) hash ^= AssetClassName.GetHashCode();
      if (AssetClassRisk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AssetClassRisk);
      if (AssetClassHealth.Length != 0) hash ^= AssetClassHealth.GetHashCode();
      if (AssetClassRiskLabelSince != 0L) hash ^= AssetClassRiskLabelSince.GetHashCode();
      if (ComplianceStatus.Length != 0) hash ^= ComplianceStatus.GetHashCode();
      hash ^= faults_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AssetClassId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AssetClassId);
      }
      if (AssetClassName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AssetClassName);
      }
      if (AssetClassRisk != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(AssetClassRisk);
      }
      if (AssetClassHealth.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AssetClassHealth);
      }
      if (AssetClassRiskLabelSince != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(AssetClassRiskLabelSince);
      }
      if (ComplianceStatus.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ComplianceStatus);
      }
      faults_.WriteTo(output, _repeated_faults_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssetClassId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetClassId);
      }
      if (AssetClassName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetClassName);
      }
      if (AssetClassRisk != 0D) {
        size += 1 + 8;
      }
      if (AssetClassHealth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetClassHealth);
      }
      if (AssetClassRiskLabelSince != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AssetClassRiskLabelSince);
      }
      if (ComplianceStatus.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ComplianceStatus);
      }
      size += faults_.CalculateSize(_repeated_faults_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Asset other) {
      if (other == null) {
        return;
      }
      if (other.AssetClassId.Length != 0) {
        AssetClassId = other.AssetClassId;
      }
      if (other.AssetClassName.Length != 0) {
        AssetClassName = other.AssetClassName;
      }
      if (other.AssetClassRisk != 0D) {
        AssetClassRisk = other.AssetClassRisk;
      }
      if (other.AssetClassHealth.Length != 0) {
        AssetClassHealth = other.AssetClassHealth;
      }
      if (other.AssetClassRiskLabelSince != 0L) {
        AssetClassRiskLabelSince = other.AssetClassRiskLabelSince;
      }
      if (other.ComplianceStatus.Length != 0) {
        ComplianceStatus = other.ComplianceStatus;
      }
      faults_.Add(other.faults_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AssetClassId = input.ReadString();
            break;
          }
          case 18: {
            AssetClassName = input.ReadString();
            break;
          }
          case 25: {
            AssetClassRisk = input.ReadDouble();
            break;
          }
          case 34: {
            AssetClassHealth = input.ReadString();
            break;
          }
          case 40: {
            AssetClassRiskLabelSince = input.ReadInt64();
            break;
          }
          case 50: {
            ComplianceStatus = input.ReadString();
            break;
          }
          case 58: {
            faults_.AddEntriesFrom(input, _repeated_faults_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FaultItem : pb::IMessage<FaultItem> {
    private static readonly pb::MessageParser<FaultItem> _parser = new pb::MessageParser<FaultItem>(() => new FaultItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FaultItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Reports.GrpcapiReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaultItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaultItem(FaultItem other) : this() {
      faultUUID_ = other.faultUUID_;
      assetClassId_ = other.assetClassId_;
      faultType_ = other.faultType_;
      author_ = other.author_;
      created_ = other.created_;
      lastModified_ = other.lastModified_;
      isOpen_ = other.isOpen_;
      faultStatus_ = other.faultStatus_;
      faultObservation_ = other.faultObservation_;
      severity_ = other.severity_;
      closeComment_ = other.closeComment_;
      recommendedActions_ = other.recommendedActions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaultItem Clone() {
      return new FaultItem(this);
    }

    /// <summary>Field number for the "fault_UUID" field.</summary>
    public const int FaultUUIDFieldNumber = 1;
    private string faultUUID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FaultUUID {
      get { return faultUUID_; }
      set {
        faultUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_class_id" field.</summary>
    public const int AssetClassIdFieldNumber = 2;
    private string assetClassId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetClassId {
      get { return assetClassId_; }
      set {
        assetClassId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fault_type" field.</summary>
    public const int FaultTypeFieldNumber = 3;
    private string faultType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FaultType {
      get { return faultType_; }
      set {
        faultType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 4;
    private string author_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Author {
      get { return author_; }
      set {
        author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 5;
    private long created_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "last_modified" field.</summary>
    public const int LastModifiedFieldNumber = 6;
    private long lastModified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastModified {
      get { return lastModified_; }
      set {
        lastModified_ = value;
      }
    }

    /// <summary>Field number for the "is_open" field.</summary>
    public const int IsOpenFieldNumber = 7;
    private bool isOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    /// <summary>Field number for the "fault_status" field.</summary>
    public const int FaultStatusFieldNumber = 8;
    private string faultStatus_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FaultStatus {
      get { return faultStatus_; }
      set {
        faultStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fault_observation" field.</summary>
    public const int FaultObservationFieldNumber = 9;
    private string faultObservation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FaultObservation {
      get { return faultObservation_; }
      set {
        faultObservation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "severity" field.</summary>
    public const int SeverityFieldNumber = 10;
    private string severity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Severity {
      get { return severity_; }
      set {
        severity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "close_comment" field.</summary>
    public const int CloseCommentFieldNumber = 11;
    private string closeComment_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloseComment {
      get { return closeComment_; }
      set {
        closeComment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recommended_actions" field.</summary>
    public const int RecommendedActionsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::SKF.Enlight.API.Reports.RecommendedActionItem> _repeated_recommendedActions_codec
        = pb::FieldCodec.ForMessage(98, global::SKF.Enlight.API.Reports.RecommendedActionItem.Parser);
    private readonly pbc::RepeatedField<global::SKF.Enlight.API.Reports.RecommendedActionItem> recommendedActions_ = new pbc::RepeatedField<global::SKF.Enlight.API.Reports.RecommendedActionItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SKF.Enlight.API.Reports.RecommendedActionItem> RecommendedActions {
      get { return recommendedActions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FaultItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FaultItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FaultUUID != other.FaultUUID) return false;
      if (AssetClassId != other.AssetClassId) return false;
      if (FaultType != other.FaultType) return false;
      if (Author != other.Author) return false;
      if (Created != other.Created) return false;
      if (LastModified != other.LastModified) return false;
      if (IsOpen != other.IsOpen) return false;
      if (FaultStatus != other.FaultStatus) return false;
      if (FaultObservation != other.FaultObservation) return false;
      if (Severity != other.Severity) return false;
      if (CloseComment != other.CloseComment) return false;
      if(!recommendedActions_.Equals(other.recommendedActions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FaultUUID.Length != 0) hash ^= FaultUUID.GetHashCode();
      if (AssetClassId.Length != 0) hash ^= AssetClassId.GetHashCode();
      if (FaultType.Length != 0) hash ^= FaultType.GetHashCode();
      if (Author.Length != 0) hash ^= Author.GetHashCode();
      if (Created != 0L) hash ^= Created.GetHashCode();
      if (LastModified != 0L) hash ^= LastModified.GetHashCode();
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (FaultStatus.Length != 0) hash ^= FaultStatus.GetHashCode();
      if (FaultObservation.Length != 0) hash ^= FaultObservation.GetHashCode();
      if (Severity.Length != 0) hash ^= Severity.GetHashCode();
      if (CloseComment.Length != 0) hash ^= CloseComment.GetHashCode();
      hash ^= recommendedActions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FaultUUID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FaultUUID);
      }
      if (AssetClassId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AssetClassId);
      }
      if (FaultType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FaultType);
      }
      if (Author.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Author);
      }
      if (Created != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Created);
      }
      if (LastModified != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(LastModified);
      }
      if (IsOpen != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsOpen);
      }
      if (FaultStatus.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(FaultStatus);
      }
      if (FaultObservation.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(FaultObservation);
      }
      if (Severity.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Severity);
      }
      if (CloseComment.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CloseComment);
      }
      recommendedActions_.WriteTo(output, _repeated_recommendedActions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FaultUUID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FaultUUID);
      }
      if (AssetClassId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetClassId);
      }
      if (FaultType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FaultType);
      }
      if (Author.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Author);
      }
      if (Created != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Created);
      }
      if (LastModified != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModified);
      }
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (FaultStatus.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FaultStatus);
      }
      if (FaultObservation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FaultObservation);
      }
      if (Severity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Severity);
      }
      if (CloseComment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CloseComment);
      }
      size += recommendedActions_.CalculateSize(_repeated_recommendedActions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FaultItem other) {
      if (other == null) {
        return;
      }
      if (other.FaultUUID.Length != 0) {
        FaultUUID = other.FaultUUID;
      }
      if (other.AssetClassId.Length != 0) {
        AssetClassId = other.AssetClassId;
      }
      if (other.FaultType.Length != 0) {
        FaultType = other.FaultType;
      }
      if (other.Author.Length != 0) {
        Author = other.Author;
      }
      if (other.Created != 0L) {
        Created = other.Created;
      }
      if (other.LastModified != 0L) {
        LastModified = other.LastModified;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      if (other.FaultStatus.Length != 0) {
        FaultStatus = other.FaultStatus;
      }
      if (other.FaultObservation.Length != 0) {
        FaultObservation = other.FaultObservation;
      }
      if (other.Severity.Length != 0) {
        Severity = other.Severity;
      }
      if (other.CloseComment.Length != 0) {
        CloseComment = other.CloseComment;
      }
      recommendedActions_.Add(other.recommendedActions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FaultUUID = input.ReadString();
            break;
          }
          case 18: {
            AssetClassId = input.ReadString();
            break;
          }
          case 26: {
            FaultType = input.ReadString();
            break;
          }
          case 34: {
            Author = input.ReadString();
            break;
          }
          case 40: {
            Created = input.ReadInt64();
            break;
          }
          case 48: {
            LastModified = input.ReadInt64();
            break;
          }
          case 56: {
            IsOpen = input.ReadBool();
            break;
          }
          case 66: {
            FaultStatus = input.ReadString();
            break;
          }
          case 74: {
            FaultObservation = input.ReadString();
            break;
          }
          case 82: {
            Severity = input.ReadString();
            break;
          }
          case 90: {
            CloseComment = input.ReadString();
            break;
          }
          case 98: {
            recommendedActions_.AddEntriesFrom(input, _repeated_recommendedActions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecommendedActionItem : pb::IMessage<RecommendedActionItem> {
    private static readonly pb::MessageParser<RecommendedActionItem> _parser = new pb::MessageParser<RecommendedActionItem>(() => new RecommendedActionItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecommendedActionItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Reports.GrpcapiReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecommendedActionItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecommendedActionItem(RecommendedActionItem other) : this() {
      action_ = other.action_;
      created_ = other.created_;
      comment_ = other.comment_;
      workId_ = other.workId_;
      lastModified_ = other.lastModified_;
      actionUUID_ = other.actionUUID_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecommendedActionItem Clone() {
      return new RecommendedActionItem(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private string action_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Action {
      get { return action_; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 2;
    private long created_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 3;
    private string comment_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comment {
      get { return comment_; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "work_id" field.</summary>
    public const int WorkIdFieldNumber = 4;
    private string workId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkId {
      get { return workId_; }
      set {
        workId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_modified" field.</summary>
    public const int LastModifiedFieldNumber = 5;
    private long lastModified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastModified {
      get { return lastModified_; }
      set {
        lastModified_ = value;
      }
    }

    /// <summary>Field number for the "action_UUID" field.</summary>
    public const int ActionUUIDFieldNumber = 6;
    private string actionUUID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionUUID {
      get { return actionUUID_; }
      set {
        actionUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecommendedActionItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecommendedActionItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (Created != other.Created) return false;
      if (Comment != other.Comment) return false;
      if (WorkId != other.WorkId) return false;
      if (LastModified != other.LastModified) return false;
      if (ActionUUID != other.ActionUUID) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action.Length != 0) hash ^= Action.GetHashCode();
      if (Created != 0L) hash ^= Created.GetHashCode();
      if (Comment.Length != 0) hash ^= Comment.GetHashCode();
      if (WorkId.Length != 0) hash ^= WorkId.GetHashCode();
      if (LastModified != 0L) hash ^= LastModified.GetHashCode();
      if (ActionUUID.Length != 0) hash ^= ActionUUID.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Action);
      }
      if (Created != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Created);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Comment);
      }
      if (WorkId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WorkId);
      }
      if (LastModified != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LastModified);
      }
      if (ActionUUID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ActionUUID);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      if (Created != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Created);
      }
      if (Comment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      if (WorkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkId);
      }
      if (LastModified != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModified);
      }
      if (ActionUUID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionUUID);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecommendedActionItem other) {
      if (other == null) {
        return;
      }
      if (other.Action.Length != 0) {
        Action = other.Action;
      }
      if (other.Created != 0L) {
        Created = other.Created;
      }
      if (other.Comment.Length != 0) {
        Comment = other.Comment;
      }
      if (other.WorkId.Length != 0) {
        WorkId = other.WorkId;
      }
      if (other.LastModified != 0L) {
        LastModified = other.LastModified;
      }
      if (other.ActionUUID.Length != 0) {
        ActionUUID = other.ActionUUID;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Action = input.ReadString();
            break;
          }
          case 16: {
            Created = input.ReadInt64();
            break;
          }
          case 26: {
            Comment = input.ReadString();
            break;
          }
          case 34: {
            WorkId = input.ReadString();
            break;
          }
          case 40: {
            LastModified = input.ReadInt64();
            break;
          }
          case 50: {
            ActionUUID = input.ReadString();
            break;
          }
          case 58: {
            Status = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetComplianceSummaryInput : pb::IMessage<GetComplianceSummaryInput> {
    private static readonly pb::MessageParser<GetComplianceSummaryInput> _parser = new pb::MessageParser<GetComplianceSummaryInput>(() => new GetComplianceSummaryInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetComplianceSummaryInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Reports.GrpcapiReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetComplianceSummaryInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetComplianceSummaryInput(GetComplianceSummaryInput other) : this() {
      uuids_ = other.uuids_.Clone();
      start_ = other.start_;
      end_ = other.end_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetComplianceSummaryInput Clone() {
      return new GetComplianceSummaryInput(this);
    }

    /// <summary>Field number for the "uuids" field.</summary>
    public const int UuidsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_uuids_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> uuids_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Uuids {
      get { return uuids_; }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    private long start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 3;
    private long end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetComplianceSummaryInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetComplianceSummaryInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!uuids_.Equals(other.uuids_)) return false;
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= uuids_.GetHashCode();
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (End != 0L) hash ^= End.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uuids_.WriteTo(output, _repeated_uuids_codec);
      if (Start != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Start);
      }
      if (End != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(End);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uuids_.CalculateSize(_repeated_uuids_codec);
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (End != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(End);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetComplianceSummaryInput other) {
      if (other == null) {
        return;
      }
      uuids_.Add(other.uuids_);
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.End != 0L) {
        End = other.End;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            uuids_.AddEntriesFrom(input, _repeated_uuids_codec);
            break;
          }
          case 16: {
            Start = input.ReadInt64();
            break;
          }
          case 24: {
            End = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetComplianceSummaryOutput : pb::IMessage<GetComplianceSummaryOutput> {
    private static readonly pb::MessageParser<GetComplianceSummaryOutput> _parser = new pb::MessageParser<GetComplianceSummaryOutput>(() => new GetComplianceSummaryOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetComplianceSummaryOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Reports.GrpcapiReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetComplianceSummaryOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetComplianceSummaryOutput(GetComplianceSummaryOutput other) : this() {
      start_ = other.start_;
      end_ = other.end_;
      statusNotes_ = other.statusNotes_.Clone();
      systems_ = other.systems_.Clone();
      timeNonCompliant_ = other.timeNonCompliant_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetComplianceSummaryOutput Clone() {
      return new GetComplianceSummaryOutput(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private long start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 2;
    private long end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "status_notes" field.</summary>
    public const int StatusNotesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SKF.Enlight.API.Reports.StatusNote> _repeated_statusNotes_codec
        = pb::FieldCodec.ForMessage(26, global::SKF.Enlight.API.Reports.StatusNote.Parser);
    private readonly pbc::RepeatedField<global::SKF.Enlight.API.Reports.StatusNote> statusNotes_ = new pbc::RepeatedField<global::SKF.Enlight.API.Reports.StatusNote>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SKF.Enlight.API.Reports.StatusNote> StatusNotes {
      get { return statusNotes_; }
    }

    /// <summary>Field number for the "systems" field.</summary>
    public const int SystemsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SKF.Enlight.API.Reports.System> _repeated_systems_codec
        = pb::FieldCodec.ForMessage(34, global::SKF.Enlight.API.Reports.System.Parser);
    private readonly pbc::RepeatedField<global::SKF.Enlight.API.Reports.System> systems_ = new pbc::RepeatedField<global::SKF.Enlight.API.Reports.System>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SKF.Enlight.API.Reports.System> Systems {
      get { return systems_; }
    }

    /// <summary>Field number for the "time_non_compliant" field.</summary>
    public const int TimeNonCompliantFieldNumber = 5;
    private static readonly pb::FieldCodec<long> _repeated_timeNonCompliant_codec
        = pb::FieldCodec.ForInt64(42);
    private readonly pbc::RepeatedField<long> timeNonCompliant_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> TimeNonCompliant {
      get { return timeNonCompliant_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetComplianceSummaryOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetComplianceSummaryOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      if(!statusNotes_.Equals(other.statusNotes_)) return false;
      if(!systems_.Equals(other.systems_)) return false;
      if(!timeNonCompliant_.Equals(other.timeNonCompliant_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (End != 0L) hash ^= End.GetHashCode();
      hash ^= statusNotes_.GetHashCode();
      hash ^= systems_.GetHashCode();
      hash ^= timeNonCompliant_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Start);
      }
      if (End != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(End);
      }
      statusNotes_.WriteTo(output, _repeated_statusNotes_codec);
      systems_.WriteTo(output, _repeated_systems_codec);
      timeNonCompliant_.WriteTo(output, _repeated_timeNonCompliant_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (End != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(End);
      }
      size += statusNotes_.CalculateSize(_repeated_statusNotes_codec);
      size += systems_.CalculateSize(_repeated_systems_codec);
      size += timeNonCompliant_.CalculateSize(_repeated_timeNonCompliant_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetComplianceSummaryOutput other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.End != 0L) {
        End = other.End;
      }
      statusNotes_.Add(other.statusNotes_);
      systems_.Add(other.systems_);
      timeNonCompliant_.Add(other.timeNonCompliant_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Start = input.ReadInt64();
            break;
          }
          case 16: {
            End = input.ReadInt64();
            break;
          }
          case 26: {
            statusNotes_.AddEntriesFrom(input, _repeated_statusNotes_codec);
            break;
          }
          case 34: {
            systems_.AddEntriesFrom(input, _repeated_systems_codec);
            break;
          }
          case 42:
          case 40: {
            timeNonCompliant_.AddEntriesFrom(input, _repeated_timeNonCompliant_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusNote : pb::IMessage<StatusNote> {
    private static readonly pb::MessageParser<StatusNote> _parser = new pb::MessageParser<StatusNote>(() => new StatusNote());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusNote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Reports.GrpcapiReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusNote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusNote(StatusNote other) : this() {
      reason_ = other.reason_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusNote Clone() {
      return new StatusNote(this);
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private long count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusNote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusNote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reason != other.Reason) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Reason);
      }
      if (Count != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusNote other) {
      if (other == null) {
        return;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Reason = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class System : pb::IMessage<System> {
    private static readonly pb::MessageParser<System> _parser = new pb::MessageParser<System>(() => new System());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<System> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Reports.GrpcapiReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public System() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public System(System other) : this() {
      areaId_ = other.areaId_;
      areaName_ = other.areaName_;
      compliant_ = other.compliant_;
      nonCompliant_ = other.nonCompliant_;
      overdue_ = other.overdue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public System Clone() {
      return new System(this);
    }

    /// <summary>Field number for the "area_id" field.</summary>
    public const int AreaIdFieldNumber = 1;
    private string areaId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AreaId {
      get { return areaId_; }
      set {
        areaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "area_name" field.</summary>
    public const int AreaNameFieldNumber = 2;
    private string areaName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AreaName {
      get { return areaName_; }
      set {
        areaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "compliant" field.</summary>
    public const int CompliantFieldNumber = 3;
    private long compliant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Compliant {
      get { return compliant_; }
      set {
        compliant_ = value;
      }
    }

    /// <summary>Field number for the "non_compliant" field.</summary>
    public const int NonCompliantFieldNumber = 4;
    private long nonCompliant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NonCompliant {
      get { return nonCompliant_; }
      set {
        nonCompliant_ = value;
      }
    }

    /// <summary>Field number for the "overdue" field.</summary>
    public const int OverdueFieldNumber = 5;
    private long overdue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Overdue {
      get { return overdue_; }
      set {
        overdue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as System);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(System other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaId != other.AreaId) return false;
      if (AreaName != other.AreaName) return false;
      if (Compliant != other.Compliant) return false;
      if (NonCompliant != other.NonCompliant) return false;
      if (Overdue != other.Overdue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaId.Length != 0) hash ^= AreaId.GetHashCode();
      if (AreaName.Length != 0) hash ^= AreaName.GetHashCode();
      if (Compliant != 0L) hash ^= Compliant.GetHashCode();
      if (NonCompliant != 0L) hash ^= NonCompliant.GetHashCode();
      if (Overdue != 0L) hash ^= Overdue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AreaId);
      }
      if (AreaName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AreaName);
      }
      if (Compliant != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Compliant);
      }
      if (NonCompliant != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(NonCompliant);
      }
      if (Overdue != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Overdue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AreaId);
      }
      if (AreaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AreaName);
      }
      if (Compliant != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Compliant);
      }
      if (NonCompliant != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NonCompliant);
      }
      if (Overdue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Overdue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(System other) {
      if (other == null) {
        return;
      }
      if (other.AreaId.Length != 0) {
        AreaId = other.AreaId;
      }
      if (other.AreaName.Length != 0) {
        AreaName = other.AreaName;
      }
      if (other.Compliant != 0L) {
        Compliant = other.Compliant;
      }
      if (other.NonCompliant != 0L) {
        NonCompliant = other.NonCompliant;
      }
      if (other.Overdue != 0L) {
        Overdue = other.Overdue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AreaId = input.ReadString();
            break;
          }
          case 18: {
            AreaName = input.ReadString();
            break;
          }
          case 24: {
            Compliant = input.ReadInt64();
            break;
          }
          case 32: {
            NonCompliant = input.ReadInt64();
            break;
          }
          case 40: {
            Overdue = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
