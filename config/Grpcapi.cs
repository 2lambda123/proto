// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: config/grpcapi.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SKF.Enlight.API.Config {

  /// <summary>Holder for reflection information generated from config/grpcapi.proto</summary>
  public static partial class GrpcapiReflection {

    #region Descriptor
    /// <summary>File descriptor for config/grpcapi.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GrpcapiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRjb25maWcvZ3JwY2FwaS5wcm90bxIHZ3JwY2FwaRoTY29tbW9uL2NvbW1v",
            "bi5wcm90byI/ChRTcGVjaWZpY2F0aW9uUmVxdWVzdBInCgp0YXJnZXRUeXBl",
            "GAEgASgOMhMuZ3JwY2FwaS5UYXJnZXRUeXBlImQKFVNwZWNpZmljYXRpb25S",
            "ZXNwb25zZRIKCgJJRBgBIAEoCRIRCgl2ZXJzaW9uSUQYAiABKAkSFQoNY3Jl",
            "YXRlZEF0RGF0ZRgDIAEoCRIVCg1zcGVjaWZpY2F0aW9uGAQgASgMIiIKDUNv",
            "bmZpZ1JlcXVlc3QSEQoJY29uZmlnSURzGAEgAygJIjsKD0NvbmZpZ3NSZXNw",
            "b25zZRIoCgdjb25maWdzGAEgAygLMhcuZ3JwY2FwaS5Db25maWdSZXNwb25z",
            "ZSI+CgdDb25maWdzEjMKCGNvbmZpZ1FDGAEgASgLMiEuZ3JwY2FwaS5RQ01l",
            "YXN1cmVtZW50UG9pbnRDb25maWcikwEKDkNvbmZpZ1Jlc3BvbnNlEhAKCGNv",
            "bmZpZ0lEGAEgASgJEhEKCXZlcnNpb25JRBgCIAEoCRIVCg1jcmVhdGVkQXRE",
            "YXRlGAMgASgJEhAKCHRhcmdldElEGAQgAygJEjMKCGNvbmZpZ1FDGAUgASgL",
            "MiEuZ3JwY2FwaS5RQ01lYXN1cmVtZW50UG9pbnRDb25maWciKAoTTGF0ZXN0",
            "Q29uZmlnUmVxdWVzdBIRCgl0YXJnZXRJRHMYASADKAkiWgoQU2V0Q29uZmln",
            "UmVxdWVzdBIzCghjb25maWdRQxgCIAEoCzIhLmdycGNhcGkuUUNNZWFzdXJl",
            "bWVudFBvaW50Q29uZmlnEhEKCXRhcmdldElEcxgBIAMoCSLkBgoYUUNNZWFz",
            "dXJlbWVudFBvaW50Q29uZmlnEicKCnNhbXBsZVJhdGUYASABKA4yEy5ncnBj",
            "YXBpLlNhbXBsZVJhdGUSKwoMc2FtcGxlQW1vdW50GAIgASgOMhUuZ3JwY2Fw",
            "aS5TYW1wbGVBbW91bnQSPQoVZW52ZWxvcGVCYW5kU2VsZWN0aW9uGAUgASgO",
            "Mh4uZ3JwY2FwaS5FbnZlbG9wZUJhbmRTZWxlY3Rpb24STwoeZXh0ZXJuYWxT",
            "ZW5zb3JFbmdpbmVlcmluZ1VuaXRzGAYgASgOMicuZ3JwY2FwaS5FeHRlcm5h",
            "bFNlbnNvckVuZ2luZWVyaW5nVW5pdHMSRQoZZXh0ZXJuYWxTZW5zb3JTZW5z",
            "aXRpdml0eRgHIAEoDjIiLmdycGNhcGkuRXh0ZXJuYWxTZW5zb3JTZW5zaXRp",
            "dml0eRI1ChFleHRlcm5hbFNlbnNvcklDUBgIIAEoDjIaLmdycGNhcGkuRXh0",
            "ZXJuYWxTZW5zb3JJQ1ASLwoOdmlld1NpZ25hbFR5cGUYCSABKA4yFy5ncnBj",
            "YXBpLlZpZXdTaWduYWxUeXBlEicKCnlBeGlzVW5pdHMYCiABKA4yEy5ncnBj",
            "YXBpLllBeGlzVW5pdHMSJwoKWEF4aXNVbml0cxgLIAEoDjITLmdycGNhcGku",
            "WEF4aXNVbml0cxIrCgx5QXhpc0Rpc3BsYXkYDCABKA4yFS5ncnBjYXBpLllB",
            "eGlzRGlzcGxheRInCgppbnB1dFJhbmdlGA0gASgOMhMuZ3JwY2FwaS5JbnB1",
            "dFJhbmdlEi0KDWRldGVjdGlvblR5cGUYDiABKA4yFi5ncnBjYXBpLkRldGVj",
            "dGlvblR5cGUSJwoKd2luZG93VHlwZRgSIAEoDjITLmdycGNhcGkuV2luZG93",
            "VHlwZRIvCg5oaWdoUGFzc0ZpbHRlchgTIAEoDjIXLmdycGNhcGkuSGlnaFBh",
            "c3NGaWx0ZXISKQoLdGVtcGVyYXR1cmUYFCABKA4yFC5ncnBjYXBpLlRlbXBl",
            "cmF0dXJlEjkKE2V4dGVybmFsU2Vuc29yVXNhZ2UYFSABKA4yHC5ncnBjYXBp",
            "LkV4dGVybmFsU2Vuc29yVXNhZ2VKBAgDEARKBAgEEAVKBAgPEBBKBAgQEBFK",
            "BAgREBIqTAoKVGFyZ2V0VHlwZRISCg5UQVJHRVRfR0VORVJJQxAAEioKJlRB",
            "UkdFVF9RVUlDS19DT0xMRUNUX01FQVNVUkVNRU5UX1BPSU5UEAEqmgEKClNh",
            "bXBsZVJhdGUSEAoMUkFURV9VTktOT1dOEAASDAoIUkFURV8yNTYQARINCglS",
            "QVRFXzEyODAQAhINCglSQVRFXzI1NjAQAxINCglSQVRFXzUxMjAQBBIOCgpS",
            "QVRFXzEyODAwEAUSDgoKUkFURV8yNTYwMBAGEg4KClJBVEVfNTEyMDAQBxIP",
            "CgtSQVRFXzEwMjQwMBAIKoYBCgxTYW1wbGVBbW91bnQSEgoOQU1PVU5UX1VO",
            "S05PV04QABIOCgpBTU9VTlRfMjU2EAESDgoKQU1PVU5UXzUxMhACEg8KC0FN",
            "T1VOVF8xMDI0EAMSDwoLQU1PVU5UXzIwNDgQBBIPCgtBTU9VTlRfNDA5NhAF",
            "Eg8KC0FNT1VOVF84MTkyEAYqTQoVRW52ZWxvcGVCYW5kU2VsZWN0aW9uEhAK",
            "DEJBTkRfVU5LTk9XThAAEgoKBkJBTkRfMRABEgoKBkJBTkRfMhACEgoKBkJB",
            "TkRfMxADKlAKHkV4dGVybmFsU2Vuc29yRW5naW5lZXJpbmdVbml0cxIQCgxV",
            "TklUX1VOS05PV04QABIcChhVTklUX0FDQ0VMRVJBVElPTl9FVVNfR1MQASpT",
            "ChlFeHRlcm5hbFNlbnNvclNlbnNpdGl2aXR5EhcKE1NFTlNJVElWSVRZX1VO",
            "S05PV04QABIdChlTRU5TSVRJVklUWV8xMDBfTVZfUEVSX0VVEAEqQgoRRXh0",
            "ZXJuYWxTZW5zb3JJQ1ASDwoLSUNQX1VOS05PV04QABIcChhJQ1BfUkVRVUlS",
            "RURfV0hFTl9JTl9VU0UQASprCg5WaWV3U2lnbmFsVHlwZRIXChNWSUVXX1NJ",
            "R05BTF9VTktOT1dOEAASHQoZVklFV19TSUdOQUxfU1BFQ1RSVU1fT05MWRAB",
            "EiEKHVZJRVdfU0lHTkFMX1NQRUNUUlVNX0FORF9USU1FEAIqggEKCllBeGlz",
            "VW5pdHMSEgoOWV9BWElTX1VOS05PV04QABIdChlZX0FYSVNfQUNDRUxFUkFU",
            "SU9OX0lOX0dTEAESIQodWV9BWElTX1ZFTE9DSVRZX0lOX01NX1BFUl9TRUMQ",
            "AhIeChpZX0FYSVNfRU5WRUxPUEVEX0dFX0lOX0dFUxADKjwKClhBeGlzVW5p",
            "dHMSEgoOWF9BWElTX1VOS05PTlcQABIaChZYX0FYSVNfRlJFUVVFTkNZX0lO",
            "X0haEAEqRwoMWUF4aXNEaXNwbGF5EhoKFllfQVhJU19ESVNQTEFZX1VOS05P",
            "V04QABIbChdZX0FYSVNfRElTUExBWV9MSU5FQVJMWRABKjEKCklucHV0UmFu",
            "Z2USEQoNUkFOR0VfVU5LTk9XThAAEhAKDFJBTkdFXzEwMF9HUxABKt0BCg1E",
            "ZXRlY3Rpb25UeXBlEhUKEURFVEVDVElPTl9VTktOT1dOEAASEQoNREVURUNU",
            "SU9OX1JNUxABEiYKIkRFVEVDVElPTl9QRUFLX0NBTENVTEFURURfRlJPTV9S",
            "TVMQAhIuCipERVRFQ1RJT05fUEVBS19UT19QRUFLX0NBTENVTEFURURfRlJP",
            "TV9STVMQAxIpCiVERVRFQ1RJT05fVFJVRV9QRUFLX0ZST01fUEVBS19UT19Q",
            "RUFLEAQSHwobREVURUNUSU9OX1RSVUVfUEVBS19UT19QRUFLEAUqNAoKV2lu",
            "ZG93VHlwZRISCg5XSU5ET1dfVU5LTk9XThAAEhIKDldJTkRPV19IQU5OSU5H",
            "EAEqaQoOSGlnaFBhc3NGaWx0ZXISEgoORklMVEVSX1VOS05PV04QABIOCgpG",
            "SUxURVJfT0ZGEAESDwoLRklMVEVSXzJfSFoQAhIQCgxGSUxURVJfMTBfSFoQ",
            "AxIQCgxGSUxURVJfNzBfSFoQBCqLAQoLVGVtcGVyYXR1cmUSFwoTVEVNUEVS",
            "QVRVUkVfVU5LTk9XThAAEiIKHlRFTVBFUkFUVVJFX0RFR1JFRVNfRkFIUkVO",
            "SEVJVBABEh8KG1RFTVBFUkFUVVJFX0RFR1JFRVNfQ0VMQ0lVUxACEh4KGlRF",
            "TVBFUkFUVVJFX0RFR1JFRVNfS0VMVklOEAMqWAoTRXh0ZXJuYWxTZW5zb3JV",
            "c2FnZRIgChxFeHRlcm5hbFNlbnNvclVzYWdlX0RJU0FCTEVEEAASHwobRXh0",
            "ZXJuYWxTZW5zb3JVc2FnZV9FTkFCTEVEEAEyjAMKDlJlc291cmNlQ29uZmln",
            "ElMKEEdldFNwZWNpZmljYXRpb24SHS5ncnBjYXBpLlNwZWNpZmljYXRpb25S",
            "ZXF1ZXN0Gh4uZ3JwY2FwaS5TcGVjaWZpY2F0aW9uUmVzcG9uc2UiABI/CglH",
            "ZXRDb25maWcSFi5ncnBjYXBpLkNvbmZpZ1JlcXVlc3QaGC5ncnBjYXBpLkNv",
            "bmZpZ3NSZXNwb25zZSIAElUKGUdldExhdGVzdENvbmZpZ0J5VGFyZ2V0SUQS",
            "HC5ncnBjYXBpLkxhdGVzdENvbmZpZ1JlcXVlc3QaGC5ncnBjYXBpLkNvbmZp",
            "Z3NSZXNwb25zZSIAEj8KE0dldEFsbExhdGVzdENvbmZpZ3MSDC5jb21tb24u",
            "Vm9pZBoYLmdycGNhcGkuQ29uZmlnc1Jlc3BvbnNlIgASTAoUU2V0Q29uZmln",
            "QnlUYXJnZXRJRHMSGS5ncnBjYXBpLlNldENvbmZpZ1JlcXVlc3QaFy5ncnBj",
            "YXBpLkNvbmZpZ1Jlc3BvbnNlIgBCGaoCFlNLRi5FbmxpZ2h0LkFQSS5Db25m",
            "aWdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SKF.Enlight.API.Common.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SKF.Enlight.API.Config.TargetType), typeof(global::SKF.Enlight.API.Config.SampleRate), typeof(global::SKF.Enlight.API.Config.SampleAmount), typeof(global::SKF.Enlight.API.Config.EnvelopeBandSelection), typeof(global::SKF.Enlight.API.Config.ExternalSensorEngineeringUnits), typeof(global::SKF.Enlight.API.Config.ExternalSensorSensitivity), typeof(global::SKF.Enlight.API.Config.ExternalSensorICP), typeof(global::SKF.Enlight.API.Config.ViewSignalType), typeof(global::SKF.Enlight.API.Config.YAxisUnits), typeof(global::SKF.Enlight.API.Config.XAxisUnits), typeof(global::SKF.Enlight.API.Config.YAxisDisplay), typeof(global::SKF.Enlight.API.Config.InputRange), typeof(global::SKF.Enlight.API.Config.DetectionType), typeof(global::SKF.Enlight.API.Config.WindowType), typeof(global::SKF.Enlight.API.Config.HighPassFilter), typeof(global::SKF.Enlight.API.Config.Temperature), typeof(global::SKF.Enlight.API.Config.ExternalSensorUsage), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Config.SpecificationRequest), global::SKF.Enlight.API.Config.SpecificationRequest.Parser, new[]{ "TargetType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Config.SpecificationResponse), global::SKF.Enlight.API.Config.SpecificationResponse.Parser, new[]{ "ID", "VersionID", "CreatedAtDate", "Specification" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Config.ConfigRequest), global::SKF.Enlight.API.Config.ConfigRequest.Parser, new[]{ "ConfigIDs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Config.ConfigsResponse), global::SKF.Enlight.API.Config.ConfigsResponse.Parser, new[]{ "Configs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Config.Configs), global::SKF.Enlight.API.Config.Configs.Parser, new[]{ "ConfigQC" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Config.ConfigResponse), global::SKF.Enlight.API.Config.ConfigResponse.Parser, new[]{ "ConfigID", "VersionID", "CreatedAtDate", "TargetID", "ConfigQC" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Config.LatestConfigRequest), global::SKF.Enlight.API.Config.LatestConfigRequest.Parser, new[]{ "TargetIDs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Config.SetConfigRequest), global::SKF.Enlight.API.Config.SetConfigRequest.Parser, new[]{ "ConfigQC", "TargetIDs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SKF.Enlight.API.Config.QCMeasurementPointConfig), global::SKF.Enlight.API.Config.QCMeasurementPointConfig.Parser, new[]{ "SampleRate", "SampleAmount", "EnvelopeBandSelection", "ExternalSensorEngineeringUnits", "ExternalSensorSensitivity", "ExternalSensorICP", "ViewSignalType", "YAxisUnits", "XAxisUnits", "YAxisDisplay", "InputRange", "DetectionType", "WindowType", "HighPassFilter", "Temperature", "ExternalSensorUsage" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TargetType {
    [pbr::OriginalName("TARGET_GENERIC")] TargetGeneric = 0,
    [pbr::OriginalName("TARGET_QUICK_COLLECT_MEASUREMENT_POINT")] TargetQuickCollectMeasurementPoint = 1,
  }

  public enum SampleRate {
    [pbr::OriginalName("RATE_UNKNOWN")] RateUnknown = 0,
    [pbr::OriginalName("RATE_256")] Rate256 = 1,
    [pbr::OriginalName("RATE_1280")] Rate1280 = 2,
    [pbr::OriginalName("RATE_2560")] Rate2560 = 3,
    [pbr::OriginalName("RATE_5120")] Rate5120 = 4,
    [pbr::OriginalName("RATE_12800")] Rate12800 = 5,
    [pbr::OriginalName("RATE_25600")] Rate25600 = 6,
    [pbr::OriginalName("RATE_51200")] Rate51200 = 7,
    [pbr::OriginalName("RATE_102400")] Rate102400 = 8,
  }

  public enum SampleAmount {
    [pbr::OriginalName("AMOUNT_UNKNOWN")] AmountUnknown = 0,
    [pbr::OriginalName("AMOUNT_256")] Amount256 = 1,
    [pbr::OriginalName("AMOUNT_512")] Amount512 = 2,
    [pbr::OriginalName("AMOUNT_1024")] Amount1024 = 3,
    [pbr::OriginalName("AMOUNT_2048")] Amount2048 = 4,
    [pbr::OriginalName("AMOUNT_4096")] Amount4096 = 5,
    [pbr::OriginalName("AMOUNT_8192")] Amount8192 = 6,
  }

  public enum EnvelopeBandSelection {
    [pbr::OriginalName("BAND_UNKNOWN")] BandUnknown = 0,
    [pbr::OriginalName("BAND_1")] Band1 = 1,
    [pbr::OriginalName("BAND_2")] Band2 = 2,
    [pbr::OriginalName("BAND_3")] Band3 = 3,
  }

  public enum ExternalSensorEngineeringUnits {
    [pbr::OriginalName("UNIT_UNKNOWN")] UnitUnknown = 0,
    [pbr::OriginalName("UNIT_ACCELERATION_EUS_GS")] UnitAccelerationEusGs = 1,
  }

  public enum ExternalSensorSensitivity {
    [pbr::OriginalName("SENSITIVITY_UNKNOWN")] SensitivityUnknown = 0,
    [pbr::OriginalName("SENSITIVITY_100_MV_PER_EU")] Sensitivity100MvPerEu = 1,
  }

  public enum ExternalSensorICP {
    [pbr::OriginalName("ICP_UNKNOWN")] IcpUnknown = 0,
    [pbr::OriginalName("ICP_REQUIRED_WHEN_IN_USE")] IcpRequiredWhenInUse = 1,
  }

  public enum ViewSignalType {
    [pbr::OriginalName("VIEW_SIGNAL_UNKNOWN")] ViewSignalUnknown = 0,
    [pbr::OriginalName("VIEW_SIGNAL_SPECTRUM_ONLY")] ViewSignalSpectrumOnly = 1,
    [pbr::OriginalName("VIEW_SIGNAL_SPECTRUM_AND_TIME")] ViewSignalSpectrumAndTime = 2,
  }

  public enum YAxisUnits {
    [pbr::OriginalName("Y_AXIS_UNKNOWN")] YAxisUnknown = 0,
    [pbr::OriginalName("Y_AXIS_ACCELERATION_IN_GS")] YAxisAccelerationInGs = 1,
    [pbr::OriginalName("Y_AXIS_VELOCITY_IN_MM_PER_SEC")] YAxisVelocityInMmPerSec = 2,
    [pbr::OriginalName("Y_AXIS_ENVELOPED_GE_IN_GES")] YAxisEnvelopedGeInGes = 3,
  }

  public enum XAxisUnits {
    [pbr::OriginalName("X_AXIS_UNKNONW")] XAxisUnknonw = 0,
    [pbr::OriginalName("X_AXIS_FREQUENCY_IN_HZ")] XAxisFrequencyInHz = 1,
  }

  public enum YAxisDisplay {
    [pbr::OriginalName("Y_AXIS_DISPLAY_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("Y_AXIS_DISPLAY_LINEARLY")] Linearly = 1,
  }

  public enum InputRange {
    [pbr::OriginalName("RANGE_UNKNOWN")] RangeUnknown = 0,
    [pbr::OriginalName("RANGE_100_GS")] Range100Gs = 1,
  }

  public enum DetectionType {
    [pbr::OriginalName("DETECTION_UNKNOWN")] DetectionUnknown = 0,
    [pbr::OriginalName("DETECTION_RMS")] DetectionRms = 1,
    [pbr::OriginalName("DETECTION_PEAK_CALCULATED_FROM_RMS")] DetectionPeakCalculatedFromRms = 2,
    [pbr::OriginalName("DETECTION_PEAK_TO_PEAK_CALCULATED_FROM_RMS")] DetectionPeakToPeakCalculatedFromRms = 3,
    [pbr::OriginalName("DETECTION_TRUE_PEAK_FROM_PEAK_TO_PEAK")] DetectionTruePeakFromPeakToPeak = 4,
    [pbr::OriginalName("DETECTION_TRUE_PEAK_TO_PEAK")] DetectionTruePeakToPeak = 5,
  }

  public enum WindowType {
    [pbr::OriginalName("WINDOW_UNKNOWN")] WindowUnknown = 0,
    [pbr::OriginalName("WINDOW_HANNING")] WindowHanning = 1,
  }

  public enum HighPassFilter {
    [pbr::OriginalName("FILTER_UNKNOWN")] FilterUnknown = 0,
    [pbr::OriginalName("FILTER_OFF")] FilterOff = 1,
    [pbr::OriginalName("FILTER_2_HZ")] Filter2Hz = 2,
    [pbr::OriginalName("FILTER_10_HZ")] Filter10Hz = 3,
    [pbr::OriginalName("FILTER_70_HZ")] Filter70Hz = 4,
  }

  public enum Temperature {
    [pbr::OriginalName("TEMPERATURE_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("TEMPERATURE_DEGREES_FAHRENHEIT")] DegreesFahrenheit = 1,
    [pbr::OriginalName("TEMPERATURE_DEGREES_CELCIUS")] DegreesCelcius = 2,
    [pbr::OriginalName("TEMPERATURE_DEGREES_KELVIN")] DegreesKelvin = 3,
  }

  public enum ExternalSensorUsage {
    [pbr::OriginalName("ExternalSensorUsage_DISABLED")] Disabled = 0,
    [pbr::OriginalName("ExternalSensorUsage_ENABLED")] Enabled = 1,
  }

  #endregion

  #region Messages
  public sealed partial class SpecificationRequest : pb::IMessage<SpecificationRequest> {
    private static readonly pb::MessageParser<SpecificationRequest> _parser = new pb::MessageParser<SpecificationRequest>(() => new SpecificationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpecificationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Config.GrpcapiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecificationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecificationRequest(SpecificationRequest other) : this() {
      targetType_ = other.targetType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecificationRequest Clone() {
      return new SpecificationRequest(this);
    }

    /// <summary>Field number for the "targetType" field.</summary>
    public const int TargetTypeFieldNumber = 1;
    private global::SKF.Enlight.API.Config.TargetType targetType_ = global::SKF.Enlight.API.Config.TargetType.TargetGeneric;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.TargetType TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpecificationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpecificationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetType != other.TargetType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetType != global::SKF.Enlight.API.Config.TargetType.TargetGeneric) hash ^= TargetType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetType != global::SKF.Enlight.API.Config.TargetType.TargetGeneric) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TargetType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetType != global::SKF.Enlight.API.Config.TargetType.TargetGeneric) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpecificationRequest other) {
      if (other == null) {
        return;
      }
      if (other.TargetType != global::SKF.Enlight.API.Config.TargetType.TargetGeneric) {
        TargetType = other.TargetType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetType = (global::SKF.Enlight.API.Config.TargetType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpecificationResponse : pb::IMessage<SpecificationResponse> {
    private static readonly pb::MessageParser<SpecificationResponse> _parser = new pb::MessageParser<SpecificationResponse>(() => new SpecificationResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpecificationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Config.GrpcapiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecificationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecificationResponse(SpecificationResponse other) : this() {
      iD_ = other.iD_;
      versionID_ = other.versionID_;
      createdAtDate_ = other.createdAtDate_;
      specification_ = other.specification_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecificationResponse Clone() {
      return new SpecificationResponse(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private string iD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "versionID" field.</summary>
    public const int VersionIDFieldNumber = 2;
    private string versionID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionID {
      get { return versionID_; }
      set {
        versionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createdAtDate" field.</summary>
    public const int CreatedAtDateFieldNumber = 3;
    private string createdAtDate_ = "";
    /// <summary>
    /// RFC_3339 format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreatedAtDate {
      get { return createdAtDate_; }
      set {
        createdAtDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "specification" field.</summary>
    public const int SpecificationFieldNumber = 4;
    private pb::ByteString specification_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Specification {
      get { return specification_; }
      set {
        specification_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpecificationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpecificationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (VersionID != other.VersionID) return false;
      if (CreatedAtDate != other.CreatedAtDate) return false;
      if (Specification != other.Specification) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      if (VersionID.Length != 0) hash ^= VersionID.GetHashCode();
      if (CreatedAtDate.Length != 0) hash ^= CreatedAtDate.GetHashCode();
      if (Specification.Length != 0) hash ^= Specification.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ID);
      }
      if (VersionID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VersionID);
      }
      if (CreatedAtDate.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CreatedAtDate);
      }
      if (Specification.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Specification);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (VersionID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionID);
      }
      if (CreatedAtDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatedAtDate);
      }
      if (Specification.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Specification);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpecificationResponse other) {
      if (other == null) {
        return;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      if (other.VersionID.Length != 0) {
        VersionID = other.VersionID;
      }
      if (other.CreatedAtDate.Length != 0) {
        CreatedAtDate = other.CreatedAtDate;
      }
      if (other.Specification.Length != 0) {
        Specification = other.Specification;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ID = input.ReadString();
            break;
          }
          case 18: {
            VersionID = input.ReadString();
            break;
          }
          case 26: {
            CreatedAtDate = input.ReadString();
            break;
          }
          case 34: {
            Specification = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigRequest : pb::IMessage<ConfigRequest> {
    private static readonly pb::MessageParser<ConfigRequest> _parser = new pb::MessageParser<ConfigRequest>(() => new ConfigRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Config.GrpcapiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigRequest(ConfigRequest other) : this() {
      configIDs_ = other.configIDs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigRequest Clone() {
      return new ConfigRequest(this);
    }

    /// <summary>Field number for the "configIDs" field.</summary>
    public const int ConfigIDsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_configIDs_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> configIDs_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ConfigIDs {
      get { return configIDs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!configIDs_.Equals(other.configIDs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= configIDs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      configIDs_.WriteTo(output, _repeated_configIDs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += configIDs_.CalculateSize(_repeated_configIDs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigRequest other) {
      if (other == null) {
        return;
      }
      configIDs_.Add(other.configIDs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            configIDs_.AddEntriesFrom(input, _repeated_configIDs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigsResponse : pb::IMessage<ConfigsResponse> {
    private static readonly pb::MessageParser<ConfigsResponse> _parser = new pb::MessageParser<ConfigsResponse>(() => new ConfigsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Config.GrpcapiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigsResponse(ConfigsResponse other) : this() {
      configs_ = other.configs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigsResponse Clone() {
      return new ConfigsResponse(this);
    }

    /// <summary>Field number for the "configs" field.</summary>
    public const int ConfigsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SKF.Enlight.API.Config.ConfigResponse> _repeated_configs_codec
        = pb::FieldCodec.ForMessage(10, global::SKF.Enlight.API.Config.ConfigResponse.Parser);
    private readonly pbc::RepeatedField<global::SKF.Enlight.API.Config.ConfigResponse> configs_ = new pbc::RepeatedField<global::SKF.Enlight.API.Config.ConfigResponse>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SKF.Enlight.API.Config.ConfigResponse> Configs {
      get { return configs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!configs_.Equals(other.configs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= configs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      configs_.WriteTo(output, _repeated_configs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += configs_.CalculateSize(_repeated_configs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigsResponse other) {
      if (other == null) {
        return;
      }
      configs_.Add(other.configs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            configs_.AddEntriesFrom(input, _repeated_configs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Configs : pb::IMessage<Configs> {
    private static readonly pb::MessageParser<Configs> _parser = new pb::MessageParser<Configs>(() => new Configs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Configs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Config.GrpcapiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Configs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Configs(Configs other) : this() {
      configQC_ = other.configQC_ != null ? other.configQC_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Configs Clone() {
      return new Configs(this);
    }

    /// <summary>Field number for the "configQC" field.</summary>
    public const int ConfigQCFieldNumber = 1;
    private global::SKF.Enlight.API.Config.QCMeasurementPointConfig configQC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.QCMeasurementPointConfig ConfigQC {
      get { return configQC_; }
      set {
        configQC_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Configs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Configs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ConfigQC, other.ConfigQC)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (configQC_ != null) hash ^= ConfigQC.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (configQC_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ConfigQC);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (configQC_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigQC);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Configs other) {
      if (other == null) {
        return;
      }
      if (other.configQC_ != null) {
        if (configQC_ == null) {
          ConfigQC = new global::SKF.Enlight.API.Config.QCMeasurementPointConfig();
        }
        ConfigQC.MergeFrom(other.ConfigQC);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (configQC_ == null) {
              ConfigQC = new global::SKF.Enlight.API.Config.QCMeasurementPointConfig();
            }
            input.ReadMessage(ConfigQC);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigResponse : pb::IMessage<ConfigResponse> {
    private static readonly pb::MessageParser<ConfigResponse> _parser = new pb::MessageParser<ConfigResponse>(() => new ConfigResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Config.GrpcapiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigResponse(ConfigResponse other) : this() {
      configID_ = other.configID_;
      versionID_ = other.versionID_;
      createdAtDate_ = other.createdAtDate_;
      targetID_ = other.targetID_.Clone();
      configQC_ = other.configQC_ != null ? other.configQC_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigResponse Clone() {
      return new ConfigResponse(this);
    }

    /// <summary>Field number for the "configID" field.</summary>
    public const int ConfigIDFieldNumber = 1;
    private string configID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConfigID {
      get { return configID_; }
      set {
        configID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "versionID" field.</summary>
    public const int VersionIDFieldNumber = 2;
    private string versionID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionID {
      get { return versionID_; }
      set {
        versionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createdAtDate" field.</summary>
    public const int CreatedAtDateFieldNumber = 3;
    private string createdAtDate_ = "";
    /// <summary>
    /// RFC_3339 format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreatedAtDate {
      get { return createdAtDate_; }
      set {
        createdAtDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targetID" field.</summary>
    public const int TargetIDFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_targetID_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> targetID_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TargetID {
      get { return targetID_; }
    }

    /// <summary>Field number for the "configQC" field.</summary>
    public const int ConfigQCFieldNumber = 5;
    private global::SKF.Enlight.API.Config.QCMeasurementPointConfig configQC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.QCMeasurementPointConfig ConfigQC {
      get { return configQC_; }
      set {
        configQC_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigID != other.ConfigID) return false;
      if (VersionID != other.VersionID) return false;
      if (CreatedAtDate != other.CreatedAtDate) return false;
      if(!targetID_.Equals(other.targetID_)) return false;
      if (!object.Equals(ConfigQC, other.ConfigQC)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigID.Length != 0) hash ^= ConfigID.GetHashCode();
      if (VersionID.Length != 0) hash ^= VersionID.GetHashCode();
      if (CreatedAtDate.Length != 0) hash ^= CreatedAtDate.GetHashCode();
      hash ^= targetID_.GetHashCode();
      if (configQC_ != null) hash ^= ConfigQC.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConfigID);
      }
      if (VersionID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VersionID);
      }
      if (CreatedAtDate.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CreatedAtDate);
      }
      targetID_.WriteTo(output, _repeated_targetID_codec);
      if (configQC_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ConfigQC);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfigID);
      }
      if (VersionID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionID);
      }
      if (CreatedAtDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatedAtDate);
      }
      size += targetID_.CalculateSize(_repeated_targetID_codec);
      if (configQC_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigQC);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigResponse other) {
      if (other == null) {
        return;
      }
      if (other.ConfigID.Length != 0) {
        ConfigID = other.ConfigID;
      }
      if (other.VersionID.Length != 0) {
        VersionID = other.VersionID;
      }
      if (other.CreatedAtDate.Length != 0) {
        CreatedAtDate = other.CreatedAtDate;
      }
      targetID_.Add(other.targetID_);
      if (other.configQC_ != null) {
        if (configQC_ == null) {
          ConfigQC = new global::SKF.Enlight.API.Config.QCMeasurementPointConfig();
        }
        ConfigQC.MergeFrom(other.ConfigQC);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ConfigID = input.ReadString();
            break;
          }
          case 18: {
            VersionID = input.ReadString();
            break;
          }
          case 26: {
            CreatedAtDate = input.ReadString();
            break;
          }
          case 34: {
            targetID_.AddEntriesFrom(input, _repeated_targetID_codec);
            break;
          }
          case 42: {
            if (configQC_ == null) {
              ConfigQC = new global::SKF.Enlight.API.Config.QCMeasurementPointConfig();
            }
            input.ReadMessage(ConfigQC);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LatestConfigRequest : pb::IMessage<LatestConfigRequest> {
    private static readonly pb::MessageParser<LatestConfigRequest> _parser = new pb::MessageParser<LatestConfigRequest>(() => new LatestConfigRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LatestConfigRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Config.GrpcapiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatestConfigRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatestConfigRequest(LatestConfigRequest other) : this() {
      targetIDs_ = other.targetIDs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatestConfigRequest Clone() {
      return new LatestConfigRequest(this);
    }

    /// <summary>Field number for the "targetIDs" field.</summary>
    public const int TargetIDsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_targetIDs_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> targetIDs_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TargetIDs {
      get { return targetIDs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LatestConfigRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LatestConfigRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!targetIDs_.Equals(other.targetIDs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= targetIDs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      targetIDs_.WriteTo(output, _repeated_targetIDs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += targetIDs_.CalculateSize(_repeated_targetIDs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LatestConfigRequest other) {
      if (other == null) {
        return;
      }
      targetIDs_.Add(other.targetIDs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            targetIDs_.AddEntriesFrom(input, _repeated_targetIDs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetConfigRequest : pb::IMessage<SetConfigRequest> {
    private static readonly pb::MessageParser<SetConfigRequest> _parser = new pb::MessageParser<SetConfigRequest>(() => new SetConfigRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetConfigRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Config.GrpcapiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetConfigRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetConfigRequest(SetConfigRequest other) : this() {
      configQC_ = other.configQC_ != null ? other.configQC_.Clone() : null;
      targetIDs_ = other.targetIDs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetConfigRequest Clone() {
      return new SetConfigRequest(this);
    }

    /// <summary>Field number for the "configQC" field.</summary>
    public const int ConfigQCFieldNumber = 2;
    private global::SKF.Enlight.API.Config.QCMeasurementPointConfig configQC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.QCMeasurementPointConfig ConfigQC {
      get { return configQC_; }
      set {
        configQC_ = value;
      }
    }

    /// <summary>Field number for the "targetIDs" field.</summary>
    public const int TargetIDsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_targetIDs_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> targetIDs_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TargetIDs {
      get { return targetIDs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetConfigRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetConfigRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ConfigQC, other.ConfigQC)) return false;
      if(!targetIDs_.Equals(other.targetIDs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (configQC_ != null) hash ^= ConfigQC.GetHashCode();
      hash ^= targetIDs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      targetIDs_.WriteTo(output, _repeated_targetIDs_codec);
      if (configQC_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ConfigQC);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (configQC_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigQC);
      }
      size += targetIDs_.CalculateSize(_repeated_targetIDs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetConfigRequest other) {
      if (other == null) {
        return;
      }
      if (other.configQC_ != null) {
        if (configQC_ == null) {
          ConfigQC = new global::SKF.Enlight.API.Config.QCMeasurementPointConfig();
        }
        ConfigQC.MergeFrom(other.ConfigQC);
      }
      targetIDs_.Add(other.targetIDs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            targetIDs_.AddEntriesFrom(input, _repeated_targetIDs_codec);
            break;
          }
          case 18: {
            if (configQC_ == null) {
              ConfigQC = new global::SKF.Enlight.API.Config.QCMeasurementPointConfig();
            }
            input.ReadMessage(ConfigQC);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QCMeasurementPointConfig : pb::IMessage<QCMeasurementPointConfig> {
    private static readonly pb::MessageParser<QCMeasurementPointConfig> _parser = new pb::MessageParser<QCMeasurementPointConfig>(() => new QCMeasurementPointConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QCMeasurementPointConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SKF.Enlight.API.Config.GrpcapiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QCMeasurementPointConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QCMeasurementPointConfig(QCMeasurementPointConfig other) : this() {
      sampleRate_ = other.sampleRate_;
      sampleAmount_ = other.sampleAmount_;
      envelopeBandSelection_ = other.envelopeBandSelection_;
      externalSensorEngineeringUnits_ = other.externalSensorEngineeringUnits_;
      externalSensorSensitivity_ = other.externalSensorSensitivity_;
      externalSensorICP_ = other.externalSensorICP_;
      viewSignalType_ = other.viewSignalType_;
      yAxisUnits_ = other.yAxisUnits_;
      xAxisUnits_ = other.xAxisUnits_;
      yAxisDisplay_ = other.yAxisDisplay_;
      inputRange_ = other.inputRange_;
      detectionType_ = other.detectionType_;
      windowType_ = other.windowType_;
      highPassFilter_ = other.highPassFilter_;
      temperature_ = other.temperature_;
      externalSensorUsage_ = other.externalSensorUsage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QCMeasurementPointConfig Clone() {
      return new QCMeasurementPointConfig(this);
    }

    /// <summary>Field number for the "sampleRate" field.</summary>
    public const int SampleRateFieldNumber = 1;
    private global::SKF.Enlight.API.Config.SampleRate sampleRate_ = global::SKF.Enlight.API.Config.SampleRate.RateUnknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.SampleRate SampleRate {
      get { return sampleRate_; }
      set {
        sampleRate_ = value;
      }
    }

    /// <summary>Field number for the "sampleAmount" field.</summary>
    public const int SampleAmountFieldNumber = 2;
    private global::SKF.Enlight.API.Config.SampleAmount sampleAmount_ = global::SKF.Enlight.API.Config.SampleAmount.AmountUnknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.SampleAmount SampleAmount {
      get { return sampleAmount_; }
      set {
        sampleAmount_ = value;
      }
    }

    /// <summary>Field number for the "envelopeBandSelection" field.</summary>
    public const int EnvelopeBandSelectionFieldNumber = 5;
    private global::SKF.Enlight.API.Config.EnvelopeBandSelection envelopeBandSelection_ = global::SKF.Enlight.API.Config.EnvelopeBandSelection.BandUnknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.EnvelopeBandSelection EnvelopeBandSelection {
      get { return envelopeBandSelection_; }
      set {
        envelopeBandSelection_ = value;
      }
    }

    /// <summary>Field number for the "externalSensorEngineeringUnits" field.</summary>
    public const int ExternalSensorEngineeringUnitsFieldNumber = 6;
    private global::SKF.Enlight.API.Config.ExternalSensorEngineeringUnits externalSensorEngineeringUnits_ = global::SKF.Enlight.API.Config.ExternalSensorEngineeringUnits.UnitUnknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.ExternalSensorEngineeringUnits ExternalSensorEngineeringUnits {
      get { return externalSensorEngineeringUnits_; }
      set {
        externalSensorEngineeringUnits_ = value;
      }
    }

    /// <summary>Field number for the "externalSensorSensitivity" field.</summary>
    public const int ExternalSensorSensitivityFieldNumber = 7;
    private global::SKF.Enlight.API.Config.ExternalSensorSensitivity externalSensorSensitivity_ = global::SKF.Enlight.API.Config.ExternalSensorSensitivity.SensitivityUnknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.ExternalSensorSensitivity ExternalSensorSensitivity {
      get { return externalSensorSensitivity_; }
      set {
        externalSensorSensitivity_ = value;
      }
    }

    /// <summary>Field number for the "externalSensorICP" field.</summary>
    public const int ExternalSensorICPFieldNumber = 8;
    private global::SKF.Enlight.API.Config.ExternalSensorICP externalSensorICP_ = global::SKF.Enlight.API.Config.ExternalSensorICP.IcpUnknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.ExternalSensorICP ExternalSensorICP {
      get { return externalSensorICP_; }
      set {
        externalSensorICP_ = value;
      }
    }

    /// <summary>Field number for the "viewSignalType" field.</summary>
    public const int ViewSignalTypeFieldNumber = 9;
    private global::SKF.Enlight.API.Config.ViewSignalType viewSignalType_ = global::SKF.Enlight.API.Config.ViewSignalType.ViewSignalUnknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.ViewSignalType ViewSignalType {
      get { return viewSignalType_; }
      set {
        viewSignalType_ = value;
      }
    }

    /// <summary>Field number for the "yAxisUnits" field.</summary>
    public const int YAxisUnitsFieldNumber = 10;
    private global::SKF.Enlight.API.Config.YAxisUnits yAxisUnits_ = global::SKF.Enlight.API.Config.YAxisUnits.YAxisUnknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.YAxisUnits YAxisUnits {
      get { return yAxisUnits_; }
      set {
        yAxisUnits_ = value;
      }
    }

    /// <summary>Field number for the "XAxisUnits" field.</summary>
    public const int XAxisUnitsFieldNumber = 11;
    private global::SKF.Enlight.API.Config.XAxisUnits xAxisUnits_ = global::SKF.Enlight.API.Config.XAxisUnits.XAxisUnknonw;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.XAxisUnits XAxisUnits {
      get { return xAxisUnits_; }
      set {
        xAxisUnits_ = value;
      }
    }

    /// <summary>Field number for the "yAxisDisplay" field.</summary>
    public const int YAxisDisplayFieldNumber = 12;
    private global::SKF.Enlight.API.Config.YAxisDisplay yAxisDisplay_ = global::SKF.Enlight.API.Config.YAxisDisplay.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.YAxisDisplay YAxisDisplay {
      get { return yAxisDisplay_; }
      set {
        yAxisDisplay_ = value;
      }
    }

    /// <summary>Field number for the "inputRange" field.</summary>
    public const int InputRangeFieldNumber = 13;
    private global::SKF.Enlight.API.Config.InputRange inputRange_ = global::SKF.Enlight.API.Config.InputRange.RangeUnknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.InputRange InputRange {
      get { return inputRange_; }
      set {
        inputRange_ = value;
      }
    }

    /// <summary>Field number for the "detectionType" field.</summary>
    public const int DetectionTypeFieldNumber = 14;
    private global::SKF.Enlight.API.Config.DetectionType detectionType_ = global::SKF.Enlight.API.Config.DetectionType.DetectionUnknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.DetectionType DetectionType {
      get { return detectionType_; }
      set {
        detectionType_ = value;
      }
    }

    /// <summary>Field number for the "windowType" field.</summary>
    public const int WindowTypeFieldNumber = 18;
    private global::SKF.Enlight.API.Config.WindowType windowType_ = global::SKF.Enlight.API.Config.WindowType.WindowUnknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.WindowType WindowType {
      get { return windowType_; }
      set {
        windowType_ = value;
      }
    }

    /// <summary>Field number for the "highPassFilter" field.</summary>
    public const int HighPassFilterFieldNumber = 19;
    private global::SKF.Enlight.API.Config.HighPassFilter highPassFilter_ = global::SKF.Enlight.API.Config.HighPassFilter.FilterUnknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.HighPassFilter HighPassFilter {
      get { return highPassFilter_; }
      set {
        highPassFilter_ = value;
      }
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 20;
    private global::SKF.Enlight.API.Config.Temperature temperature_ = global::SKF.Enlight.API.Config.Temperature.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.Temperature Temperature {
      get { return temperature_; }
      set {
        temperature_ = value;
      }
    }

    /// <summary>Field number for the "externalSensorUsage" field.</summary>
    public const int ExternalSensorUsageFieldNumber = 21;
    private global::SKF.Enlight.API.Config.ExternalSensorUsage externalSensorUsage_ = global::SKF.Enlight.API.Config.ExternalSensorUsage.Disabled;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SKF.Enlight.API.Config.ExternalSensorUsage ExternalSensorUsage {
      get { return externalSensorUsage_; }
      set {
        externalSensorUsage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QCMeasurementPointConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QCMeasurementPointConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SampleRate != other.SampleRate) return false;
      if (SampleAmount != other.SampleAmount) return false;
      if (EnvelopeBandSelection != other.EnvelopeBandSelection) return false;
      if (ExternalSensorEngineeringUnits != other.ExternalSensorEngineeringUnits) return false;
      if (ExternalSensorSensitivity != other.ExternalSensorSensitivity) return false;
      if (ExternalSensorICP != other.ExternalSensorICP) return false;
      if (ViewSignalType != other.ViewSignalType) return false;
      if (YAxisUnits != other.YAxisUnits) return false;
      if (XAxisUnits != other.XAxisUnits) return false;
      if (YAxisDisplay != other.YAxisDisplay) return false;
      if (InputRange != other.InputRange) return false;
      if (DetectionType != other.DetectionType) return false;
      if (WindowType != other.WindowType) return false;
      if (HighPassFilter != other.HighPassFilter) return false;
      if (Temperature != other.Temperature) return false;
      if (ExternalSensorUsage != other.ExternalSensorUsage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SampleRate != global::SKF.Enlight.API.Config.SampleRate.RateUnknown) hash ^= SampleRate.GetHashCode();
      if (SampleAmount != global::SKF.Enlight.API.Config.SampleAmount.AmountUnknown) hash ^= SampleAmount.GetHashCode();
      if (EnvelopeBandSelection != global::SKF.Enlight.API.Config.EnvelopeBandSelection.BandUnknown) hash ^= EnvelopeBandSelection.GetHashCode();
      if (ExternalSensorEngineeringUnits != global::SKF.Enlight.API.Config.ExternalSensorEngineeringUnits.UnitUnknown) hash ^= ExternalSensorEngineeringUnits.GetHashCode();
      if (ExternalSensorSensitivity != global::SKF.Enlight.API.Config.ExternalSensorSensitivity.SensitivityUnknown) hash ^= ExternalSensorSensitivity.GetHashCode();
      if (ExternalSensorICP != global::SKF.Enlight.API.Config.ExternalSensorICP.IcpUnknown) hash ^= ExternalSensorICP.GetHashCode();
      if (ViewSignalType != global::SKF.Enlight.API.Config.ViewSignalType.ViewSignalUnknown) hash ^= ViewSignalType.GetHashCode();
      if (YAxisUnits != global::SKF.Enlight.API.Config.YAxisUnits.YAxisUnknown) hash ^= YAxisUnits.GetHashCode();
      if (XAxisUnits != global::SKF.Enlight.API.Config.XAxisUnits.XAxisUnknonw) hash ^= XAxisUnits.GetHashCode();
      if (YAxisDisplay != global::SKF.Enlight.API.Config.YAxisDisplay.Unknown) hash ^= YAxisDisplay.GetHashCode();
      if (InputRange != global::SKF.Enlight.API.Config.InputRange.RangeUnknown) hash ^= InputRange.GetHashCode();
      if (DetectionType != global::SKF.Enlight.API.Config.DetectionType.DetectionUnknown) hash ^= DetectionType.GetHashCode();
      if (WindowType != global::SKF.Enlight.API.Config.WindowType.WindowUnknown) hash ^= WindowType.GetHashCode();
      if (HighPassFilter != global::SKF.Enlight.API.Config.HighPassFilter.FilterUnknown) hash ^= HighPassFilter.GetHashCode();
      if (Temperature != global::SKF.Enlight.API.Config.Temperature.Unknown) hash ^= Temperature.GetHashCode();
      if (ExternalSensorUsage != global::SKF.Enlight.API.Config.ExternalSensorUsage.Disabled) hash ^= ExternalSensorUsage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SampleRate != global::SKF.Enlight.API.Config.SampleRate.RateUnknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) SampleRate);
      }
      if (SampleAmount != global::SKF.Enlight.API.Config.SampleAmount.AmountUnknown) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SampleAmount);
      }
      if (EnvelopeBandSelection != global::SKF.Enlight.API.Config.EnvelopeBandSelection.BandUnknown) {
        output.WriteRawTag(40);
        output.WriteEnum((int) EnvelopeBandSelection);
      }
      if (ExternalSensorEngineeringUnits != global::SKF.Enlight.API.Config.ExternalSensorEngineeringUnits.UnitUnknown) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ExternalSensorEngineeringUnits);
      }
      if (ExternalSensorSensitivity != global::SKF.Enlight.API.Config.ExternalSensorSensitivity.SensitivityUnknown) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ExternalSensorSensitivity);
      }
      if (ExternalSensorICP != global::SKF.Enlight.API.Config.ExternalSensorICP.IcpUnknown) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ExternalSensorICP);
      }
      if (ViewSignalType != global::SKF.Enlight.API.Config.ViewSignalType.ViewSignalUnknown) {
        output.WriteRawTag(72);
        output.WriteEnum((int) ViewSignalType);
      }
      if (YAxisUnits != global::SKF.Enlight.API.Config.YAxisUnits.YAxisUnknown) {
        output.WriteRawTag(80);
        output.WriteEnum((int) YAxisUnits);
      }
      if (XAxisUnits != global::SKF.Enlight.API.Config.XAxisUnits.XAxisUnknonw) {
        output.WriteRawTag(88);
        output.WriteEnum((int) XAxisUnits);
      }
      if (YAxisDisplay != global::SKF.Enlight.API.Config.YAxisDisplay.Unknown) {
        output.WriteRawTag(96);
        output.WriteEnum((int) YAxisDisplay);
      }
      if (InputRange != global::SKF.Enlight.API.Config.InputRange.RangeUnknown) {
        output.WriteRawTag(104);
        output.WriteEnum((int) InputRange);
      }
      if (DetectionType != global::SKF.Enlight.API.Config.DetectionType.DetectionUnknown) {
        output.WriteRawTag(112);
        output.WriteEnum((int) DetectionType);
      }
      if (WindowType != global::SKF.Enlight.API.Config.WindowType.WindowUnknown) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) WindowType);
      }
      if (HighPassFilter != global::SKF.Enlight.API.Config.HighPassFilter.FilterUnknown) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) HighPassFilter);
      }
      if (Temperature != global::SKF.Enlight.API.Config.Temperature.Unknown) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) Temperature);
      }
      if (ExternalSensorUsage != global::SKF.Enlight.API.Config.ExternalSensorUsage.Disabled) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) ExternalSensorUsage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SampleRate != global::SKF.Enlight.API.Config.SampleRate.RateUnknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SampleRate);
      }
      if (SampleAmount != global::SKF.Enlight.API.Config.SampleAmount.AmountUnknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SampleAmount);
      }
      if (EnvelopeBandSelection != global::SKF.Enlight.API.Config.EnvelopeBandSelection.BandUnknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EnvelopeBandSelection);
      }
      if (ExternalSensorEngineeringUnits != global::SKF.Enlight.API.Config.ExternalSensorEngineeringUnits.UnitUnknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExternalSensorEngineeringUnits);
      }
      if (ExternalSensorSensitivity != global::SKF.Enlight.API.Config.ExternalSensorSensitivity.SensitivityUnknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExternalSensorSensitivity);
      }
      if (ExternalSensorICP != global::SKF.Enlight.API.Config.ExternalSensorICP.IcpUnknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExternalSensorICP);
      }
      if (ViewSignalType != global::SKF.Enlight.API.Config.ViewSignalType.ViewSignalUnknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ViewSignalType);
      }
      if (YAxisUnits != global::SKF.Enlight.API.Config.YAxisUnits.YAxisUnknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) YAxisUnits);
      }
      if (XAxisUnits != global::SKF.Enlight.API.Config.XAxisUnits.XAxisUnknonw) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) XAxisUnits);
      }
      if (YAxisDisplay != global::SKF.Enlight.API.Config.YAxisDisplay.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) YAxisDisplay);
      }
      if (InputRange != global::SKF.Enlight.API.Config.InputRange.RangeUnknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InputRange);
      }
      if (DetectionType != global::SKF.Enlight.API.Config.DetectionType.DetectionUnknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DetectionType);
      }
      if (WindowType != global::SKF.Enlight.API.Config.WindowType.WindowUnknown) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) WindowType);
      }
      if (HighPassFilter != global::SKF.Enlight.API.Config.HighPassFilter.FilterUnknown) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HighPassFilter);
      }
      if (Temperature != global::SKF.Enlight.API.Config.Temperature.Unknown) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Temperature);
      }
      if (ExternalSensorUsage != global::SKF.Enlight.API.Config.ExternalSensorUsage.Disabled) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExternalSensorUsage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QCMeasurementPointConfig other) {
      if (other == null) {
        return;
      }
      if (other.SampleRate != global::SKF.Enlight.API.Config.SampleRate.RateUnknown) {
        SampleRate = other.SampleRate;
      }
      if (other.SampleAmount != global::SKF.Enlight.API.Config.SampleAmount.AmountUnknown) {
        SampleAmount = other.SampleAmount;
      }
      if (other.EnvelopeBandSelection != global::SKF.Enlight.API.Config.EnvelopeBandSelection.BandUnknown) {
        EnvelopeBandSelection = other.EnvelopeBandSelection;
      }
      if (other.ExternalSensorEngineeringUnits != global::SKF.Enlight.API.Config.ExternalSensorEngineeringUnits.UnitUnknown) {
        ExternalSensorEngineeringUnits = other.ExternalSensorEngineeringUnits;
      }
      if (other.ExternalSensorSensitivity != global::SKF.Enlight.API.Config.ExternalSensorSensitivity.SensitivityUnknown) {
        ExternalSensorSensitivity = other.ExternalSensorSensitivity;
      }
      if (other.ExternalSensorICP != global::SKF.Enlight.API.Config.ExternalSensorICP.IcpUnknown) {
        ExternalSensorICP = other.ExternalSensorICP;
      }
      if (other.ViewSignalType != global::SKF.Enlight.API.Config.ViewSignalType.ViewSignalUnknown) {
        ViewSignalType = other.ViewSignalType;
      }
      if (other.YAxisUnits != global::SKF.Enlight.API.Config.YAxisUnits.YAxisUnknown) {
        YAxisUnits = other.YAxisUnits;
      }
      if (other.XAxisUnits != global::SKF.Enlight.API.Config.XAxisUnits.XAxisUnknonw) {
        XAxisUnits = other.XAxisUnits;
      }
      if (other.YAxisDisplay != global::SKF.Enlight.API.Config.YAxisDisplay.Unknown) {
        YAxisDisplay = other.YAxisDisplay;
      }
      if (other.InputRange != global::SKF.Enlight.API.Config.InputRange.RangeUnknown) {
        InputRange = other.InputRange;
      }
      if (other.DetectionType != global::SKF.Enlight.API.Config.DetectionType.DetectionUnknown) {
        DetectionType = other.DetectionType;
      }
      if (other.WindowType != global::SKF.Enlight.API.Config.WindowType.WindowUnknown) {
        WindowType = other.WindowType;
      }
      if (other.HighPassFilter != global::SKF.Enlight.API.Config.HighPassFilter.FilterUnknown) {
        HighPassFilter = other.HighPassFilter;
      }
      if (other.Temperature != global::SKF.Enlight.API.Config.Temperature.Unknown) {
        Temperature = other.Temperature;
      }
      if (other.ExternalSensorUsage != global::SKF.Enlight.API.Config.ExternalSensorUsage.Disabled) {
        ExternalSensorUsage = other.ExternalSensorUsage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SampleRate = (global::SKF.Enlight.API.Config.SampleRate) input.ReadEnum();
            break;
          }
          case 16: {
            SampleAmount = (global::SKF.Enlight.API.Config.SampleAmount) input.ReadEnum();
            break;
          }
          case 40: {
            EnvelopeBandSelection = (global::SKF.Enlight.API.Config.EnvelopeBandSelection) input.ReadEnum();
            break;
          }
          case 48: {
            ExternalSensorEngineeringUnits = (global::SKF.Enlight.API.Config.ExternalSensorEngineeringUnits) input.ReadEnum();
            break;
          }
          case 56: {
            ExternalSensorSensitivity = (global::SKF.Enlight.API.Config.ExternalSensorSensitivity) input.ReadEnum();
            break;
          }
          case 64: {
            ExternalSensorICP = (global::SKF.Enlight.API.Config.ExternalSensorICP) input.ReadEnum();
            break;
          }
          case 72: {
            ViewSignalType = (global::SKF.Enlight.API.Config.ViewSignalType) input.ReadEnum();
            break;
          }
          case 80: {
            YAxisUnits = (global::SKF.Enlight.API.Config.YAxisUnits) input.ReadEnum();
            break;
          }
          case 88: {
            XAxisUnits = (global::SKF.Enlight.API.Config.XAxisUnits) input.ReadEnum();
            break;
          }
          case 96: {
            YAxisDisplay = (global::SKF.Enlight.API.Config.YAxisDisplay) input.ReadEnum();
            break;
          }
          case 104: {
            InputRange = (global::SKF.Enlight.API.Config.InputRange) input.ReadEnum();
            break;
          }
          case 112: {
            DetectionType = (global::SKF.Enlight.API.Config.DetectionType) input.ReadEnum();
            break;
          }
          case 144: {
            WindowType = (global::SKF.Enlight.API.Config.WindowType) input.ReadEnum();
            break;
          }
          case 152: {
            HighPassFilter = (global::SKF.Enlight.API.Config.HighPassFilter) input.ReadEnum();
            break;
          }
          case 160: {
            Temperature = (global::SKF.Enlight.API.Config.Temperature) input.ReadEnum();
            break;
          }
          case 168: {
            ExternalSensorUsage = (global::SKF.Enlight.API.Config.ExternalSensorUsage) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
