// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: config/grpcapi.proto

package config

import (
	context "context"
	common "github.com/SKF/proto/v2/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TargetType int32

const (
	TargetType_TARGET_GENERIC                         TargetType = 0
	TargetType_TARGET_QUICK_COLLECT_MEASUREMENT_POINT TargetType = 1
)

// Enum value maps for TargetType.
var (
	TargetType_name = map[int32]string{
		0: "TARGET_GENERIC",
		1: "TARGET_QUICK_COLLECT_MEASUREMENT_POINT",
	}
	TargetType_value = map[string]int32{
		"TARGET_GENERIC":                         0,
		"TARGET_QUICK_COLLECT_MEASUREMENT_POINT": 1,
	}
)

func (x TargetType) Enum() *TargetType {
	p := new(TargetType)
	*p = x
	return p
}

func (x TargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_grpcapi_proto_enumTypes[0].Descriptor()
}

func (TargetType) Type() protoreflect.EnumType {
	return &file_config_grpcapi_proto_enumTypes[0]
}

func (x TargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TargetType.Descriptor instead.
func (TargetType) EnumDescriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{0}
}

type SampleRate int32

const (
	SampleRate_RATE_UNKNOWN SampleRate = 0
	SampleRate_RATE_256     SampleRate = 1
	SampleRate_RATE_1280    SampleRate = 2
	SampleRate_RATE_2560    SampleRate = 3
	SampleRate_RATE_5120    SampleRate = 4
	SampleRate_RATE_12800   SampleRate = 5
	SampleRate_RATE_25600   SampleRate = 6
	SampleRate_RATE_51200   SampleRate = 7
	SampleRate_RATE_102400  SampleRate = 8
)

// Enum value maps for SampleRate.
var (
	SampleRate_name = map[int32]string{
		0: "RATE_UNKNOWN",
		1: "RATE_256",
		2: "RATE_1280",
		3: "RATE_2560",
		4: "RATE_5120",
		5: "RATE_12800",
		6: "RATE_25600",
		7: "RATE_51200",
		8: "RATE_102400",
	}
	SampleRate_value = map[string]int32{
		"RATE_UNKNOWN": 0,
		"RATE_256":     1,
		"RATE_1280":    2,
		"RATE_2560":    3,
		"RATE_5120":    4,
		"RATE_12800":   5,
		"RATE_25600":   6,
		"RATE_51200":   7,
		"RATE_102400":  8,
	}
)

func (x SampleRate) Enum() *SampleRate {
	p := new(SampleRate)
	*p = x
	return p
}

func (x SampleRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SampleRate) Descriptor() protoreflect.EnumDescriptor {
	return file_config_grpcapi_proto_enumTypes[1].Descriptor()
}

func (SampleRate) Type() protoreflect.EnumType {
	return &file_config_grpcapi_proto_enumTypes[1]
}

func (x SampleRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SampleRate.Descriptor instead.
func (SampleRate) EnumDescriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{1}
}

type SampleAmount int32

const (
	SampleAmount_AMOUNT_UNKNOWN SampleAmount = 0
	SampleAmount_AMOUNT_256     SampleAmount = 1
	SampleAmount_AMOUNT_512     SampleAmount = 2
	SampleAmount_AMOUNT_1024    SampleAmount = 3
	SampleAmount_AMOUNT_2048    SampleAmount = 4
	SampleAmount_AMOUNT_4096    SampleAmount = 5
	SampleAmount_AMOUNT_8192    SampleAmount = 6
)

// Enum value maps for SampleAmount.
var (
	SampleAmount_name = map[int32]string{
		0: "AMOUNT_UNKNOWN",
		1: "AMOUNT_256",
		2: "AMOUNT_512",
		3: "AMOUNT_1024",
		4: "AMOUNT_2048",
		5: "AMOUNT_4096",
		6: "AMOUNT_8192",
	}
	SampleAmount_value = map[string]int32{
		"AMOUNT_UNKNOWN": 0,
		"AMOUNT_256":     1,
		"AMOUNT_512":     2,
		"AMOUNT_1024":    3,
		"AMOUNT_2048":    4,
		"AMOUNT_4096":    5,
		"AMOUNT_8192":    6,
	}
)

func (x SampleAmount) Enum() *SampleAmount {
	p := new(SampleAmount)
	*p = x
	return p
}

func (x SampleAmount) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SampleAmount) Descriptor() protoreflect.EnumDescriptor {
	return file_config_grpcapi_proto_enumTypes[2].Descriptor()
}

func (SampleAmount) Type() protoreflect.EnumType {
	return &file_config_grpcapi_proto_enumTypes[2]
}

func (x SampleAmount) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SampleAmount.Descriptor instead.
func (SampleAmount) EnumDescriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{2}
}

type EnvelopeBandSelection int32

const (
	EnvelopeBandSelection_BAND_UNKNOWN EnvelopeBandSelection = 0
	EnvelopeBandSelection_BAND_1       EnvelopeBandSelection = 1
	EnvelopeBandSelection_BAND_2       EnvelopeBandSelection = 2
	EnvelopeBandSelection_BAND_3       EnvelopeBandSelection = 3
)

// Enum value maps for EnvelopeBandSelection.
var (
	EnvelopeBandSelection_name = map[int32]string{
		0: "BAND_UNKNOWN",
		1: "BAND_1",
		2: "BAND_2",
		3: "BAND_3",
	}
	EnvelopeBandSelection_value = map[string]int32{
		"BAND_UNKNOWN": 0,
		"BAND_1":       1,
		"BAND_2":       2,
		"BAND_3":       3,
	}
)

func (x EnvelopeBandSelection) Enum() *EnvelopeBandSelection {
	p := new(EnvelopeBandSelection)
	*p = x
	return p
}

func (x EnvelopeBandSelection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnvelopeBandSelection) Descriptor() protoreflect.EnumDescriptor {
	return file_config_grpcapi_proto_enumTypes[3].Descriptor()
}

func (EnvelopeBandSelection) Type() protoreflect.EnumType {
	return &file_config_grpcapi_proto_enumTypes[3]
}

func (x EnvelopeBandSelection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnvelopeBandSelection.Descriptor instead.
func (EnvelopeBandSelection) EnumDescriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{3}
}

type ExternalSensorEngineeringUnits int32

const (
	ExternalSensorEngineeringUnits_UNIT_UNKNOWN             ExternalSensorEngineeringUnits = 0
	ExternalSensorEngineeringUnits_UNIT_ACCELERATION_EUS_GS ExternalSensorEngineeringUnits = 1
)

// Enum value maps for ExternalSensorEngineeringUnits.
var (
	ExternalSensorEngineeringUnits_name = map[int32]string{
		0: "UNIT_UNKNOWN",
		1: "UNIT_ACCELERATION_EUS_GS",
	}
	ExternalSensorEngineeringUnits_value = map[string]int32{
		"UNIT_UNKNOWN":             0,
		"UNIT_ACCELERATION_EUS_GS": 1,
	}
)

func (x ExternalSensorEngineeringUnits) Enum() *ExternalSensorEngineeringUnits {
	p := new(ExternalSensorEngineeringUnits)
	*p = x
	return p
}

func (x ExternalSensorEngineeringUnits) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalSensorEngineeringUnits) Descriptor() protoreflect.EnumDescriptor {
	return file_config_grpcapi_proto_enumTypes[4].Descriptor()
}

func (ExternalSensorEngineeringUnits) Type() protoreflect.EnumType {
	return &file_config_grpcapi_proto_enumTypes[4]
}

func (x ExternalSensorEngineeringUnits) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalSensorEngineeringUnits.Descriptor instead.
func (ExternalSensorEngineeringUnits) EnumDescriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{4}
}

type ExternalSensorSensitivity int32

const (
	ExternalSensorSensitivity_SENSITIVITY_UNKNOWN       ExternalSensorSensitivity = 0
	ExternalSensorSensitivity_SENSITIVITY_100_MV_PER_EU ExternalSensorSensitivity = 1
)

// Enum value maps for ExternalSensorSensitivity.
var (
	ExternalSensorSensitivity_name = map[int32]string{
		0: "SENSITIVITY_UNKNOWN",
		1: "SENSITIVITY_100_MV_PER_EU",
	}
	ExternalSensorSensitivity_value = map[string]int32{
		"SENSITIVITY_UNKNOWN":       0,
		"SENSITIVITY_100_MV_PER_EU": 1,
	}
)

func (x ExternalSensorSensitivity) Enum() *ExternalSensorSensitivity {
	p := new(ExternalSensorSensitivity)
	*p = x
	return p
}

func (x ExternalSensorSensitivity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalSensorSensitivity) Descriptor() protoreflect.EnumDescriptor {
	return file_config_grpcapi_proto_enumTypes[5].Descriptor()
}

func (ExternalSensorSensitivity) Type() protoreflect.EnumType {
	return &file_config_grpcapi_proto_enumTypes[5]
}

func (x ExternalSensorSensitivity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalSensorSensitivity.Descriptor instead.
func (ExternalSensorSensitivity) EnumDescriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{5}
}

type ExternalSensorICP int32

const (
	ExternalSensorICP_ICP_UNKNOWN              ExternalSensorICP = 0
	ExternalSensorICP_ICP_REQUIRED_WHEN_IN_USE ExternalSensorICP = 1
)

// Enum value maps for ExternalSensorICP.
var (
	ExternalSensorICP_name = map[int32]string{
		0: "ICP_UNKNOWN",
		1: "ICP_REQUIRED_WHEN_IN_USE",
	}
	ExternalSensorICP_value = map[string]int32{
		"ICP_UNKNOWN":              0,
		"ICP_REQUIRED_WHEN_IN_USE": 1,
	}
)

func (x ExternalSensorICP) Enum() *ExternalSensorICP {
	p := new(ExternalSensorICP)
	*p = x
	return p
}

func (x ExternalSensorICP) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalSensorICP) Descriptor() protoreflect.EnumDescriptor {
	return file_config_grpcapi_proto_enumTypes[6].Descriptor()
}

func (ExternalSensorICP) Type() protoreflect.EnumType {
	return &file_config_grpcapi_proto_enumTypes[6]
}

func (x ExternalSensorICP) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalSensorICP.Descriptor instead.
func (ExternalSensorICP) EnumDescriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{6}
}

type ViewSignalType int32

const (
	ViewSignalType_VIEW_SIGNAL_UNKNOWN           ViewSignalType = 0
	ViewSignalType_VIEW_SIGNAL_SPECTRUM_ONLY     ViewSignalType = 1
	ViewSignalType_VIEW_SIGNAL_SPECTRUM_AND_TIME ViewSignalType = 2
)

// Enum value maps for ViewSignalType.
var (
	ViewSignalType_name = map[int32]string{
		0: "VIEW_SIGNAL_UNKNOWN",
		1: "VIEW_SIGNAL_SPECTRUM_ONLY",
		2: "VIEW_SIGNAL_SPECTRUM_AND_TIME",
	}
	ViewSignalType_value = map[string]int32{
		"VIEW_SIGNAL_UNKNOWN":           0,
		"VIEW_SIGNAL_SPECTRUM_ONLY":     1,
		"VIEW_SIGNAL_SPECTRUM_AND_TIME": 2,
	}
)

func (x ViewSignalType) Enum() *ViewSignalType {
	p := new(ViewSignalType)
	*p = x
	return p
}

func (x ViewSignalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewSignalType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_grpcapi_proto_enumTypes[7].Descriptor()
}

func (ViewSignalType) Type() protoreflect.EnumType {
	return &file_config_grpcapi_proto_enumTypes[7]
}

func (x ViewSignalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ViewSignalType.Descriptor instead.
func (ViewSignalType) EnumDescriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{7}
}

type YAxisUnits int32

const (
	YAxisUnits_Y_AXIS_UNKNOWN                YAxisUnits = 0
	YAxisUnits_Y_AXIS_ACCELERATION_IN_GS     YAxisUnits = 1
	YAxisUnits_Y_AXIS_VELOCITY_IN_MM_PER_SEC YAxisUnits = 2
	YAxisUnits_Y_AXIS_ENVELOPED_GE_IN_GES    YAxisUnits = 3
)

// Enum value maps for YAxisUnits.
var (
	YAxisUnits_name = map[int32]string{
		0: "Y_AXIS_UNKNOWN",
		1: "Y_AXIS_ACCELERATION_IN_GS",
		2: "Y_AXIS_VELOCITY_IN_MM_PER_SEC",
		3: "Y_AXIS_ENVELOPED_GE_IN_GES",
	}
	YAxisUnits_value = map[string]int32{
		"Y_AXIS_UNKNOWN":                0,
		"Y_AXIS_ACCELERATION_IN_GS":     1,
		"Y_AXIS_VELOCITY_IN_MM_PER_SEC": 2,
		"Y_AXIS_ENVELOPED_GE_IN_GES":    3,
	}
)

func (x YAxisUnits) Enum() *YAxisUnits {
	p := new(YAxisUnits)
	*p = x
	return p
}

func (x YAxisUnits) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (YAxisUnits) Descriptor() protoreflect.EnumDescriptor {
	return file_config_grpcapi_proto_enumTypes[8].Descriptor()
}

func (YAxisUnits) Type() protoreflect.EnumType {
	return &file_config_grpcapi_proto_enumTypes[8]
}

func (x YAxisUnits) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use YAxisUnits.Descriptor instead.
func (YAxisUnits) EnumDescriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{8}
}

type XAxisUnits int32

const (
	XAxisUnits_X_AXIS_UNKNONW         XAxisUnits = 0
	XAxisUnits_X_AXIS_FREQUENCY_IN_HZ XAxisUnits = 1
)

// Enum value maps for XAxisUnits.
var (
	XAxisUnits_name = map[int32]string{
		0: "X_AXIS_UNKNONW",
		1: "X_AXIS_FREQUENCY_IN_HZ",
	}
	XAxisUnits_value = map[string]int32{
		"X_AXIS_UNKNONW":         0,
		"X_AXIS_FREQUENCY_IN_HZ": 1,
	}
)

func (x XAxisUnits) Enum() *XAxisUnits {
	p := new(XAxisUnits)
	*p = x
	return p
}

func (x XAxisUnits) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XAxisUnits) Descriptor() protoreflect.EnumDescriptor {
	return file_config_grpcapi_proto_enumTypes[9].Descriptor()
}

func (XAxisUnits) Type() protoreflect.EnumType {
	return &file_config_grpcapi_proto_enumTypes[9]
}

func (x XAxisUnits) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XAxisUnits.Descriptor instead.
func (XAxisUnits) EnumDescriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{9}
}

type YAxisDisplay int32

const (
	YAxisDisplay_Y_AXIS_DISPLAY_UNKNOWN  YAxisDisplay = 0
	YAxisDisplay_Y_AXIS_DISPLAY_LINEARLY YAxisDisplay = 1
)

// Enum value maps for YAxisDisplay.
var (
	YAxisDisplay_name = map[int32]string{
		0: "Y_AXIS_DISPLAY_UNKNOWN",
		1: "Y_AXIS_DISPLAY_LINEARLY",
	}
	YAxisDisplay_value = map[string]int32{
		"Y_AXIS_DISPLAY_UNKNOWN":  0,
		"Y_AXIS_DISPLAY_LINEARLY": 1,
	}
)

func (x YAxisDisplay) Enum() *YAxisDisplay {
	p := new(YAxisDisplay)
	*p = x
	return p
}

func (x YAxisDisplay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (YAxisDisplay) Descriptor() protoreflect.EnumDescriptor {
	return file_config_grpcapi_proto_enumTypes[10].Descriptor()
}

func (YAxisDisplay) Type() protoreflect.EnumType {
	return &file_config_grpcapi_proto_enumTypes[10]
}

func (x YAxisDisplay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use YAxisDisplay.Descriptor instead.
func (YAxisDisplay) EnumDescriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{10}
}

type InputRange int32

const (
	InputRange_RANGE_UNKNOWN InputRange = 0
	InputRange_RANGE_100_GS  InputRange = 1
)

// Enum value maps for InputRange.
var (
	InputRange_name = map[int32]string{
		0: "RANGE_UNKNOWN",
		1: "RANGE_100_GS",
	}
	InputRange_value = map[string]int32{
		"RANGE_UNKNOWN": 0,
		"RANGE_100_GS":  1,
	}
)

func (x InputRange) Enum() *InputRange {
	p := new(InputRange)
	*p = x
	return p
}

func (x InputRange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputRange) Descriptor() protoreflect.EnumDescriptor {
	return file_config_grpcapi_proto_enumTypes[11].Descriptor()
}

func (InputRange) Type() protoreflect.EnumType {
	return &file_config_grpcapi_proto_enumTypes[11]
}

func (x InputRange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InputRange.Descriptor instead.
func (InputRange) EnumDescriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{11}
}

type DetectionType int32

const (
	DetectionType_DETECTION_UNKNOWN                          DetectionType = 0
	DetectionType_DETECTION_RMS                              DetectionType = 1
	DetectionType_DETECTION_PEAK_CALCULATED_FROM_RMS         DetectionType = 2
	DetectionType_DETECTION_PEAK_TO_PEAK_CALCULATED_FROM_RMS DetectionType = 3
	DetectionType_DETECTION_TRUE_PEAK_FROM_PEAK_TO_PEAK      DetectionType = 4
	DetectionType_DETECTION_TRUE_PEAK_TO_PEAK                DetectionType = 5
)

// Enum value maps for DetectionType.
var (
	DetectionType_name = map[int32]string{
		0: "DETECTION_UNKNOWN",
		1: "DETECTION_RMS",
		2: "DETECTION_PEAK_CALCULATED_FROM_RMS",
		3: "DETECTION_PEAK_TO_PEAK_CALCULATED_FROM_RMS",
		4: "DETECTION_TRUE_PEAK_FROM_PEAK_TO_PEAK",
		5: "DETECTION_TRUE_PEAK_TO_PEAK",
	}
	DetectionType_value = map[string]int32{
		"DETECTION_UNKNOWN":                          0,
		"DETECTION_RMS":                              1,
		"DETECTION_PEAK_CALCULATED_FROM_RMS":         2,
		"DETECTION_PEAK_TO_PEAK_CALCULATED_FROM_RMS": 3,
		"DETECTION_TRUE_PEAK_FROM_PEAK_TO_PEAK":      4,
		"DETECTION_TRUE_PEAK_TO_PEAK":                5,
	}
)

func (x DetectionType) Enum() *DetectionType {
	p := new(DetectionType)
	*p = x
	return p
}

func (x DetectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DetectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_grpcapi_proto_enumTypes[12].Descriptor()
}

func (DetectionType) Type() protoreflect.EnumType {
	return &file_config_grpcapi_proto_enumTypes[12]
}

func (x DetectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DetectionType.Descriptor instead.
func (DetectionType) EnumDescriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{12}
}

type WindowType int32

const (
	WindowType_WINDOW_UNKNOWN WindowType = 0
	WindowType_WINDOW_HANNING WindowType = 1
)

// Enum value maps for WindowType.
var (
	WindowType_name = map[int32]string{
		0: "WINDOW_UNKNOWN",
		1: "WINDOW_HANNING",
	}
	WindowType_value = map[string]int32{
		"WINDOW_UNKNOWN": 0,
		"WINDOW_HANNING": 1,
	}
)

func (x WindowType) Enum() *WindowType {
	p := new(WindowType)
	*p = x
	return p
}

func (x WindowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WindowType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_grpcapi_proto_enumTypes[13].Descriptor()
}

func (WindowType) Type() protoreflect.EnumType {
	return &file_config_grpcapi_proto_enumTypes[13]
}

func (x WindowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WindowType.Descriptor instead.
func (WindowType) EnumDescriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{13}
}

type HighPassFilter int32

const (
	HighPassFilter_FILTER_UNKNOWN HighPassFilter = 0
	HighPassFilter_FILTER_OFF     HighPassFilter = 1
	HighPassFilter_FILTER_2_HZ    HighPassFilter = 2
	HighPassFilter_FILTER_10_HZ   HighPassFilter = 3
	HighPassFilter_FILTER_70_HZ   HighPassFilter = 4
)

// Enum value maps for HighPassFilter.
var (
	HighPassFilter_name = map[int32]string{
		0: "FILTER_UNKNOWN",
		1: "FILTER_OFF",
		2: "FILTER_2_HZ",
		3: "FILTER_10_HZ",
		4: "FILTER_70_HZ",
	}
	HighPassFilter_value = map[string]int32{
		"FILTER_UNKNOWN": 0,
		"FILTER_OFF":     1,
		"FILTER_2_HZ":    2,
		"FILTER_10_HZ":   3,
		"FILTER_70_HZ":   4,
	}
)

func (x HighPassFilter) Enum() *HighPassFilter {
	p := new(HighPassFilter)
	*p = x
	return p
}

func (x HighPassFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HighPassFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_config_grpcapi_proto_enumTypes[14].Descriptor()
}

func (HighPassFilter) Type() protoreflect.EnumType {
	return &file_config_grpcapi_proto_enumTypes[14]
}

func (x HighPassFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HighPassFilter.Descriptor instead.
func (HighPassFilter) EnumDescriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{14}
}

type Temperature int32

const (
	Temperature_TEMPERATURE_UNKNOWN            Temperature = 0
	Temperature_TEMPERATURE_DEGREES_FAHRENHEIT Temperature = 1
	Temperature_TEMPERATURE_DEGREES_CELCIUS    Temperature = 2
	Temperature_TEMPERATURE_DEGREES_KELVIN     Temperature = 3
)

// Enum value maps for Temperature.
var (
	Temperature_name = map[int32]string{
		0: "TEMPERATURE_UNKNOWN",
		1: "TEMPERATURE_DEGREES_FAHRENHEIT",
		2: "TEMPERATURE_DEGREES_CELCIUS",
		3: "TEMPERATURE_DEGREES_KELVIN",
	}
	Temperature_value = map[string]int32{
		"TEMPERATURE_UNKNOWN":            0,
		"TEMPERATURE_DEGREES_FAHRENHEIT": 1,
		"TEMPERATURE_DEGREES_CELCIUS":    2,
		"TEMPERATURE_DEGREES_KELVIN":     3,
	}
)

func (x Temperature) Enum() *Temperature {
	p := new(Temperature)
	*p = x
	return p
}

func (x Temperature) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Temperature) Descriptor() protoreflect.EnumDescriptor {
	return file_config_grpcapi_proto_enumTypes[15].Descriptor()
}

func (Temperature) Type() protoreflect.EnumType {
	return &file_config_grpcapi_proto_enumTypes[15]
}

func (x Temperature) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Temperature.Descriptor instead.
func (Temperature) EnumDescriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{15}
}

type ExternalSensorUsage int32

const (
	ExternalSensorUsage_ExternalSensorUsage_DISABLED ExternalSensorUsage = 0
	ExternalSensorUsage_ExternalSensorUsage_ENABLED  ExternalSensorUsage = 1
)

// Enum value maps for ExternalSensorUsage.
var (
	ExternalSensorUsage_name = map[int32]string{
		0: "ExternalSensorUsage_DISABLED",
		1: "ExternalSensorUsage_ENABLED",
	}
	ExternalSensorUsage_value = map[string]int32{
		"ExternalSensorUsage_DISABLED": 0,
		"ExternalSensorUsage_ENABLED":  1,
	}
)

func (x ExternalSensorUsage) Enum() *ExternalSensorUsage {
	p := new(ExternalSensorUsage)
	*p = x
	return p
}

func (x ExternalSensorUsage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalSensorUsage) Descriptor() protoreflect.EnumDescriptor {
	return file_config_grpcapi_proto_enumTypes[16].Descriptor()
}

func (ExternalSensorUsage) Type() protoreflect.EnumType {
	return &file_config_grpcapi_proto_enumTypes[16]
}

func (x ExternalSensorUsage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalSensorUsage.Descriptor instead.
func (ExternalSensorUsage) EnumDescriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{16}
}

type SpecificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetType TargetType `protobuf:"varint,1,opt,name=targetType,proto3,enum=grpcapi.TargetType" json:"targetType,omitempty"`
}

func (x *SpecificationRequest) Reset() {
	*x = SpecificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_grpcapi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificationRequest) ProtoMessage() {}

func (x *SpecificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_grpcapi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecificationRequest.ProtoReflect.Descriptor instead.
func (*SpecificationRequest) Descriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{0}
}

func (x *SpecificationRequest) GetTargetType() TargetType {
	if x != nil {
		return x.TargetType
	}
	return TargetType_TARGET_GENERIC
}

type SpecificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	VersionID     string `protobuf:"bytes,2,opt,name=versionID,proto3" json:"versionID,omitempty"`
	CreatedAtDate string `protobuf:"bytes,3,opt,name=createdAtDate,proto3" json:"createdAtDate,omitempty"` // RFC_3339 format
	Specification []byte `protobuf:"bytes,4,opt,name=specification,proto3" json:"specification,omitempty"`
}

func (x *SpecificationResponse) Reset() {
	*x = SpecificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_grpcapi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificationResponse) ProtoMessage() {}

func (x *SpecificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_grpcapi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecificationResponse.ProtoReflect.Descriptor instead.
func (*SpecificationResponse) Descriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{1}
}

func (x *SpecificationResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *SpecificationResponse) GetVersionID() string {
	if x != nil {
		return x.VersionID
	}
	return ""
}

func (x *SpecificationResponse) GetCreatedAtDate() string {
	if x != nil {
		return x.CreatedAtDate
	}
	return ""
}

func (x *SpecificationResponse) GetSpecification() []byte {
	if x != nil {
		return x.Specification
	}
	return nil
}

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigIDs []string `protobuf:"bytes,1,rep,name=configIDs,proto3" json:"configIDs,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_grpcapi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_grpcapi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigRequest) GetConfigIDs() []string {
	if x != nil {
		return x.ConfigIDs
	}
	return nil
}

type ConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs []*ConfigResponse `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (x *ConfigsResponse) Reset() {
	*x = ConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_grpcapi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigsResponse) ProtoMessage() {}

func (x *ConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_grpcapi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigsResponse.ProtoReflect.Descriptor instead.
func (*ConfigsResponse) Descriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigsResponse) GetConfigs() []*ConfigResponse {
	if x != nil {
		return x.Configs
	}
	return nil
}

type Configs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigQC *QCMeasurementPointConfig `protobuf:"bytes,1,opt,name=configQC,proto3" json:"configQC,omitempty"`
}

func (x *Configs) Reset() {
	*x = Configs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_grpcapi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configs) ProtoMessage() {}

func (x *Configs) ProtoReflect() protoreflect.Message {
	mi := &file_config_grpcapi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configs.ProtoReflect.Descriptor instead.
func (*Configs) Descriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{4}
}

func (x *Configs) GetConfigQC() *QCMeasurementPointConfig {
	if x != nil {
		return x.ConfigQC
	}
	return nil
}

type ConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigID      string                    `protobuf:"bytes,1,opt,name=configID,proto3" json:"configID,omitempty"`
	VersionID     string                    `protobuf:"bytes,2,opt,name=versionID,proto3" json:"versionID,omitempty"`
	CreatedAtDate string                    `protobuf:"bytes,3,opt,name=createdAtDate,proto3" json:"createdAtDate,omitempty"` // RFC_3339 format
	TargetID      []string                  `protobuf:"bytes,4,rep,name=targetID,proto3" json:"targetID,omitempty"`
	ConfigQC      *QCMeasurementPointConfig `protobuf:"bytes,5,opt,name=configQC,proto3" json:"configQC,omitempty"`
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_grpcapi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_grpcapi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigResponse) GetConfigID() string {
	if x != nil {
		return x.ConfigID
	}
	return ""
}

func (x *ConfigResponse) GetVersionID() string {
	if x != nil {
		return x.VersionID
	}
	return ""
}

func (x *ConfigResponse) GetCreatedAtDate() string {
	if x != nil {
		return x.CreatedAtDate
	}
	return ""
}

func (x *ConfigResponse) GetTargetID() []string {
	if x != nil {
		return x.TargetID
	}
	return nil
}

func (x *ConfigResponse) GetConfigQC() *QCMeasurementPointConfig {
	if x != nil {
		return x.ConfigQC
	}
	return nil
}

type LatestConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetIDs []string `protobuf:"bytes,1,rep,name=targetIDs,proto3" json:"targetIDs,omitempty"`
}

func (x *LatestConfigRequest) Reset() {
	*x = LatestConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_grpcapi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestConfigRequest) ProtoMessage() {}

func (x *LatestConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_grpcapi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestConfigRequest.ProtoReflect.Descriptor instead.
func (*LatestConfigRequest) Descriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{6}
}

func (x *LatestConfigRequest) GetTargetIDs() []string {
	if x != nil {
		return x.TargetIDs
	}
	return nil
}

type SetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigQC  *QCMeasurementPointConfig `protobuf:"bytes,2,opt,name=configQC,proto3" json:"configQC,omitempty"`
	TargetIDs []string                  `protobuf:"bytes,1,rep,name=targetIDs,proto3" json:"targetIDs,omitempty"`
}

func (x *SetConfigRequest) Reset() {
	*x = SetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_grpcapi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigRequest) ProtoMessage() {}

func (x *SetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_grpcapi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigRequest.ProtoReflect.Descriptor instead.
func (*SetConfigRequest) Descriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{7}
}

func (x *SetConfigRequest) GetConfigQC() *QCMeasurementPointConfig {
	if x != nil {
		return x.ConfigQC
	}
	return nil
}

func (x *SetConfigRequest) GetTargetIDs() []string {
	if x != nil {
		return x.TargetIDs
	}
	return nil
}

type QCMeasurementPointConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleRate                     SampleRate                     `protobuf:"varint,1,opt,name=sampleRate,proto3,enum=grpcapi.SampleRate" json:"sampleRate,omitempty"`
	SampleAmount                   SampleAmount                   `protobuf:"varint,2,opt,name=sampleAmount,proto3,enum=grpcapi.SampleAmount" json:"sampleAmount,omitempty"`
	EnvelopeBandSelection          EnvelopeBandSelection          `protobuf:"varint,5,opt,name=envelopeBandSelection,proto3,enum=grpcapi.EnvelopeBandSelection" json:"envelopeBandSelection,omitempty"`
	ExternalSensorEngineeringUnits ExternalSensorEngineeringUnits `protobuf:"varint,6,opt,name=externalSensorEngineeringUnits,proto3,enum=grpcapi.ExternalSensorEngineeringUnits" json:"externalSensorEngineeringUnits,omitempty"`
	ExternalSensorSensitivity      ExternalSensorSensitivity      `protobuf:"varint,7,opt,name=externalSensorSensitivity,proto3,enum=grpcapi.ExternalSensorSensitivity" json:"externalSensorSensitivity,omitempty"`
	ExternalSensorICP              ExternalSensorICP              `protobuf:"varint,8,opt,name=externalSensorICP,proto3,enum=grpcapi.ExternalSensorICP" json:"externalSensorICP,omitempty"`
	ViewSignalType                 ViewSignalType                 `protobuf:"varint,9,opt,name=viewSignalType,proto3,enum=grpcapi.ViewSignalType" json:"viewSignalType,omitempty"`
	YAxisUnits                     YAxisUnits                     `protobuf:"varint,10,opt,name=yAxisUnits,proto3,enum=grpcapi.YAxisUnits" json:"yAxisUnits,omitempty"`
	XAxisUnits                     XAxisUnits                     `protobuf:"varint,11,opt,name=XAxisUnits,proto3,enum=grpcapi.XAxisUnits" json:"XAxisUnits,omitempty"`
	YAxisDisplay                   YAxisDisplay                   `protobuf:"varint,12,opt,name=yAxisDisplay,proto3,enum=grpcapi.YAxisDisplay" json:"yAxisDisplay,omitempty"`
	InputRange                     InputRange                     `protobuf:"varint,13,opt,name=inputRange,proto3,enum=grpcapi.InputRange" json:"inputRange,omitempty"`
	DetectionType                  DetectionType                  `protobuf:"varint,14,opt,name=detectionType,proto3,enum=grpcapi.DetectionType" json:"detectionType,omitempty"`
	WindowType                     WindowType                     `protobuf:"varint,18,opt,name=windowType,proto3,enum=grpcapi.WindowType" json:"windowType,omitempty"`
	HighPassFilter                 HighPassFilter                 `protobuf:"varint,19,opt,name=highPassFilter,proto3,enum=grpcapi.HighPassFilter" json:"highPassFilter,omitempty"`
	Temperature                    Temperature                    `protobuf:"varint,20,opt,name=temperature,proto3,enum=grpcapi.Temperature" json:"temperature,omitempty"`
	ExternalSensorUsage            ExternalSensorUsage            `protobuf:"varint,21,opt,name=externalSensorUsage,proto3,enum=grpcapi.ExternalSensorUsage" json:"externalSensorUsage,omitempty"`
}

func (x *QCMeasurementPointConfig) Reset() {
	*x = QCMeasurementPointConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_grpcapi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QCMeasurementPointConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCMeasurementPointConfig) ProtoMessage() {}

func (x *QCMeasurementPointConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_grpcapi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCMeasurementPointConfig.ProtoReflect.Descriptor instead.
func (*QCMeasurementPointConfig) Descriptor() ([]byte, []int) {
	return file_config_grpcapi_proto_rawDescGZIP(), []int{8}
}

func (x *QCMeasurementPointConfig) GetSampleRate() SampleRate {
	if x != nil {
		return x.SampleRate
	}
	return SampleRate_RATE_UNKNOWN
}

func (x *QCMeasurementPointConfig) GetSampleAmount() SampleAmount {
	if x != nil {
		return x.SampleAmount
	}
	return SampleAmount_AMOUNT_UNKNOWN
}

func (x *QCMeasurementPointConfig) GetEnvelopeBandSelection() EnvelopeBandSelection {
	if x != nil {
		return x.EnvelopeBandSelection
	}
	return EnvelopeBandSelection_BAND_UNKNOWN
}

func (x *QCMeasurementPointConfig) GetExternalSensorEngineeringUnits() ExternalSensorEngineeringUnits {
	if x != nil {
		return x.ExternalSensorEngineeringUnits
	}
	return ExternalSensorEngineeringUnits_UNIT_UNKNOWN
}

func (x *QCMeasurementPointConfig) GetExternalSensorSensitivity() ExternalSensorSensitivity {
	if x != nil {
		return x.ExternalSensorSensitivity
	}
	return ExternalSensorSensitivity_SENSITIVITY_UNKNOWN
}

func (x *QCMeasurementPointConfig) GetExternalSensorICP() ExternalSensorICP {
	if x != nil {
		return x.ExternalSensorICP
	}
	return ExternalSensorICP_ICP_UNKNOWN
}

func (x *QCMeasurementPointConfig) GetViewSignalType() ViewSignalType {
	if x != nil {
		return x.ViewSignalType
	}
	return ViewSignalType_VIEW_SIGNAL_UNKNOWN
}

func (x *QCMeasurementPointConfig) GetYAxisUnits() YAxisUnits {
	if x != nil {
		return x.YAxisUnits
	}
	return YAxisUnits_Y_AXIS_UNKNOWN
}

func (x *QCMeasurementPointConfig) GetXAxisUnits() XAxisUnits {
	if x != nil {
		return x.XAxisUnits
	}
	return XAxisUnits_X_AXIS_UNKNONW
}

func (x *QCMeasurementPointConfig) GetYAxisDisplay() YAxisDisplay {
	if x != nil {
		return x.YAxisDisplay
	}
	return YAxisDisplay_Y_AXIS_DISPLAY_UNKNOWN
}

func (x *QCMeasurementPointConfig) GetInputRange() InputRange {
	if x != nil {
		return x.InputRange
	}
	return InputRange_RANGE_UNKNOWN
}

func (x *QCMeasurementPointConfig) GetDetectionType() DetectionType {
	if x != nil {
		return x.DetectionType
	}
	return DetectionType_DETECTION_UNKNOWN
}

func (x *QCMeasurementPointConfig) GetWindowType() WindowType {
	if x != nil {
		return x.WindowType
	}
	return WindowType_WINDOW_UNKNOWN
}

func (x *QCMeasurementPointConfig) GetHighPassFilter() HighPassFilter {
	if x != nil {
		return x.HighPassFilter
	}
	return HighPassFilter_FILTER_UNKNOWN
}

func (x *QCMeasurementPointConfig) GetTemperature() Temperature {
	if x != nil {
		return x.Temperature
	}
	return Temperature_TEMPERATURE_UNKNOWN
}

func (x *QCMeasurementPointConfig) GetExternalSensorUsage() ExternalSensorUsage {
	if x != nil {
		return x.ExternalSensorUsage
	}
	return ExternalSensorUsage_ExternalSensorUsage_DISABLED
}

var File_config_grpcapi_proto protoreflect.FileDescriptor

var file_config_grpcapi_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x1a,
	0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x14, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2d, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x44, 0x73, 0x22, 0x44, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x48, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x51,
	0x43, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70,
	0x69, 0x2e, 0x51, 0x43, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x51, 0x43, 0x22, 0xcb, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x51, 0x43, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e,
	0x51, 0x43, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x51, 0x43, 0x22, 0x33, 0x0a, 0x13, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x73, 0x22, 0x6f, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x51, 0x43, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x43, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x51, 0x43, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x73, 0x22, 0xf2, 0x08, 0x0a, 0x18, 0x51, 0x43, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0a,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x42, 0x61,
	0x6e, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x1e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x1e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x19,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x19, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x48,
	0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x49, 0x43, 0x50, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x49, 0x43, 0x50, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x43, 0x50, 0x12, 0x3f, 0x0a, 0x0e, 0x76, 0x69, 0x65, 0x77,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x79, 0x41, 0x78,
	0x69, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x59, 0x41, 0x78, 0x69, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x52, 0x0a, 0x79, 0x41, 0x78, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x33,
	0x0a, 0x0a, 0x58, 0x41, 0x78, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x58, 0x41, 0x78,
	0x69, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x0a, 0x58, 0x41, 0x78, 0x69, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x79, 0x41, 0x78, 0x69, 0x73, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x61, 0x70, 0x69, 0x2e, 0x59, 0x41, 0x78, 0x69, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x52, 0x0c, 0x79, 0x41, 0x78, 0x69, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x33,
	0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x33, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x50, 0x61,
	0x73, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x50, 0x61, 0x73,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x50, 0x61, 0x73,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x4e, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x0f, 0x10,
	0x10, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x2a, 0x4c, 0x0a,
	0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x10, 0x00, 0x12,
	0x2a, 0x0a, 0x26, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x5f,
	0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x9a, 0x01, 0x0a, 0x0a,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x31, 0x32, 0x38, 0x30, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x32, 0x35, 0x36, 0x30, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x35, 0x31, 0x32, 0x30, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x31, 0x32, 0x38, 0x30, 0x30, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x32, 0x35, 0x36, 0x30, 0x30, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x35, 0x31, 0x32, 0x30, 0x30, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x31, 0x30, 0x32, 0x34, 0x30, 0x30, 0x10, 0x08, 0x2a, 0x86, 0x01, 0x0a, 0x0c, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x35, 0x31, 0x32, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x31, 0x30, 0x32, 0x34, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x32, 0x30, 0x34, 0x38, 0x10, 0x04, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x34, 0x30, 0x39, 0x36, 0x10, 0x05,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x38, 0x31, 0x39, 0x32, 0x10,
	0x06, 0x2a, 0x4d, 0x0a, 0x15, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x42, 0x61, 0x6e,
	0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41,
	0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x42, 0x41, 0x4e, 0x44, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x4e, 0x44,
	0x5f, 0x32, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x33, 0x10, 0x03,
	0x2a, 0x50, 0x0a, 0x1e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x4c, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x55, 0x53, 0x5f, 0x47, 0x53,
	0x10, 0x01, 0x2a, 0x53, 0x0a, 0x19, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x4e, 0x53,
	0x49, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x4d, 0x56, 0x5f, 0x50,
	0x45, 0x52, 0x5f, 0x45, 0x55, 0x10, 0x01, 0x2a, 0x42, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x43, 0x50, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x43, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x49, 0x43, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x48,
	0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x01, 0x2a, 0x6b, 0x0a, 0x0e, 0x56,
	0x69, 0x65, 0x77, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x52, 0x55, 0x4d, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x52, 0x55, 0x4d, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x2a, 0x82, 0x01, 0x0a, 0x0a, 0x59, 0x41, 0x78,
	0x69, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x59, 0x5f, 0x41, 0x58, 0x49,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x59,
	0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x4c, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x53, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x59, 0x5f,
	0x41, 0x58, 0x49, 0x53, 0x5f, 0x56, 0x45, 0x4c, 0x4f, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e,
	0x5f, 0x4d, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x10, 0x02, 0x12, 0x1e, 0x0a,
	0x1a, 0x59, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x45, 0x4e, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45,
	0x44, 0x5f, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x45, 0x53, 0x10, 0x03, 0x2a, 0x3c, 0x0a,
	0x0a, 0x58, 0x41, 0x78, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x58,
	0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x4e, 0x57, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x58, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x48, 0x5a, 0x10, 0x01, 0x2a, 0x47, 0x0a, 0x0c, 0x59,
	0x41, 0x78, 0x69, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x59,
	0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x59, 0x5f, 0x41, 0x58, 0x49,
	0x53, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52,
	0x4c, 0x59, 0x10, 0x01, 0x2a, 0x31, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x31,
	0x30, 0x30, 0x5f, 0x47, 0x53, 0x10, 0x01, 0x2a, 0xdd, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4d,
	0x53, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x45, 0x41, 0x4b, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x52, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x41, 0x4b, 0x5f, 0x54, 0x4f,
	0x5f, 0x50, 0x45, 0x41, 0x4b, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x52, 0x4d, 0x53, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x5f, 0x50, 0x45,
	0x41, 0x4b, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x50, 0x45, 0x41, 0x4b, 0x5f, 0x54, 0x4f, 0x5f,
	0x50, 0x45, 0x41, 0x4b, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x5f, 0x50, 0x45, 0x41, 0x4b, 0x5f, 0x54, 0x4f,
	0x5f, 0x50, 0x45, 0x41, 0x4b, 0x10, 0x05, 0x2a, 0x34, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x49, 0x4e,
	0x44, 0x4f, 0x57, 0x5f, 0x48, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x2a, 0x69, 0x0a,
	0x0e, 0x48, 0x69, 0x67, 0x68, 0x50, 0x61, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x46,
	0x46, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x32, 0x5f,
	0x48, 0x5a, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x31,
	0x30, 0x5f, 0x48, 0x5a, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x37, 0x30, 0x5f, 0x48, 0x5a, 0x10, 0x04, 0x2a, 0x8b, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x4d, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x44, 0x45, 0x47, 0x52, 0x45, 0x45, 0x53, 0x5f, 0x46, 0x41, 0x48, 0x52, 0x45, 0x4e, 0x48,
	0x45, 0x49, 0x54, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x45, 0x45, 0x53, 0x5f, 0x43, 0x45, 0x4c,
	0x43, 0x49, 0x55, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x45, 0x45, 0x53, 0x5f, 0x4b, 0x45,
	0x4c, 0x56, 0x49, 0x4e, 0x10, 0x03, 0x2a, 0x58, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x1c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1f, 0x0a, 0x1b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01,
	0x32, 0x8c, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x73, 0x12, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x36, 0x5a, 0x1b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x4b,
	0x46, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xaa, 0x02,
	0x16, 0x53, 0x4b, 0x46, 0x2e, 0x45, 0x6e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x50, 0x49,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_grpcapi_proto_rawDescOnce sync.Once
	file_config_grpcapi_proto_rawDescData = file_config_grpcapi_proto_rawDesc
)

func file_config_grpcapi_proto_rawDescGZIP() []byte {
	file_config_grpcapi_proto_rawDescOnce.Do(func() {
		file_config_grpcapi_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_grpcapi_proto_rawDescData)
	})
	return file_config_grpcapi_proto_rawDescData
}

var file_config_grpcapi_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_config_grpcapi_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_config_grpcapi_proto_goTypes = []interface{}{
	(TargetType)(0),                     // 0: grpcapi.TargetType
	(SampleRate)(0),                     // 1: grpcapi.SampleRate
	(SampleAmount)(0),                   // 2: grpcapi.SampleAmount
	(EnvelopeBandSelection)(0),          // 3: grpcapi.EnvelopeBandSelection
	(ExternalSensorEngineeringUnits)(0), // 4: grpcapi.ExternalSensorEngineeringUnits
	(ExternalSensorSensitivity)(0),      // 5: grpcapi.ExternalSensorSensitivity
	(ExternalSensorICP)(0),              // 6: grpcapi.ExternalSensorICP
	(ViewSignalType)(0),                 // 7: grpcapi.ViewSignalType
	(YAxisUnits)(0),                     // 8: grpcapi.YAxisUnits
	(XAxisUnits)(0),                     // 9: grpcapi.XAxisUnits
	(YAxisDisplay)(0),                   // 10: grpcapi.YAxisDisplay
	(InputRange)(0),                     // 11: grpcapi.InputRange
	(DetectionType)(0),                  // 12: grpcapi.DetectionType
	(WindowType)(0),                     // 13: grpcapi.WindowType
	(HighPassFilter)(0),                 // 14: grpcapi.HighPassFilter
	(Temperature)(0),                    // 15: grpcapi.Temperature
	(ExternalSensorUsage)(0),            // 16: grpcapi.ExternalSensorUsage
	(*SpecificationRequest)(nil),        // 17: grpcapi.SpecificationRequest
	(*SpecificationResponse)(nil),       // 18: grpcapi.SpecificationResponse
	(*ConfigRequest)(nil),               // 19: grpcapi.ConfigRequest
	(*ConfigsResponse)(nil),             // 20: grpcapi.ConfigsResponse
	(*Configs)(nil),                     // 21: grpcapi.Configs
	(*ConfigResponse)(nil),              // 22: grpcapi.ConfigResponse
	(*LatestConfigRequest)(nil),         // 23: grpcapi.LatestConfigRequest
	(*SetConfigRequest)(nil),            // 24: grpcapi.SetConfigRequest
	(*QCMeasurementPointConfig)(nil),    // 25: grpcapi.QCMeasurementPointConfig
	(*common.Void)(nil),                 // 26: common.Void
}
var file_config_grpcapi_proto_depIdxs = []int32{
	0,  // 0: grpcapi.SpecificationRequest.targetType:type_name -> grpcapi.TargetType
	22, // 1: grpcapi.ConfigsResponse.configs:type_name -> grpcapi.ConfigResponse
	25, // 2: grpcapi.Configs.configQC:type_name -> grpcapi.QCMeasurementPointConfig
	25, // 3: grpcapi.ConfigResponse.configQC:type_name -> grpcapi.QCMeasurementPointConfig
	25, // 4: grpcapi.SetConfigRequest.configQC:type_name -> grpcapi.QCMeasurementPointConfig
	1,  // 5: grpcapi.QCMeasurementPointConfig.sampleRate:type_name -> grpcapi.SampleRate
	2,  // 6: grpcapi.QCMeasurementPointConfig.sampleAmount:type_name -> grpcapi.SampleAmount
	3,  // 7: grpcapi.QCMeasurementPointConfig.envelopeBandSelection:type_name -> grpcapi.EnvelopeBandSelection
	4,  // 8: grpcapi.QCMeasurementPointConfig.externalSensorEngineeringUnits:type_name -> grpcapi.ExternalSensorEngineeringUnits
	5,  // 9: grpcapi.QCMeasurementPointConfig.externalSensorSensitivity:type_name -> grpcapi.ExternalSensorSensitivity
	6,  // 10: grpcapi.QCMeasurementPointConfig.externalSensorICP:type_name -> grpcapi.ExternalSensorICP
	7,  // 11: grpcapi.QCMeasurementPointConfig.viewSignalType:type_name -> grpcapi.ViewSignalType
	8,  // 12: grpcapi.QCMeasurementPointConfig.yAxisUnits:type_name -> grpcapi.YAxisUnits
	9,  // 13: grpcapi.QCMeasurementPointConfig.XAxisUnits:type_name -> grpcapi.XAxisUnits
	10, // 14: grpcapi.QCMeasurementPointConfig.yAxisDisplay:type_name -> grpcapi.YAxisDisplay
	11, // 15: grpcapi.QCMeasurementPointConfig.inputRange:type_name -> grpcapi.InputRange
	12, // 16: grpcapi.QCMeasurementPointConfig.detectionType:type_name -> grpcapi.DetectionType
	13, // 17: grpcapi.QCMeasurementPointConfig.windowType:type_name -> grpcapi.WindowType
	14, // 18: grpcapi.QCMeasurementPointConfig.highPassFilter:type_name -> grpcapi.HighPassFilter
	15, // 19: grpcapi.QCMeasurementPointConfig.temperature:type_name -> grpcapi.Temperature
	16, // 20: grpcapi.QCMeasurementPointConfig.externalSensorUsage:type_name -> grpcapi.ExternalSensorUsage
	17, // 21: grpcapi.ResourceConfig.GetSpecification:input_type -> grpcapi.SpecificationRequest
	19, // 22: grpcapi.ResourceConfig.GetConfig:input_type -> grpcapi.ConfigRequest
	23, // 23: grpcapi.ResourceConfig.GetLatestConfigByTargetID:input_type -> grpcapi.LatestConfigRequest
	26, // 24: grpcapi.ResourceConfig.GetAllLatestConfigs:input_type -> common.Void
	24, // 25: grpcapi.ResourceConfig.SetConfigByTargetIDs:input_type -> grpcapi.SetConfigRequest
	18, // 26: grpcapi.ResourceConfig.GetSpecification:output_type -> grpcapi.SpecificationResponse
	20, // 27: grpcapi.ResourceConfig.GetConfig:output_type -> grpcapi.ConfigsResponse
	20, // 28: grpcapi.ResourceConfig.GetLatestConfigByTargetID:output_type -> grpcapi.ConfigsResponse
	20, // 29: grpcapi.ResourceConfig.GetAllLatestConfigs:output_type -> grpcapi.ConfigsResponse
	22, // 30: grpcapi.ResourceConfig.SetConfigByTargetIDs:output_type -> grpcapi.ConfigResponse
	26, // [26:31] is the sub-list for method output_type
	21, // [21:26] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_config_grpcapi_proto_init() }
func file_config_grpcapi_proto_init() {
	if File_config_grpcapi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_grpcapi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_grpcapi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_grpcapi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_grpcapi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_grpcapi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_grpcapi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_grpcapi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_grpcapi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_grpcapi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QCMeasurementPointConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_grpcapi_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_config_grpcapi_proto_goTypes,
		DependencyIndexes: file_config_grpcapi_proto_depIdxs,
		EnumInfos:         file_config_grpcapi_proto_enumTypes,
		MessageInfos:      file_config_grpcapi_proto_msgTypes,
	}.Build()
	File_config_grpcapi_proto = out.File
	file_config_grpcapi_proto_rawDesc = nil
	file_config_grpcapi_proto_goTypes = nil
	file_config_grpcapi_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ResourceConfigClient is the client API for ResourceConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResourceConfigClient interface {
	GetSpecification(ctx context.Context, in *SpecificationRequest, opts ...grpc.CallOption) (*SpecificationResponse, error)
	GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigsResponse, error)
	GetLatestConfigByTargetID(ctx context.Context, in *LatestConfigRequest, opts ...grpc.CallOption) (*ConfigsResponse, error)
	GetAllLatestConfigs(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ConfigsResponse, error)
	SetConfigByTargetIDs(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type resourceConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceConfigClient(cc grpc.ClientConnInterface) ResourceConfigClient {
	return &resourceConfigClient{cc}
}

func (c *resourceConfigClient) GetSpecification(ctx context.Context, in *SpecificationRequest, opts ...grpc.CallOption) (*SpecificationResponse, error) {
	out := new(SpecificationResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.ResourceConfig/GetSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceConfigClient) GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigsResponse, error) {
	out := new(ConfigsResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.ResourceConfig/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceConfigClient) GetLatestConfigByTargetID(ctx context.Context, in *LatestConfigRequest, opts ...grpc.CallOption) (*ConfigsResponse, error) {
	out := new(ConfigsResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.ResourceConfig/GetLatestConfigByTargetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceConfigClient) GetAllLatestConfigs(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ConfigsResponse, error) {
	out := new(ConfigsResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.ResourceConfig/GetAllLatestConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceConfigClient) SetConfigByTargetIDs(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.ResourceConfig/SetConfigByTargetIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceConfigServer is the server API for ResourceConfig service.
type ResourceConfigServer interface {
	GetSpecification(context.Context, *SpecificationRequest) (*SpecificationResponse, error)
	GetConfig(context.Context, *ConfigRequest) (*ConfigsResponse, error)
	GetLatestConfigByTargetID(context.Context, *LatestConfigRequest) (*ConfigsResponse, error)
	GetAllLatestConfigs(context.Context, *common.Void) (*ConfigsResponse, error)
	SetConfigByTargetIDs(context.Context, *SetConfigRequest) (*ConfigResponse, error)
}

// UnimplementedResourceConfigServer can be embedded to have forward compatible implementations.
type UnimplementedResourceConfigServer struct {
}

func (*UnimplementedResourceConfigServer) GetSpecification(context.Context, *SpecificationRequest) (*SpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecification not implemented")
}
func (*UnimplementedResourceConfigServer) GetConfig(context.Context, *ConfigRequest) (*ConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedResourceConfigServer) GetLatestConfigByTargetID(context.Context, *LatestConfigRequest) (*ConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestConfigByTargetID not implemented")
}
func (*UnimplementedResourceConfigServer) GetAllLatestConfigs(context.Context, *common.Void) (*ConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLatestConfigs not implemented")
}
func (*UnimplementedResourceConfigServer) SetConfigByTargetIDs(context.Context, *SetConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfigByTargetIDs not implemented")
}

func RegisterResourceConfigServer(s *grpc.Server, srv ResourceConfigServer) {
	s.RegisterService(&_ResourceConfig_serviceDesc, srv)
}

func _ResourceConfig_GetSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceConfigServer).GetSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ResourceConfig/GetSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceConfigServer).GetSpecification(ctx, req.(*SpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceConfig_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceConfigServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ResourceConfig/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceConfigServer).GetConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceConfig_GetLatestConfigByTargetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceConfigServer).GetLatestConfigByTargetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ResourceConfig/GetLatestConfigByTargetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceConfigServer).GetLatestConfigByTargetID(ctx, req.(*LatestConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceConfig_GetAllLatestConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceConfigServer).GetAllLatestConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ResourceConfig/GetAllLatestConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceConfigServer).GetAllLatestConfigs(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceConfig_SetConfigByTargetIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceConfigServer).SetConfigByTargetIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ResourceConfig/SetConfigByTargetIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceConfigServer).SetConfigByTargetIDs(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceConfig_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapi.ResourceConfig",
	HandlerType: (*ResourceConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpecification",
			Handler:    _ResourceConfig_GetSpecification_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ResourceConfig_GetConfig_Handler,
		},
		{
			MethodName: "GetLatestConfigByTargetID",
			Handler:    _ResourceConfig_GetLatestConfigByTargetID_Handler,
		},
		{
			MethodName: "GetAllLatestConfigs",
			Handler:    _ResourceConfig_GetAllLatestConfigs_Handler,
		},
		{
			MethodName: "SetConfigByTargetIDs",
			Handler:    _ResourceConfig_SetConfigByTargetIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/grpcapi.proto",
}
